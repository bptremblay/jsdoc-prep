// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jquery', 'underscore', 'backbone', 'text!column-and-block-layout-editor-path/templates/column-resize-handle.html', 'column-and-block-layout-editor-path/percentage-utils', 'column-and-block-layout-editor-path/column-resize-manager', 'column-and-block-layout-editor-path/constants'], function($, _, Backbone, template, percentageUtils, columnResizeManager, constants) {
  var ColumnResizeHandle;
  return ColumnResizeHandle = (function(superClass) {
    extend(ColumnResizeHandle, superClass);

    function ColumnResizeHandle() {
      this._onColumnResize = bind(this._onColumnResize, this);
      return ColumnResizeHandle.__super__.constructor.apply(this, arguments);
    }

    ColumnResizeHandle.prototype.events = {
      mousedown: '_startResizingColumn'
    };

    ColumnResizeHandle.prototype.initialize = function() {
      return this.layoutContainerWidth = this.model.getLayoutContainerWidth();
    };

    ColumnResizeHandle.prototype._startResizingColumn = function(event) {
      event.preventDefault();
      if (columnResizeManager.isResizing()) {
        return;
      }
      this.$el.find('.grabber').addClass('is-resizing');
      return columnResizeManager.startResizing(event.clientX, this._onColumnResize, this._finishResizingColumn, this.model.getLayoutReadyPromise);
    };

    ColumnResizeHandle.prototype._finishResizingColumn = function() {
      return $('.grabber.is-resizing').removeClass('is-resizing');
    };

    ColumnResizeHandle.prototype._onColumnResize = function(deltaInPixels) {
      var calculatedDelta, deltaInDecimal, numberOfSteps;
      deltaInDecimal = percentageUtils.truncateDecimal(deltaInPixels / this.layoutContainerWidth);
      if (Math.abs(deltaInDecimal) >= constants.COLUMN_WIDTH.INTERVAL) {
        numberOfSteps = Math.floor(deltaInDecimal / constants.COLUMN_WIDTH.INTERVAL);
        calculatedDelta = constants.COLUMN_WIDTH.INTERVAL * numberOfSteps;
        return this.model.applyDeltaToColumnWidth(percentageUtils.truncateDecimal(calculatedDelta));
      } else {
        return false;
      }
    };

    ColumnResizeHandle.prototype.render = function() {
      this.$el.html(template);
      if (columnResizeManager.isResizing()) {
        this.$el.find('.grabber').addClass('is-resizing');
      }
      return this;
    };

    return ColumnResizeHandle;

  })(Backbone.View);
});
