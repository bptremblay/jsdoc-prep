// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['backbone', 'column-and-block-layout-editor-path/constants', 'constants', 'plugins/drag', 'css!column-and-block-layout-editor-path/css/cable'], function(Backbone, constants, engineConstants) {
  var MoveHandle;
  return MoveHandle = (function(superClass) {
    extend(MoveHandle, superClass);

    function MoveHandle() {
      this._toggleHover = bind(this._toggleHover, this);
      return MoveHandle.__super__.constructor.apply(this, arguments);
    }

    MoveHandle.prototype.tagName = 'a';

    MoveHandle.prototype.attributes = {
      href: '#',
      draggable: true,
      "class": 'gl-block-move-handle'
    };

    MoveHandle.prototype.events = {
      click: '_preventDefault',
      mouseenter: '_toggleHover',
      mouseleave: '_toggleHover'
    };

    MoveHandle.prototype.render = function() {
      this.$el.attr(constants.DATA_ATTRS.REMOVE_ON_PUBLISH, true);
      this.$el.attr(engineConstants.editor.standardAttrs.dragDrop.passthrough, true);
      this.$el.drag({
        type: constants.TYPES.BLOCK,
        data: (function(_this) {
          return function() {
            return _this.model.toBlockDescriptor().stringify();
          };
        })(this),
        start: (function(_this) {
          return function(event) {
            var base, offset, uiEvent, xOffset, yOffset;
            uiEvent = event.originalEvent;
            offset = $(event.target).offset();
            xOffset = uiEvent.pageX - offset.left;
            yOffset = uiEvent.pageY - offset.top;
            return typeof (base = uiEvent.dataTransfer).setDragImage === "function" ? base.setDragImage(_this.$el.parent().get(0), xOffset, yOffset) : void 0;
          };
        })(this)
      });
      return this;
    };

    MoveHandle.prototype._toggleHover = function() {
      return this.$el.toggleClass('hover');
    };

    MoveHandle.prototype._preventDefault = function(event) {
      return event.preventDefault();
    };

    return MoveHandle;

  })(Backbone.View);
});
