// Generated by CoffeeScript 1.10.0

/*
  This is the main view of the layout.  It is rendered from a prototype layout Mustache template.

  Events triggered
    * element-created - When the view element is first created.  This element exists for the life of the view
 */
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jquery', 'underscore', 'backbone', 'template-engine', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/views/column'], function($, _, Backbone, Mustache, constants, ColumnView) {
  var LayoutView, SELECTORS;
  SELECTORS = {
    column: '[data-layout-column]'
  };
  return LayoutView = (function(superClass) {
    extend(LayoutView, superClass);

    function LayoutView() {
      return LayoutView.__super__.constructor.apply(this, arguments);
    }

    LayoutView.prototype.events = {
      'drop': '_cancelDrop'
    };

    LayoutView.prototype.columnViews = [];

    LayoutView.prototype._cancelDrop = function(event) {
      return event.preventDefault();
    };

    LayoutView.prototype._retrieveTemplate = function() {
      this.template = this.prototypeMarkupService.getLayout(this.model.get('protoLayout'));
      if (!this.template) {
        throw new Error("Unable to find prototype layout: " + (this.model.get('protoLayout')));
      }
    };

    LayoutView.prototype._renderLayout = function() {
      var $el;
      $el = $(Mustache.render(this.template.markup.layout, this.model.getAttributesForRender()));
      if (this.rendered) {
        this.$el.html($el.html());
      } else {
        this.setElement($el);
        this.rendered = true;
        this.trigger(constants.EVENTS.ELEMENT_CREATED);
      }
      return this.$el.attr(constants.DATA_ATTRS.PROTO_LAYOUT, this.model.get('protoLayout'));
    };

    LayoutView.prototype._renderColumn = function(columnElement, column, options) {
      var columnView;
      if (options == null) {
        options = {};
      }
      columnView = new ColumnView({
        model: column,
        el: columnElement,
        eventEmitter: this.eventEmitter,
        prototypeMarkupService: this.prototypeMarkupService,
        blockTemplate: this.template.markup.block
      });
      columnView.render(options);
      return columnView;
    };

    LayoutView.prototype._renderColumns = function(options) {
      var $columns;
      $columns = this.$el.find(SELECTORS.column);
      return this.columnViews = this.model.getColumns().map((function(_this) {
        return function(column, idx) {
          return _this._renderColumn($columns.get(idx), column, options);
        };
      })(this));
    };

    LayoutView.prototype._onModelChanged = function(options) {
      if (!this.template) {
        this._retrieveTemplate();
      }
      this._cleanUp(options);
      return this.render(options);
    };

    LayoutView.prototype.initialize = function(opts) {
      this.rendered = false;
      this.template = null;
      this.eventEmitter = opts.eventEmitter;
      this.prototypeMarkupService = opts.prototypeMarkupService;
      return this.listenTo(this.eventEmitter, constants.EVENTS.LAYOUT_CHANGED, this._onModelChanged);
    };

    LayoutView.prototype.getRenderedElement = function() {
      if (this.model.isLayoutIncluded()) {
        return this.$el;
      } else {
        return $('<div/>');
      }
    };

    LayoutView.prototype.render = function(options) {
      this._renderLayout(options);
      this._renderColumns(options);
      return this;
    };

    LayoutView.prototype._cleanUp = function(options) {
      return _(this.columnViews).invoke('remove', options);
    };

    LayoutView.prototype.getDimensions = function() {
      return {
        width: this.$el.width(),
        height: this.$el.height(),
        offset: this.$el.offset(),
        columns: _(this.columnViews).invoke('getDimensions')
      };
    };

    return LayoutView;

  })(Backbone.View);
});
