// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jquery', 'backbone', 'template-engine', 'galileo-lib/modules/managers/error-manager', 'column-and-block-layout-editor-path/constants'], function($, Backbone, mustache, errorManager, constants) {
  var ImportView;
  return ImportView = (function(superClass) {
    extend(ImportView, superClass);

    function ImportView() {
      return ImportView.__super__.constructor.apply(this, arguments);
    }

    ImportView.prototype._containerMarkup = function() {
      return $('<div/>').append(this.$el.clone()).html();
    };

    ImportView.prototype._removeActivationAttributes = function($layout) {
      return $layout.find('.editable-active').removeClass('editable-active').end().removeClass('layout-active layout-hover layout-tools-hover');
    };

    ImportView.prototype._onElementCreated = function() {
      return this.setElement(this.editView.el);
    };

    ImportView.prototype.initialize = function(opts) {
      this.editView = opts.editView;
      return this.editView.on(constants.EVENTS.ELEMENT_CREATED, this._onElementCreated, this);
    };

    ImportView.prototype.render = function() {
      var callback, deferreds, e, editor, output;
      deferreds = (function() {
        var i, len, ref, results;
        ref = this.model.getContentEditors();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          editor = ref[i];
          output = (function() {
            var error;
            try {
              return editor.renderForImport() || '';
            } catch (error) {
              e = error;
              errorManager.error("Couldn't render content for " + editor.name);
              return null;
            }
          })();
          callback = function(editor, content) {
            return {
              editor: editor,
              content: content
            };
          };
          results.push($.when(output).then(callback.bind(this, editor)));
        }
        return results;
      }).call(this);
      return $.when.apply(this, deferreds).then(((function(_this) {
        return function() {
          var $published, arg, i, len;
          $published = $(_this._containerMarkup());
          $published.removeAttr('data-layout-addable');
          for (i = 0, len = arguments.length; i < len; i++) {
            arg = arguments[i];
            $published.find("[data-editor-name='" + arg.editor.name + "']").closest('[data-content-editor-instance-id]').replaceWith(arg.content);
          }
          return _this._removeActivationAttributes($published).appendTo('<p>').parent().html();
        };
      })(this)), function(message) {
        return errorManager.error("Failed to render document: " + message);
      });
    };

    return ImportView;

  })(Backbone.View);
});
