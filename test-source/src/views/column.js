// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'jquery', 'backbone', 'template-engine', 'column-and-block-layout-editor-path/views/block', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/views/column-resize-handle', 'column-and-block-layout-editor-path/views/column-resize-handle-IE'], function(_, $, Backbone, Mustache, BlockView, constants, ColumnResizeHandleView, ColumnResizeHandleViewIE) {
  var ATTRS, ColumnView, SELECTORS;
  ATTRS = {
    block: 'data-gl-layout-block'
  };
  SELECTORS = {
    blocks: "[" + ATTRS.block + "]",
    block: function(id) {
      return "[" + ATTRS.block + "=" + id + "]";
    }
  };
  return ColumnView = (function(superClass) {
    extend(ColumnView, superClass);

    function ColumnView() {
      this._mouseOut = bind(this._mouseOut, this);
      this._mouseOver = bind(this._mouseOver, this);
      return ColumnView.__super__.constructor.apply(this, arguments);
    }

    ColumnView.prototype.blockViews = [];

    ColumnView.prototype.events = {
      'mouseover': '_mouseOver',
      'mouseout': '_mouseOut'
    };

    ColumnView.prototype._mouseOver = function(e) {
      return this.blockViews.forEach(function(view) {
        return view.model.getContentEditors().forEach(function(editor) {
          return editor.trigger(constants.EVENTS.COLUMN_MOUSEOVER);
        });
      });
    };

    ColumnView.prototype._mouseOut = function(e) {
      return this.blockViews.forEach(function(view) {
        return view.model.getContentEditors().forEach(function(editor) {
          return editor.trigger(constants.EVENTS.COLUMN_MOUSEOUT);
        });
      });
    };

    ColumnView.prototype._addBlock = function(block, idx) {
      var $block;
      $block = $(Mustache.render(this.blockTemplate, {}));
      if (idx === this.blockViews.length) {
        this.$el.append($block);
      } else {
        this.$el.find(SELECTORS.blocks).eq(idx).before($block);
      }
      return this.blockViews.splice(idx, 0, this._renderBlock($block, block));
    };

    ColumnView.prototype._removeBlock = function(block, idx) {
      this.$el.find(SELECTORS.block(block.id)).remove();
      return this.blockViews.splice(idx, 1);
    };

    ColumnView.prototype._initEvents = function() {
      var blocks;
      blocks = this.model.getBlocksCollection();
      this.listenTo(blocks, 'add-at', this._addBlock);
      return this.listenTo(blocks, constants.EVENTS.REMOVE_FROM, this._removeBlock);
    };

    ColumnView.prototype._renderBlock = function(blockElement, block, options) {
      var blockView;
      if (options == null) {
        options = {};
      }
      blockView = new BlockView({
        model: block,
        el: blockElement,
        eventEmitter: this.eventEmitter,
        prototypeMarkupService: this.prototypeMarkupService,
        contentDecorators: this.prototypeMarkupService.getContentDecoratorsByContentType(this.$el)
      });
      blockView.render(options);
      return blockView;
    };

    ColumnView.prototype._renderBlocks = function(options) {
      var $blocks;
      $blocks = this.$el.find(SELECTORS.blocks);
      return this.blockViews = this.model.getBlocksCollection().map((function(_this) {
        return function(block, idx) {
          return _this._renderBlock($blocks.get(idx), block, options);
        };
      })(this));
    };

    ColumnView.prototype._addColumnPositionClass = function() {
      if (this.model.hasContentRight()) {
        return this.$el.addClass(constants.CLASSES.COLUMN_LEFT);
      } else if (this.model.hasContentLeft()) {
        return this.$el.addClass(constants.CLASSES.COLUMN_RIGHT);
      } else {
        return this.$el.addClass(constants.CLASSES.COLUMN_DEFAULT);
      }
    };

    ColumnView.prototype._renderResizeColumnHandle = function() {
      var resizeHandle;
      if (this._browserIsIE11()) {
        resizeHandle = ColumnResizeHandleViewIE;
      } else {
        resizeHandle = ColumnResizeHandleView;
      }
      this.columnResizeHandleView = new resizeHandle({
        model: this.model
      });
      return this.$el.prepend(this.columnResizeHandleView.render().el);
    };

    ColumnView.prototype._browserIsIE11 = function() {
      return $.ua.browser.name === 'IE' && $.ua.browser.major === '11';
    };

    ColumnView.prototype.initialize = function(opts) {
      this.eventEmitter = opts.eventEmitter;
      this.prototypeMarkupService = opts.prototypeMarkupService;
      this.blockTemplate = opts.blockTemplate;
      return this._initEvents();
    };

    ColumnView.prototype.render = function(options) {
      this._renderBlocks(options);
      if (this.model.hasContentRight()) {
        this._renderResizeColumnHandle();
      }
      if (!this._browserIsIE11()) {
        this.$el.css({
          position: 'relative'
        });
      }
      this._addColumnPositionClass();
      return this;
    };

    ColumnView.prototype.remove = function(options) {
      if (this.columnResizeHandleView) {
        this.columnResizeHandleView.remove();
      }
      _.chain(this.model.getContents()).flatten().invoke('deactivate', options);
      return ColumnView.__super__.remove.apply(this, arguments);
    };

    ColumnView.prototype.getDimensions = function() {
      return {
        widthPct: this.model.getWidthPct(),
        blocks: _(this.blockViews).invoke('getDimensions')
      };
    };

    return ColumnView;

  })(Backbone.View);
});
