// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jquery', 'backbone', 'galileo-lib/modules/services/document-feature-service', 'column-and-block-layout-editor-path/views/content', 'column-and-block-layout-editor-path/views/move-handle'], function($, Backbone, documentFeatureService, ContentView, MoveHandleView) {
  var BlockView;
  return BlockView = (function(superClass) {
    var ATTRS;

    extend(BlockView, superClass);

    function BlockView() {
      return BlockView.__super__.constructor.apply(this, arguments);
    }

    ATTRS = {
      id: 'data-gl-layout-block'
    };

    BlockView.prototype.className = 'gl-layout-block';

    BlockView.prototype.contentViews = [];

    BlockView.prototype._getContentDecoratorTemplate = function(type) {
      var contentDecorator;
      contentDecorator = this.contentDecorators[type];
      if (contentDecorator == null) {
        contentDecorator = this.prototypeMarkupService.getContentDecorator(type);
        this.contentDecorators[type] = contentDecorator;
      }
      return contentDecorator.markup;
    };

    BlockView.prototype._renderId = function() {
      return this.$el.attr(ATTRS.id, this.model.id);
    };

    BlockView.prototype._documentSupportsMove = function() {
      return documentFeatureService.supported(documentFeatureService.FEATURES.MOVE_BLOCK);
    };

    BlockView.prototype._renderContent = function(content, options) {
      var contentView;
      contentView = new ContentView({
        model: content,
        eventEmitter: this.eventEmitter,
        template: this._getContentDecoratorTemplate(content.get('type')),
        decoratorProviderFn: this._getContentDecoratorTemplate.bind(this)
      });
      this.$el.append(contentView.render(options).el);
      return contentView;
    };

    BlockView.prototype._renderContents = function(options) {
      return this.contentViews = this.model.getContentsCollection().map((function(_this) {
        return function(content) {
          return _this._renderContent(content, options);
        };
      })(this));
    };

    BlockView.prototype._renderMoveHandle = function() {
      this.moveHandleView = new MoveHandleView({
        model: this.model
      });
      return this.$el.prepend(this.moveHandleView.render().el);
    };

    BlockView.prototype._renderContainedContentTypes = function() {
      return this.model.getContainedContentTypes().forEach((function(_this) {
        return function(type) {
          return _this.$el.addClass("gl-contains-" + type);
        };
      })(this));
    };

    BlockView.prototype.initialize = function(opts) {
      this.eventEmitter = opts.eventEmitter;
      this.prototypeMarkupService = opts.prototypeMarkupService;
      return this.contentDecorators = opts.contentDecorators;
    };

    BlockView.prototype.render = function(options) {
      if (options == null) {
        options = {};
      }
      this._renderId();
      this._renderContents(options);
      this._renderContainedContentTypes();
      if (this._documentSupportsMove()) {
        this._renderMoveHandle();
      }
      return this;
    };

    BlockView.prototype.getDimensions = function() {
      return {
        height: this.$el.height()
      };
    };

    return BlockView;

  })(Backbone.View);
});
