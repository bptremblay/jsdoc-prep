// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['jquery', 'backbone', 'text!column-and-block-layout-editor-path/templates/column-resize-handle.html', 'column-and-block-layout-editor-path/percentage-utils', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/column-resize-manager'], function($, Backbone, template, percentageUtils, constants, columnResizeManager) {
  var ColumnResizeHandleIE;
  return ColumnResizeHandleIE = (function(superClass) {
    extend(ColumnResizeHandleIE, superClass);

    function ColumnResizeHandleIE() {
      this._dragHandle = bind(this._dragHandle, this);
      this._finishResizingColumn = bind(this._finishResizingColumn, this);
      return ColumnResizeHandleIE.__super__.constructor.apply(this, arguments);
    }

    ColumnResizeHandleIE.prototype.events = {
      mousedown: '_startResizingColumn'
    };

    ColumnResizeHandleIE.prototype.initialize = function() {
      return this.layoutContainerWidth = this.model.getLayoutContainerWidth();
    };

    ColumnResizeHandleIE.prototype._startResizingColumn = function(event) {
      event.preventDefault();
      if (columnResizeManager.isResizing()) {
        return;
      }
      this.$el.find('.grabber').addClass('is-resizing');
      return columnResizeManager.startResizing(event.clientX, this._dragHandle, this._finishResizingColumn, this.model.getLayoutReadyPromise);
    };

    ColumnResizeHandleIE.prototype._finishResizingColumn = function() {
      return this.model.resizeColumnFromHandle(this._getColumnPercentage());
    };

    ColumnResizeHandleIE.prototype._dragHandle = function(deltaInPixels) {
      var columnWidthIsAtMaxOrMin, deltaInDecimal, newColumnPercentage;
      deltaInDecimal = percentageUtils.truncateDecimal(deltaInPixels / this.layoutContainerWidth);
      if (Math.abs(deltaInDecimal) >= constants.COLUMN_WIDTH.INTERVAL) {
        newColumnPercentage = this._calculateNewColumnPercentage(deltaInDecimal);
        columnWidthIsAtMaxOrMin = newColumnPercentage > constants.COLUMN_WIDTH.MAX_PERCENT || newColumnPercentage < constants.COLUMN_WIDTH.MIN_PERCENT;
        if (!columnWidthIsAtMaxOrMin) {
          return this._setColumnPercentage(newColumnPercentage + "%");
        }
      } else {
        return false;
      }
    };

    ColumnResizeHandleIE.prototype._getColumnPercentage = function() {
      var resizeBar;
      resizeBar = this.$el.find('.column-resize-bar').get(0);
      return parseInt(resizeBar.style.marginRight, 10);
    };

    ColumnResizeHandleIE.prototype._setColumnPercentage = function(newPercentage) {
      return this.$el.find('.column-resize-bar').css('margin-right', newPercentage);
    };

    ColumnResizeHandleIE.prototype._calculateNewColumnPercentage = function(deltaInDecimal) {
      var calculatedDelta, currentColumnPercentage, newColumnPercentage, numberOfSteps;
      numberOfSteps = Math.floor(deltaInDecimal / constants.COLUMN_WIDTH.INTERVAL);
      calculatedDelta = constants.COLUMN_WIDTH.INTERVAL * numberOfSteps;
      currentColumnPercentage = this._getColumnPercentage();
      newColumnPercentage = currentColumnPercentage - (calculatedDelta * 100);
      return newColumnPercentage;
    };

    ColumnResizeHandleIE.prototype.render = function() {
      this.$el.html(template);
      this._setColumnPercentage((100 - Math.round(this.model.getWidthPct() * 100)) + "%");
      return this;
    };

    return ColumnResizeHandleIE;

  })(Backbone.View);
});
