// Generated by CoffeeScript 1.10.0
define(['jquery', 'template-engine', 'column-and-block-layout-editor-path/constants'], function($, Mustache, constants) {
  var AbstractLayoutGenerator;
  return AbstractLayoutGenerator = (function() {
    function AbstractLayoutGenerator(prototypeMarkupService) {
      this.prototypeMarkupService = prototypeMarkupService;
    }

    AbstractLayoutGenerator.prototype._getContentDecoratorName = function($protoLayout, contentType) {
      var contentDecoratorsForLayout;
      contentDecoratorsForLayout = this.prototypeMarkupService.getContentDecoratorsByContentType($protoLayout);
      return contentDecoratorsForLayout[contentType] || contentType;
    };

    AbstractLayoutGenerator.prototype._getProtoLayoutFor = function(contentType) {
      return this.prototypeMarkupService.getAbstractLayoutForContentType(contentType);
    };

    AbstractLayoutGenerator.prototype._createProtoLayoutModel = function(name, contentType) {
      return {
        name: name,
        type: 'email-block',
        style: 'padding: 0px 0px 0px 0px;',
        columns: this._createProtoColumnModel(contentType)
      };
    };

    AbstractLayoutGenerator.prototype._createProtoColumnModel = function(contentType) {
      if (contentType === constants.TYPES.BLOCK) {
        return [];
      } else {
        return [
          {
            blocks: [
              {
                id: '',
                contents: []
              }
            ]
          }
        ];
      }
    };

    AbstractLayoutGenerator.prototype._createContentDecoratorModel = function(name) {
      return {
        name: name
      };
    };

    AbstractLayoutGenerator.prototype._createLayoutAttibutes = function(protoLayout) {
      var attrs;
      attrs = {};
      attrs[constants.DATA_ATTRS.PROTO_LAYOUT] = protoLayout;
      return attrs;
    };

    AbstractLayoutGenerator.prototype._addLayoutAttributes = function($layout, attrs) {
      return $layout.attr(attrs);
    };

    AbstractLayoutGenerator.prototype._render = function(markup, model) {
      return Mustache.render(markup, model);
    };

    AbstractLayoutGenerator.prototype.isDocumentSupported = function(documentFeatures) {
      return documentFeatures.supported(documentFeatures.FEATURES.COLUMN_AND_BLOCK);
    };

    AbstractLayoutGenerator.prototype.createAbstractLayoutMarkup = function(name, contentType) {
      var $markup, protoLayout;
      protoLayout = this._getProtoLayoutFor(contentType);
      $markup = $(this._render(protoLayout.markup, this._createProtoLayoutModel(name, contentType)));
      this._addLayoutAttributes($markup, this._createLayoutAttibutes(protoLayout.name));
      return $markup.prop('outerHTML');
    };

    AbstractLayoutGenerator.prototype.insertContentMarkup = function(layoutMarkup, contentName, contentType, contentMarkup) {
      var $content, $layout, contentDecorator;
      $layout = $(layoutMarkup);
      contentDecorator = this.prototypeMarkupService.getContentDecorator(this._getContentDecoratorName($layout, contentType));
      $content = $('<div/>').append(this._render(contentDecorator.markup, this._createContentDecoratorModel(contentName)));
      $content.find(constants.SELECTORS.CONTENT).replaceWith(contentMarkup);
      return $layout.find(constants.SELECTORS.BLOCKS).append($content.html()).end().prop('outerHTML');
    };

    return AbstractLayoutGenerator;

  })();
});
