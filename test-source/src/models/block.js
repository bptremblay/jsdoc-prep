// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'galileo-lib/modules/services/descriptors/block/block-descriptor', 'column-and-block-layout-editor-path/models/content', 'column-and-block-layout-editor-path/models/contents'], function(_, Backbone, BlockDescriptor, Content, Contents) {
  var BlockModel;
  return BlockModel = (function(superClass) {
    extend(BlockModel, superClass);

    function BlockModel() {
      this.toBlockDescriptor = bind(this.toBlockDescriptor, this);
      return BlockModel.__super__.constructor.apply(this, arguments);
    }

    BlockModel.prototype.contents = [];

    BlockModel.prototype._createContentModel = function(contents) {
      var opts;
      opts = {
        eventEmitter: this.eventEmitter,
        contentEditorFactory: this.contentEditorFactory,
        block: this,
        contentEditorStateMap: this.contentEditorStateMap
      };
      return new Contents(contents, opts);
    };

    BlockModel.prototype._removeBlockIfContentsIsEmpty = function(model, collection, options) {
      if (this.contents.isEmpty()) {
        return this.collection.remove(this, options);
      }
    };

    BlockModel.prototype.toState = function() {
      var state;
      state = this.toJSON();
      state.contents = this.contents.toState();
      return state;
    };

    BlockModel.prototype.getContentsCollection = function() {
      return this.contents;
    };

    BlockModel.prototype.getContainedContentTypes = function() {
      return this.contents.pluck('type');
    };

    BlockModel.prototype.getContents = function() {
      return this.contents.getContents();
    };

    BlockModel.prototype.getContentEditors = function() {
      return this.contents.getEditors();
    };

    BlockModel.prototype.deactivate = function() {
      return this.contents.deactivate();
    };

    BlockModel.prototype.getWidthPx = function() {
      return this.collection.getWidthPx();
    };

    BlockModel.prototype.hasContentLeft = function() {
      return this.collection.hasContentLeft();
    };

    BlockModel.prototype.hasContentRight = function() {
      return this.collection.hasContentRight();
    };

    BlockModel.prototype.toBlockDescriptor = function() {
      return new BlockDescriptor(_.extend(this.getMetadata(), {
        payload: this.getDescriptorContents()
      }));
    };

    BlockModel.prototype.getMetadata = function() {
      return {
        id: this.get('id'),
        sourceLayoutInstanceId: this.collection.getLayoutInstanceId(),
        sourceIsChildContent: false,
        sourceColumnIndex: this.collection.getColumnIndex(),
        sourceBlockIndex: this.getBlockIndex()
      };
    };

    BlockModel.prototype.getDescriptorContents = function() {
      return {
        contents: this.getContentsCollection().invoke('getStateForBlockDescriptor')
      };
    };

    BlockModel.prototype.getBlockIndex = function() {
      return this.collection.indexOf(this);
    };

    BlockModel.prototype.initialize = function(block, opts) {
      this.eventEmitter = opts.eventEmitter;
      this.contentEditorFactory = opts.contentEditorFactory;
      this.contentEditorStateMap = opts.contentEditorStateMap;
      this.contents = this._createContentModel(block.contents);
      return this.listenTo(this.contents, 'remove', this._removeBlockIfContentsIsEmpty, this);
    };

    return BlockModel;

  })(Backbone.Model);
});
