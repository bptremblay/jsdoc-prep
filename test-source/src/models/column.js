// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/models/block', 'column-and-block-layout-editor-path/models/blocks', 'column-and-block-layout-editor-path/models/converters/block-converter'], function(_, Backbone, constants, Block, Blocks, BlockConverter) {
  var ColumnModel;
  return ColumnModel = (function(superClass) {
    extend(ColumnModel, superClass);

    function ColumnModel() {
      this.getLayoutReadyPromise = bind(this.getLayoutReadyPromise, this);
      return ColumnModel.__super__.constructor.apply(this, arguments);
    }

    ColumnModel.prototype.blocks = [];

    ColumnModel.prototype._removeColumnIfBlocksIsEmpty = function(model, collection, options) {
      if (this.blocks.isEmpty()) {
        return this.collection.remove(this, options);
      }
    };

    ColumnModel.prototype._createBlockModel = function(blocks) {
      return new Blocks(blocks, this.blockOpts);
    };

    ColumnModel.prototype._onBlockRemoved = function(block) {
      return block.deactivate();
    };

    ColumnModel.prototype._refreshAttributes = function() {
      var attributes;
      attributes = _(this.attributes).clone();
      attributes.blocks = this.blocks.toState();
      return this.set(attributes, {
        silent: true
      });
    };

    ColumnModel.prototype.applyDeltaToColumnWidth = function(delta) {
      return this.collection.applyDeltaToColumnWidth(this, delta);
    };

    ColumnModel.prototype.resizeColumnFromHandle = function(firstColumnWidthPercentage) {
      return this.collection.resizeColumnFromHandle(firstColumnWidthPercentage / 100);
    };

    ColumnModel.prototype.toState = function() {
      var state;
      state = this.toJSON();
      state.blocks = this.blocks.toState();
      return state;
    };

    ColumnModel.prototype.getBlocksCollection = function() {
      return this.blocks;
    };

    ColumnModel.prototype.getContents = function() {
      return this.blocks.getContents();
    };

    ColumnModel.prototype.getContentEditors = function() {
      return this.blocks.getContentEditors();
    };

    ColumnModel.prototype.getLayoutInstanceId = function() {
      return this.collection.getLayoutInstanceId();
    };

    ColumnModel.prototype.getWidthPct = function() {
      return this.get('columnWidth');
    };

    ColumnModel.prototype.getWidthPx = function() {
      return this.layoutContainerWidth * this.getWidthPct();
    };

    ColumnModel.prototype.getLayoutContainerWidth = function() {
      return this.layoutContainerWidth;
    };

    ColumnModel.prototype.getLayoutReadyPromise = function() {
      return this.collection.getLayoutReadyPromise();
    };

    ColumnModel.prototype.getAttributesForRender = function() {
      var attributes;
      attributes = this.toState();
      attributes.columnWidth = (Math.round(this.getWidthPct() * 100)) + "%";
      return attributes;
    };

    ColumnModel.prototype.hasContentLeft = function() {
      return this !== this.collection.first();
    };

    ColumnModel.prototype.hasContentRight = function() {
      return this !== this.collection.last();
    };

    ColumnModel.prototype.hasBlock = function(name) {
      return this.blocks.get(name) != null;
    };

    ColumnModel.prototype.hasMultipleBlocks = function() {
      return this.blocks.length > 1;
    };

    ColumnModel.prototype.addBlock = function(position, blockJSON) {
      var opts;
      opts = _.extend({}, this.blockOpts, {
        at: position
      });
      this.blocks.add(blockJSON, opts);
      return this._refreshAttributes();
    };

    ColumnModel.prototype.getColumnIndex = function() {
      return this.collection.indexOf(this);
    };

    ColumnModel.prototype.initialize = function(column, opts) {
      this.layoutContainerWidth = opts.layoutContainerWidth;
      this.blockOpts = {
        eventEmitter: opts.eventEmitter,
        contentEditorFactory: opts.contentEditorFactory,
        contentEditorStateMap: opts.contentEditorStateMap,
        column: this
      };
      this.blocks = this._createBlockModel(column.blocks);
      this.listenTo(this.blocks, constants.EVENTS.REMOVE_FROM, this._onBlockRemoved);
      return this.listenTo(this.blocks, 'remove', this._removeColumnIfBlocksIsEmpty, this);
    };

    return ColumnModel;

  })(Backbone.Model);
});
