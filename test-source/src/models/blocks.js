// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/models/block'], function(_, Backbone, constants, Block) {
  var Blocks;
  return Blocks = (function(superClass) {
    extend(Blocks, superClass);

    function Blocks() {
      return Blocks.__super__.constructor.apply(this, arguments);
    }

    Blocks.prototype.model = Block;

    Blocks.prototype._onAdd = function(block) {
      return this.trigger(constants.EVENTS.ADD_AT, block, this.indexOf(block));
    };

    Blocks.prototype._onRemove = function(block, collection, options) {
      return this.trigger(constants.EVENTS.REMOVE_FROM, block, options.index);
    };

    Blocks.prototype.initialize = function(models, blockOpts) {
      this.column = blockOpts.column;
      this.listenTo(this, 'add', this._onAdd);
      return this.listenTo(this, 'remove', this._onRemove);
    };

    Blocks.prototype.toState = function() {
      return this.invoke('toState');
    };

    Blocks.prototype.getWidthPx = function() {
      return this.column.getWidthPx();
    };

    Blocks.prototype.hasContentLeft = function() {
      return this.column.hasContentLeft();
    };

    Blocks.prototype.hasContentRight = function() {
      return this.column.hasContentRight();
    };

    Blocks.prototype.getLayoutInstanceId = function() {
      return this.column.getLayoutInstanceId();
    };

    Blocks.prototype.getContents = function() {
      return _.flatten(this.invoke('getContents'));
    };

    Blocks.prototype.getColumnIndex = function() {
      return this.column.getColumnIndex();
    };

    Blocks.prototype.getContentEditors = function() {
      return _.flatten(this.invoke('getContentEditors'));
    };

    return Blocks;

  })(Backbone.Collection);
});
