// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/percentage-utils', 'column-and-block-layout-editor-path/models/column', 'column-and-block-layout-editor-path/models/converters/block-converter'], function(_, Backbone, constants, percentageUtils, Column, BlockConverter) {
  var Columns, MAX_COLUMNS;
  MAX_COLUMNS = 2;
  return Columns = (function(superClass) {
    extend(Columns, superClass);

    function Columns() {
      return Columns.__super__.constructor.apply(this, arguments);
    }

    Columns.prototype.model = Column;

    Columns.prototype.initialize = function(models, opts) {
      this.opts = opts;
      this.layout = this.opts.layout;
      this.contentEditorStateMap = this.opts.contentEditorStateMap;
      return this.on('remove', this._checkIfColumnsShouldBeEventlySplit, this);
    };

    Columns.prototype.toState = function() {
      return this.invoke('toState');
    };

    Columns.prototype.getNumBlocks = function() {
      return this.reduce((function(sum, column) {
        return sum + column.getBlocksCollection().length;
      }), 0);
    };

    Columns.prototype.setColumns = function(columns, options) {
      return this.set(columns, _.extend(this.opts, options));
    };

    Columns.prototype.resizeColumns = function() {
      var setWidths, sumOfWidths, widths;
      widths = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      setWidths = this.pluck('columnWidth');
      if (_(widths).isEqual(setWidths)) {
        return;
      }
      if (widths.length !== this.length) {
        throw new Error('Must specify the width of each column');
      }
      sumOfWidths = widths.reduce(function(prev, current) {
        return prev + current;
      });
      if (sumOfWidths !== 1) {
        throw new Error('Widths must add up to 1.00 (100%)');
      }
      this.each(function(model, index) {
        return model.set({
          columnWidth: widths[index]
        });
      });
      this.opts.eventEmitter.trigger(constants.EVENTS.LAYOUT_CHANGED);
      return this.opts.eventEmitter.trigger(constants.EVENTS.STATE_UPDATED);
    };

    Columns.prototype.evenlySplitColumns = function() {
      var roundedWidths;
      roundedWidths = percentageUtils.evenlySplit(this.length);
      return this.each(function(column, index) {
        return column.set({
          columnWidth: roundedWidths[index]
        });
      });
    };

    Columns.prototype.applyDeltaToColumnWidth = function(model, delta) {
      var columnWidthIsAtMaxOrMin, index, resizedWidths;
      if (this.length === 1) {
        throw new Error('Cannot change column width in single column layouts');
      }
      index = this.indexOf(model);
      resizedWidths = percentageUtils.adjustValues({
        arrayOfDecimals: this.pluck('columnWidth'),
        addTo: index,
        subtractFrom: index + 1,
        delta: delta
      });
      columnWidthIsAtMaxOrMin = resizedWidths.every(function(width) {
        return width > constants.COLUMN_WIDTH.MAX_DECIMAL || width < constants.COLUMN_WIDTH.MIN_DECIMAL;
      });
      if (!columnWidthIsAtMaxOrMin) {
        return this.resizeColumns.apply(this, resizedWidths);
      }
    };

    Columns.prototype.resizeColumnFromHandle = function(decimal) {
      var deltaDecimal, newColumnWidths;
      if (this.length === 1) {
        throw new Error('Cannot change column width in single column layouts');
      }
      deltaDecimal = percentageUtils.remainingDecimal([decimal]);
      newColumnWidths = [deltaDecimal, decimal];
      return this.resizeColumns.apply(this, newColumnWidths);
    };

    Columns.prototype.createChildContent = function(name, contentJSON) {
      var block, column, content;
      column = this.find(function(column) {
        return column.hasBlock(name);
      });
      block = column.blocks.get(name);
      content = block.contents.find(function(content) {
        return content.get('name') === name;
      });
      return content != null ? content.createChild(contentJSON) : void 0;
    };

    Columns.prototype.getContents = function() {
      return _.flatten(this.invoke('getContents'));
    };

    Columns.prototype.getContentEditors = function() {
      return _.flatten(this.invoke('getContentEditors'));
    };

    Columns.prototype.getLayoutInstanceId = function() {
      return this.layout.instanceId;
    };

    Columns.prototype.findContentModelByName = function(name) {
      var content, contents;
      contents = this.getContents();
      content = _.find(contents, function(content) {
        return content.getName() === name;
      });
      return content || (function() {
        throw new Error("Could not find content model: " + name);
      })();
    };

    Columns.prototype.atMaxColumns = function() {
      return this.length >= MAX_COLUMNS;
    };

    Columns.prototype.reorderBlock = function(columnIdx, position, contentType, content) {
      var blockJSON, createdState, toColumn;
      toColumn = this.at(columnIdx);
      createdState = this.contentEditorStateMap.createState(content, contentType);
      blockJSON = BlockConverter.convert(createdState, contentType);
      toColumn.addBlock(position, blockJSON);
      return this.layout.removeContent(content.id);
    };

    Columns.prototype._checkIfColumnsShouldBeEventlySplit = function(model, collection, options) {
      if (options.evenlySplit) {
        return this.evenlySplitColumns();
      }
    };

    Columns.prototype.getLayoutReadyPromise = function() {
      return this.layout.getReadyPromise();
    };

    return Columns;

  })(Backbone.Collection);
});
