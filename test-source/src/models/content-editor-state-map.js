// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'galileo-lib/modules/services/descriptors/block/block-descriptor', 'utils', 'column-and-block-layout-editor-path/constants'], function(_, Backbone, BlockDescriptor, utils, constants) {
  var ContentEditorStateMap;
  return ContentEditorStateMap = (function(superClass) {
    extend(ContentEditorStateMap, superClass);

    function ContentEditorStateMap() {
      return ContentEditorStateMap.__super__.constructor.apply(this, arguments);
    }

    ContentEditorStateMap.prototype.getContents = function() {
      return _(this.attributes).clone();
    };

    ContentEditorStateMap.prototype.setContents = function(contents) {
      return this.set(_(contents).omit(this.keys()));
    };

    ContentEditorStateMap.prototype._createStateFromBlockDescriptor = function(blockDescriptor) {
      var contents, newBlockDescriptor;
      contents = blockDescriptor.payload.contents.map(this._createStateFromContentEditorState, this);
      newBlockDescriptor = new BlockDescriptor(_.extend(blockDescriptor.toJSON(), {
        id: contents[0].name,
        payload: {
          contents: contents
        }
      }));
      return newBlockDescriptor;
    };

    ContentEditorStateMap.prototype._createStateFromContentEditorState = function(ceState) {
      while (this.has(ceState.name)) {
        ceState = this._randomizeContentEditorStateName(ceState);
      }
      this.set(ceState.name, ceState);
      if (ceState.child) {
        ceState.child = this._createStateFromContentEditorState(ceState.child);
      }
      return ceState;
    };

    ContentEditorStateMap.prototype.createState = function(state, contentType) {
      if (contentType === constants.TYPES.BLOCK) {
        return this._createStateFromBlockDescriptor(state);
      } else {
        return this._createStateFromContentEditorState(state);
      }
    };

    ContentEditorStateMap.prototype._randomizeContentEditorStateName = function(content) {
      var prefix, randomizedContent;
      randomizedContent = _(content).clone();
      prefix = utils.instanceId.stripTimestamp(randomizedContent.name);
      randomizedContent.name = utils.instanceId.next(prefix);
      return randomizedContent;
    };

    ContentEditorStateMap.prototype.refresh = function(contentEditors) {
      var deferredStates;
      deferredStates = _(contentEditors).map(function(editor) {
        var onStateReady, state;
        state = editor.getState();
        onStateReady = function(editor, state) {
          return {
            name: editor._getName(),
            state: state
          };
        };
        return $.when(state).then(onStateReady.bind(this, editor));
      });
      return $.when.apply(this, deferredStates).then((function(_this) {
        return function() {
          var i, len, result;
          for (i = 0, len = arguments.length; i < len; i++) {
            result = arguments[i];
            _this.set(result.name, result);
          }
          return void 0;
        };
      })(this));
    };

    return ContentEditorStateMap;

  })(Backbone.Model);
});
