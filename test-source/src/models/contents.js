// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/models/content', 'column-and-block-layout-editor-path/constants'], function(_, Backbone, Content, constants) {
  var Contents;
  return Contents = (function(superClass) {
    extend(Contents, superClass);

    function Contents() {
      return Contents.__super__.constructor.apply(this, arguments);
    }

    Contents.prototype.model = Content;

    Contents.prototype.getContents = function() {
      return _.flatten(this.invoke('getContent'));
    };

    Contents.prototype.toState = function() {
      return this.invoke('toState');
    };

    Contents.prototype.getEditors = function() {
      return _.chain(this.invoke('getEditors')).flatten().compact().value();
    };

    Contents.prototype.deactivate = function() {
      return this.invoke('deactivate');
    };

    Contents.prototype.getWidthPx = function() {
      return this.block.getWidthPx();
    };

    Contents.prototype.hasContentLeft = function() {
      return this.block.hasContentLeft();
    };

    Contents.prototype.hasContentRight = function() {
      return this.block.hasContentRight();
    };

    Contents.prototype.initialize = function(models, opts) {
      this.block = opts.block;
      return this.listenTo(this, 'remove', this._onRemove);
    };

    Contents.prototype._onRemove = function(content, collection, options) {
      return content.deactivate(options);
    };

    return Contents;

  })(Backbone.Collection);
});
