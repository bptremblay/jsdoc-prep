// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/drag-drop/column'], function(_, Backbone, DragDropColumn) {
  var DragDropColumns;
  return DragDropColumns = (function(superClass) {
    extend(DragDropColumns, superClass);

    function DragDropColumns() {
      this._buildColumn = bind(this._buildColumn, this);
      return DragDropColumns.__super__.constructor.apply(this, arguments);
    }

    DragDropColumns.prototype.model = DragDropColumn;

    DragDropColumns.prototype.initialize = function(rawColumns, options) {
      this.layout = options.layout;
      return _(rawColumns).each(this._buildColumn);
    };

    DragDropColumns.prototype.isMultiColumn = function() {
      return this.length > 1;
    };

    DragDropColumns.prototype.atMaxColumns = function() {
      return this.layout.atMaxColumns();
    };

    DragDropColumns.prototype.isMove = function() {
      return this.layout.isMove();
    };

    DragDropColumns.prototype.isReorder = function() {
      return this.layout.isReorder();
    };

    DragDropColumns.prototype.isReorderColumn = function() {
      return this.layout.isReorderColumn();
    };

    DragDropColumns.prototype.sourceIsChild = function() {
      return this.layout.sourceIsChild();
    };

    DragDropColumns.prototype.getSourceColumnIndex = function() {
      return this.layout.getSourceColumnIndex();
    };

    DragDropColumns.prototype.getSourceBlockIndex = function() {
      return this.layout.getSourceBlockIndex();
    };

    DragDropColumns.prototype._buildColumn = function(column, idx, columns) {
      var previous, ref;
      previous = ((ref = columns[idx - 1]) != null ? ref.upperX : void 0) || 0;
      column.id = idx;
      column.height = this.layout.getHeight();
      column.width = this.layout.getWidth() * column.widthPct;
      column.upperX = previous + this.layout.getWidth() * column.widthPct;
      return column.lowerX = previous;
    };

    DragDropColumns.prototype.getColumn = function(x) {
      return this.find(function(column) {
        return x >= column.get('lowerX') && x <= column.get('upperX');
      });
    };

    return DragDropColumns;

  })(Backbone.Collection);
});
