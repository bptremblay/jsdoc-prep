// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['backbone', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/drag-drop/helpers', 'column-and-block-layout-editor-path/drag-drop/blocks'], function(Backbone, constants, helpers, DragDropBlocks) {
  var DragDropColumn;
  return DragDropColumn = (function(superClass) {
    extend(DragDropColumn, superClass);

    function DragDropColumn() {
      return DragDropColumn.__super__.constructor.apply(this, arguments);
    }

    DragDropColumn.prototype.ACTIONS = constants.DRAG_DROP.ACTIONS;

    DragDropColumn.prototype.DIRECTIONS = constants.DRAG_DROP.DIRECTIONS;

    DragDropColumn.prototype.SETTINGS = constants.DRAG_DROP.SETTINGS;

    DragDropColumn.prototype.defaults = {
      id: null,
      widthPct: null,
      width: null,
      height: null,
      lowerX: null,
      upperX: null
    };

    DragDropColumn.prototype.initialize = function(attributes, options) {
      this.blocks = new DragDropBlocks(attributes.blocks, {
        column: this,
        columnWidth: this.get('width')
      });
      return this.set({
        blocks: null
      });
    };

    DragDropColumn.prototype.getSourceColumnIndex = function() {
      return this.collection.getSourceColumnIndex();
    };

    DragDropColumn.prototype.getSourceBlockIndex = function() {
      return this.collection.getSourceBlockIndex();
    };

    DragDropColumn.prototype.isMove = function() {
      return this.collection.isMove();
    };

    DragDropColumn.prototype.isReorder = function() {
      return this.collection.isReorder();
    };

    DragDropColumn.prototype.sourceIsChild = function() {
      return this.collection.sourceIsChild();
    };

    DragDropColumn.prototype.getAction = function(x, y) {
      var shouldStack;
      shouldStack = helpers.within(this.getColX(x), this.get('width'), this._getXOffset(x));
      if (this.isStackable() && shouldStack) {
        return this._getBlockAction(x, y);
      } else {
        return this._getColumnAction(x);
      }
    };

    DragDropColumn.prototype.getColX = function(layoutXCoordinate) {
      return layoutXCoordinate - this.get('lowerX');
    };

    DragDropColumn.prototype.isStackable = function() {
      return this.collection.isMultiColumn() || this.blocks.length > 1;
    };

    DragDropColumn.prototype._getColumnIndexForX = function(x) {
      var indexModifier;
      indexModifier = Math.max(this._getColumnIndexModifierForX(x), 0);
      return this.id + indexModifier;
    };

    DragDropColumn.prototype._getColumnIndexModifierForX = function(x) {
      var direction;
      direction = this._getDirection(x);
      switch (false) {
        case !(direction === this.DIRECTIONS.LEFT && this._willChangeLayout()):
          return -1;
        case !(direction === this.DIRECTIONS.RIGHT && this._willChangeLayout()):
          return 1;
        default:
          return 0;
      }
    };

    DragDropColumn.prototype._sourceContentInDifferentLayoutPosition = function() {
      var differentColumn, oneColumnManyBlocks;
      differentColumn = this.getSourceColumnIndex() !== this.id;
      oneColumnManyBlocks = this.collection.length === 1 && this.blocks.length > 1;
      return differentColumn || oneColumnManyBlocks || this.collection.sourceIsChild();
    };

    DragDropColumn.prototype._willChangeLayout = function() {
      return !this.collection.isReorder() || this._sourceContentInDifferentLayoutPosition();
    };

    DragDropColumn.prototype._sourceColumnIsDestinationColumn = function(x) {
      return this.id + this._getColumnIndexModifierForX(x) === this.getSourceColumnIndex();
    };

    DragDropColumn.prototype._columnIsReorderable = function(x) {
      return this.collection.isReorderColumn() && !this._sourceColumnIsDestinationColumn(x);
    };

    DragDropColumn.prototype._shouldReorderColumn = function(x) {
      return this.collection.isReorder() && !this._sourceColumnIsDestinationColumn(x);
    };

    DragDropColumn.prototype._shouldDoNothing = function(x) {
      return this.collection.isReorder() && this._sourceColumnIsDestinationColumn(x);
    };

    DragDropColumn.prototype._getXOffset = function(x) {
      if (this._columnIsReorderable(x) || !this.collection.atMaxColumns()) {
        return this.SETTINGS.STACKING_PASSTHROUGH_PCT;
      } else {
        return 0;
      }
    };

    DragDropColumn.prototype._getBlockAction = function(x, y) {
      var block;
      block = this.blocks.getStackableBlock(y);
      return block.getAction(x, y);
    };

    DragDropColumn.prototype._getColumnAction = function(x) {
      return {
        action: this._getActionIdentifier(x),
        columnId: this._getColumnIndexForX(x),
        markerColumnId: this.id,
        markerDirection: this._getDirection(x)
      };
    };

    DragDropColumn.prototype._getDirection = function(x) {
      if (this.getColX(x) < this.get('width') / 2) {
        return this.DIRECTIONS.LEFT;
      } else {
        return this.DIRECTIONS.RIGHT;
      }
    };

    DragDropColumn.prototype._getActionIdentifier = function(x) {
      switch (false) {
        case !this._shouldDoNothing(x):
          return this.ACTIONS.NULL;
        case !this._shouldReorderColumn(x):
          return this.ACTIONS.REORDER_COLUMN;
        case !this.isMove():
          return this.ACTIONS.MOVE_COLUMN;
        default:
          return this.ACTIONS.INSERT_COLUMN;
      }
    };

    return DragDropColumn;

  })(Backbone.Model);
});
