// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['column-and-block-layout-editor-path/constants', 'backbone'], function(constants, Backbone) {
  var DragDropBlock;
  return DragDropBlock = (function(superClass) {
    extend(DragDropBlock, superClass);

    function DragDropBlock() {
      return DragDropBlock.__super__.constructor.apply(this, arguments);
    }

    DragDropBlock.prototype.ACTIONS = constants.DRAG_DROP.ACTIONS;

    DragDropBlock.prototype.DIRECTIONS = constants.DRAG_DROP.DIRECTIONS;

    DragDropBlock.prototype.SETTINGS = constants.DRAG_DROP.SETTINGS;

    DragDropBlock.prototype.defaults = {
      id: null,
      height: null,
      width: null,
      lowerY: null,
      upperY: null
    };

    DragDropBlock.prototype.isMove = function() {
      return this.collection.isMove();
    };

    DragDropBlock.prototype.isReorder = function() {
      return this.collection.isReorder();
    };

    DragDropBlock.prototype.getSourceColumnIndex = function() {
      return this.collection.getSourceColumnIndex();
    };

    DragDropBlock.prototype.getSourceBlockIndex = function() {
      return this.collection.getSourceBlockIndex();
    };

    DragDropBlock.prototype.getAction = function(x, y) {
      return {
        action: this._getActionIdentifier(y),
        columnId: this.collection.getColumnId(),
        blockId: this._getBlockIndexForY(y),
        markerColumnId: this.collection.getColumnId(),
        markerBlockId: this.id,
        markerDirection: this._getDirection(y)
      };
    };

    DragDropBlock.prototype._getBlockIndexForY = function(y) {
      var indexModifier;
      indexModifier = Math.max(this._getBlockIndexModifierForY(y), 0);
      return this.id + indexModifier;
    };

    DragDropBlock.prototype._getBlockIndexModifierForY = function(y) {
      var direction;
      direction = this._getDirection(y);
      switch (false) {
        case !(direction === this.DIRECTIONS.ABOVE && this._willChangeLayout()):
          return -1;
        case !(direction === this.DIRECTIONS.BELOW && this._willChangeLayout()):
          return 1;
        default:
          return 0;
      }
    };

    DragDropBlock.prototype._sourceContentInDifferentLayoutPosition = function() {
      var differentBlock, differentColumn;
      differentColumn = this.getSourceColumnIndex() !== this.collection.getColumnId();
      differentBlock = this.getSourceBlockIndex() !== this.id;
      return differentColumn || differentBlock || this.collection.sourceIsChild();
    };

    DragDropBlock.prototype._willChangeLayout = function() {
      return !this.isReorder() || this._sourceContentInDifferentLayoutPosition();
    };

    DragDropBlock.prototype._getDirection = function(y) {
      var colY;
      colY = y - this.get('lowerY');
      if (colY < this.get('height') / 2) {
        return this.DIRECTIONS.ABOVE;
      } else {
        return this.DIRECTIONS.BELOW;
      }
    };

    DragDropBlock.prototype._getActionIdentifier = function(y) {
      switch (false) {
        case !this._shouldDoNothing(y):
          return this.ACTIONS.NULL;
        case !this.isReorder():
          return this.ACTIONS.REORDER_BLOCK;
        case !this.isMove():
          return this.ACTIONS.MOVE_BLOCK;
        default:
          return this.ACTIONS.INSERT_BLOCK;
      }
    };

    DragDropBlock.prototype._shouldDoNothing = function(y) {
      var sameBlock, sameColumn;
      sameColumn = this.getSourceColumnIndex() === this.collection.getColumnId();
      sameBlock = this._sourceBlockIsDestinationBlock(y);
      return this.collection.isReorder() && sameColumn && sameBlock;
    };

    DragDropBlock.prototype._sourceBlockIsDestinationBlock = function(y) {
      return this.id + this._getBlockIndexModifierForY(y) === this.getSourceBlockIndex();
    };

    return DragDropBlock;

  })(Backbone.Model);
});
