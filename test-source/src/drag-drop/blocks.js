// Generated by CoffeeScript 1.10.0
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/drag-drop/block'], function(_, Backbone, DragDropBlock) {
  var DragDropBlocks;
  return DragDropBlocks = (function(superClass) {
    extend(DragDropBlocks, superClass);

    function DragDropBlocks() {
      this._buildBlock = bind(this._buildBlock, this);
      return DragDropBlocks.__super__.constructor.apply(this, arguments);
    }

    DragDropBlocks.prototype.model = DragDropBlock;

    DragDropBlocks.prototype.initialize = function(rawBlocks, options) {
      this.column = options.column;
      this.columnWidth = options.columnWidth;
      return _(rawBlocks).each(this._buildBlock);
    };

    DragDropBlocks.prototype.isMove = function() {
      return this.column.isMove();
    };

    DragDropBlocks.prototype.isReorder = function() {
      return this.column.isReorder();
    };

    DragDropBlocks.prototype.getSourceColumnIndex = function() {
      return this.column.getSourceColumnIndex();
    };

    DragDropBlocks.prototype.getSourceBlockIndex = function() {
      return this.column.getSourceBlockIndex();
    };

    DragDropBlocks.prototype.sourceIsChild = function() {
      return this.column.sourceIsChild();
    };

    DragDropBlocks.prototype.getStackableBlock = function(y) {
      return this.getBlock(y) || this.last();
    };

    DragDropBlocks.prototype.getBlock = function(y) {
      return this.find(function(block) {
        return y >= block.get('lowerY') && y <= block.get('upperY');
      });
    };

    DragDropBlocks.prototype.getColumnId = function() {
      return this.column.id;
    };

    DragDropBlocks.prototype._buildBlock = function(block, idx, blocks) {
      var previous, ref;
      previous = ((ref = blocks[idx - 1]) != null ? ref.upperY : void 0) || 0;
      block.id = idx;
      block.width = this.columnWidth;
      block.upperY = previous + block.height;
      return block.lowerY = previous;
    };

    return DragDropBlocks;

  })(Backbone.Collection);
});
