// Generated by CoffeeScript 1.10.0
define(['galileo-lib/modules/events', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/drag-drop/helpers', 'column-and-block-layout-editor-path/drag-drop/layout', 'column-and-block-layout-editor-path/drag-drop/insert-marker', 'column-and-block-layout-editor-path/drag-drop/block-model-dispatcher'], function(galileoEvents, constants, helpers, DragDropLayout, InsertionMarker, BlockModelDispatcher) {
  var DragDropApi;
  return DragDropApi = (function() {
    function DragDropApi(layoutEditor, model, view) {
      this.layoutEditor = layoutEditor;
      this.model = model;
      this.view = view;
      this.DragDropLayout = DragDropLayout;
      this.InsertionMarker = InsertionMarker;
      this.BlockModelDispatcher = BlockModelDispatcher;
    }

    DragDropApi.prototype.init = function() {
      this.insertionMarker = new this.InsertionMarker(this.view);
      this.blockModelDispatcher = new this.BlockModelDispatcher(this.layoutEditor);
      return this._initEvents();
    };

    DragDropApi.prototype.acceptsContent = function(content, type, uiEvent) {
      if (type === constants.TYPES.LAYOUT) {
        return false;
      }
      return this._actionableEvent(uiEvent);
    };

    DragDropApi.prototype._initEvents = function() {
      this.layoutEditor.on('drag-drop:dragenter', this._onDragenter, this);
      this.layoutEditor.on('drag-drop:dragover', this._onDragover, this);
      this.layoutEditor.on('drag-drop:dragleave', this._onDragleave, this);
      return this.layoutEditor.on('drag-drop:drop', this._onDrop, this);
    };

    DragDropApi.prototype._onDragenter = function(content, type, uiEvent) {
      return this.dragDropLayout = new this.DragDropLayout(this.view.getDimensions(), {
        type: type,
        content: content,
        instanceId: this.layoutEditor._getInstanceId(),
        atMaxColumns: this.model.atMaxColumns()
      });
    };

    DragDropApi.prototype._onDragover = function(content, type, uiEvent) {
      var dropAction;
      dropAction = this._getAction(uiEvent);
      return this.insertionMarker.showMarker(dropAction);
    };

    DragDropApi.prototype._onDrop = function(content, type, uiEvent) {
      var dropAction;
      this.insertionMarker.removeAll();
      dropAction = this._getAction(uiEvent);
      return this.blockModelDispatcher.dispatch(content, type, dropAction);
    };

    DragDropApi.prototype._onDragleave = function(content, type, uiEvent) {
      return this.insertionMarker.removeAll();
    };

    DragDropApi.prototype._getAction = function(uiEvent) {
      var x, y;
      y = helpers.getRelativeY(uiEvent, this.view.$el.offset().top);
      x = helpers.getRelativeX(uiEvent, this.view.$el.offset().left);
      return this.dragDropLayout.getAction(x, y);
    };

    DragDropApi.prototype._actionableEvent = function(uiEvent) {
      var height, offset, width;
      width = this.view.$el.outerWidth();
      height = this.view.$el.outerHeight();
      offset = this.view.$el.offset();
      return helpers.actionableEvent(uiEvent, width, height, offset);
    };

    return DragDropApi;

  })();
});
