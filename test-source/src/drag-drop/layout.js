// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['underscore', 'backbone', 'column-and-block-layout-editor-path/constants', 'column-and-block-layout-editor-path/drag-drop/columns'], function(_, Backbone, constants, DragDropColumns) {
  var DragDropLayout;
  return DragDropLayout = (function(superClass) {
    extend(DragDropLayout, superClass);

    function DragDropLayout() {
      return DragDropLayout.__super__.constructor.apply(this, arguments);
    }

    DragDropLayout.prototype.initialize = function(attributes, options) {
      this.instanceId = options.instanceId;
      this.type = options.type;
      this.content = options.content;
      this.maxColumns = options.atMaxColumns;
      this.columns = new DragDropColumns(attributes.columns, {
        layout: this
      });
      return this.set({
        columns: null
      });
    };

    DragDropLayout.prototype.isMove = function() {
      return this.type === constants.TYPES.BLOCK;
    };

    DragDropLayout.prototype.isReorder = function() {
      return this.isMove() && this.sourceIsDestination() && !this.sourceIsChild();
    };

    DragDropLayout.prototype.isReorderColumn = function() {
      return this.isReorder() && this.sourceIsMovableColumn();
    };

    DragDropLayout.prototype.sourceIsMovableColumn = function() {
      return this.columns.at(this.content.sourceColumnIndex).blocks.length === 1;
    };

    DragDropLayout.prototype.sourceIsDestination = function() {
      return this.content.sourceLayoutInstanceId === this.instanceId;
    };

    DragDropLayout.prototype.sourceIsChild = function() {
      return this.content.sourceIsChildContent;
    };

    DragDropLayout.prototype.getSourceColumnIndex = function() {
      return this.content.sourceColumnIndex;
    };

    DragDropLayout.prototype.getSourceBlockIndex = function() {
      return this.content.sourceBlockIndex;
    };

    DragDropLayout.prototype.atMaxColumns = function() {
      return !!this.maxColumns;
    };

    DragDropLayout.prototype.getWidth = function() {
      return this.get('width');
    };

    DragDropLayout.prototype.getHeight = function() {
      return this.get('height');
    };

    DragDropLayout.prototype.getAction = function(x, y) {
      var column;
      column = this.columns.getColumn(x);
      return column.getAction(x, y);
    };

    return DragDropLayout;

  })(Backbone.Model);
});
