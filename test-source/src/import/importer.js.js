// Generated by CoffeeScript 1.10.0
define(['underscore', 'jquery', 'column-and-block-layout-editor-path/models/column', 'column-and-block-layout-editor-path/import/parser'], function(_, $, Column, Parser) {
  var Importer;
  Importer = (function() {
    function Importer() {}

    Importer.prototype._getBlocks = function($el) {
      return $el.find('[data-editor-type]').map(function(idx, el) {
        $el = $(el);
        return {
          $el: $el,
          type: $el.data('editor-type'),
          name: $el.data('editor-name')
        };
      }).get();
    };

    Importer.prototype._buildContentStates = function(contentStates, contentEditorResolvers) {
      var contentState, contents, editorDeferred, i, j, len;
      contents = {};
      for (i = j = 0, len = contentStates.length; j < len; i = ++j) {
        contentState = contentStates[i];
        editorDeferred = contentEditorResolvers[i];
        contents[editorDeferred.editorName] = {
          name: editorDeferred.editorName,
          state: contentState
        };
      }
      return contents;
    };

    Importer.prototype._getContentEditorResolvers = function($container, contentEditors) {
      return _.map(this._getBlocks($container), function(block) {
        var ContentEditor, editorDeferred;
        ContentEditor = contentEditors[block.type];
        if (!ContentEditor) {
          throw new Error("No content editor found for type " + block.type);
        }
        editorDeferred = ContentEditor["import"](block.$el.prop('outerHTML'));
        editorDeferred.editorName = block.name;
        editorDeferred.editorType = block.type;
        return editorDeferred;
      });
    };

    Importer.prototype["import"] = function(markup, contentEditors, actualCreate) {
      var $markup, contentEditorResolvers, deferredImport, layout, markupParser;
      $markup = $(markup);
      markupParser = new Parser($markup, actualCreate);
      layout = {
        state: markupParser.toState(),
        contents: {}
      };
      deferredImport = $.Deferred();
      contentEditorResolvers = this._getContentEditorResolvers($markup, contentEditors);
      $.when.apply(this, contentEditorResolvers).done((function(_this) {
        return function() {
          layout.contents = _this._buildContentStates(arguments, contentEditorResolvers);
          return deferredImport.resolve(layout);
        };
      })(this)).fail(function() {
        return deferredImport.reject();
      });
      return deferredImport.promise();
    };

    return Importer;

  })();
  return new Importer();
});
