{
  "results": {
    "amdProc": {
      "requires": [
        "jquery",
        "backbone",
        "underscore"
      ],
      "moduleName": "parse_doclet",
      "AMD": false,
      "webPath": "/ours"
    }
  },
  "errors": {
    "badCharactersProc": [
      {
        "id": "(error)",
        "raw": "Bad character(s) found.",
        "code": "wfBC",
        "evidence": "",
        "line": -1,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "Bad character(s) found: ''\\t''."
      }
    ],
    "jsBeautifyProc": [],
    "jsDoccerProc": [
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'printDoclet'.",
        "code": "wfJD",
        "evidence": "function printDoclet(docletData, defineModuleInTopOfFile) {",
        "line": 372,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'printDoclet'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'getLines'.",
        "code": "wfJD",
        "evidence": "function getLines(lines, x, y) {",
        "line": 714,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'getLines'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'getNextLineOfCode'.",
        "code": "wfJD",
        "evidence": "function getNextLineOfCode(lines, x) {",
        "line": 723,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'getNextLineOfCode'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'getRequiresTags'.",
        "code": "wfJD",
        "evidence": "function getRequiresTags(input) {",
        "line": 756,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'getRequiresTags'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'getType'.",
        "code": "wfJD",
        "evidence": "function getType(input) {",
        "line": 791,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'getType'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fixWords'.",
        "code": "wfJD",
        "evidence": "function fixWords(input) {",
        "line": 807,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fixWords'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'replaceWord'.",
        "code": "wfJD",
        "evidence": "function replaceWord(text, whichWord, withWhat) {",
        "line": 821,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'replaceWord'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fixReturnText'.",
        "code": "wfJD",
        "evidence": "function fixReturnText(input, docletData) {",
        "line": 828,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fixReturnText'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fixTypes'.",
        "code": "wfJD",
        "evidence": "function fixTypes(input, dontCuddle) {",
        "line": 866,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fixTypes'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'parseDoclet'.",
        "code": "wfJD",
        "evidence": "function parseDoclet(input, doclet, defineModuleInTopOfFile, nextLineOfCode,",
        "line": 897,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'parseDoclet'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'walk'.",
        "code": "wfJD",
        "evidence": "function walk(node, attr, val, results) {",
        "line": 1237,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'walk'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'getNodesByType'.",
        "code": "wfJD",
        "evidence": "function getNodesByType(ast, nodeType) {",
        "line": 1305,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'getNodesByType'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fixDoclets'.",
        "code": "wfJD",
        "evidence": "function fixDoclets(walkerObj) {",
        "line": 1352,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fixDoclets'."
      }
    ],
    "jsDoc3PrepProc": [],
    "fixJSDocFormattingProc": []
  },
  "outputDirectory": "test-output",
  "path": "test-source/ours/parseDoclet.js",
  "folderPath": "test-source/ours",
  "fileName": "parseDoclet.js",
  "packagePath": "/ours",
  "webPath": "/ours",
  "libFile": false,
  "min": false,
  "realName": "parse_doclet",
  "name": "parse_doclet",
  "camelName": "ParseDoclet",
  "processedFilePath": "test-output/ours/parseDoclet.js",
  "couldParseOriginalSource": true,
  "jsDoccerProcData": {
    "lines": 1596,
    "requires": [],
    "className": "ParseDoclet",
    "packagePath": "",
    "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-output/ours",
    "uses_Y": false,
    "no_lib": false,
    "inferencedClassName": "ParseDoclet",
    "uses_$": true,
    "chars": 41523,
    "uses_YUI": false,
    "fields": [],
    "moduleName": "parseDoclet",
    "uses_console_log": true,
    "uses_backbone": true,
    "classes": {},
    "methods": [
      {
        "name": "readFile",
        "visibility": "public",
        "static": false,
        "lineNumber": 11,
        "params": " * @param  filePathName ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "readFile",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Read file.\n *",
          "method": {
            "name": "readFile",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "filePathName"
        ],
        "description": " * Read file.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function readFile(filePathName) {"
      },
      {
        "name": "decamelize",
        "visibility": "public",
        "static": false,
        "lineNumber": 36,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "decamelize",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Decamelize.\n *\n *            input",
          "method": {
            "name": "decamelize",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Decamelize.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function decamelize(input) {"
      },
      {
        "name": "getModuleName",
        "visibility": "public",
        "static": false,
        "lineNumber": 96,
        "params": " * @param  filePathName ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "getModuleName",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "return": {
            "type": "{Object}",
            "description": "",
            "attribute": "return"
          },
          "description": " * Get module name.\n *",
          "method": {
            "name": "getModuleName",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "filePathName"
        ],
        "returns": " {Object} ",
        "description": " * Get module name.\n *",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getModuleName(filePathName) {"
      },
      {
        "name": "capitalize",
        "visibility": "public",
        "static": false,
        "lineNumber": 118,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "capitalize",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Capitalize.\n *\n *            input",
          "method": {
            "name": "capitalize",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Capitalize.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function capitalize(input) {"
      },
      {
        "name": "trim",
        "visibility": "public",
        "static": false,
        "lineNumber": 139,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "trim",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Trim.\n *\n *            input",
          "method": {
            "name": "trim",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Trim.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function trim(input) {"
      },
      {
        "name": "trimRight",
        "visibility": "public",
        "static": false,
        "lineNumber": 151,
        "params": " * @param  s ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "trimRight",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Trim right.\n *",
          "method": {
            "name": "trimRight",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "s"
        ],
        "description": " * Trim right.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function trimRight(s) {"
      },
      {
        "name": "camelize",
        "visibility": "public",
        "static": false,
        "lineNumber": 163,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "camelize",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Camelize.\n *\n *            input",
          "method": {
            "name": "camelize",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Camelize.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function camelize(input) {"
      },
      {
        "name": "camelizeVariable",
        "visibility": "public",
        "static": false,
        "lineNumber": 192,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "camelizeVariable",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Camelize variable.\n *\n *            input",
          "method": {
            "name": "camelizeVariable",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Camelize variable.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function camelizeVariable(input) {"
      },
      {
        "name": "isUpperCase",
        "visibility": "public",
        "static": false,
        "lineNumber": 226,
        "params": " * @param  aCharacter ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "isUpperCase",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "return": {
            "type": "{Object}",
            "description": "",
            "attribute": "return"
          },
          "description": " * Is upper case.\n *",
          "method": {
            "name": "isUpperCase",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "aCharacter"
        ],
        "returns": "{Boolean}",
        "description": " * Is upper case.\n *",
        "return": "{boolean}",
        "classDeclarationFlag": false,
        "line": "function isUpperCase(aCharacter) {"
      },
      {
        "name": "normalizeName",
        "visibility": "public",
        "static": false,
        "lineNumber": 238,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "normalizeName",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Normalize name.\n *\n *            input",
          "method": {
            "name": "normalizeName",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Normalize name.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function normalizeName(input) {"
      },
      {
        "name": "safeCreateFileDir",
        "visibility": "public",
        "static": false,
        "lineNumber": 249,
        "params": " * @param  path ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "safeCreateFileDir",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Safe create file dir.\n *",
          "method": {
            "name": "safeCreateFileDir",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "path"
        ],
        "description": " * Safe create file dir.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function safeCreateFileDir(path) {"
      },
      {
        "name": "safeCreateDir",
        "visibility": "public",
        "static": false,
        "lineNumber": 268,
        "params": " * @param  dir ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "safeCreateDir",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Safe create dir.\n *",
          "method": {
            "name": "safeCreateDir",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "dir"
        ],
        "description": " * Safe create dir.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function safeCreateDir(dir) {"
      },
      {
        "name": "stripCComments",
        "visibility": "public",
        "static": false,
        "lineNumber": 287,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "stripCComments",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Strip 'C'-style comments.\n *\n *            input",
          "method": {
            "name": "stripCComments",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Strip 'C'-style comments.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function stripCComments(input) {"
      },
      {
        "name": "stripOneLineComments",
        "visibility": "public",
        "static": false,
        "lineNumber": 316,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "stripOneLineComments",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Strip one line comments.\n *\n *            input",
          "method": {
            "name": "stripOneLineComments",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "input"
        ],
        "description": " * Strip one line comments.\n *\n *            input",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function stripOneLineComments(input) {"
      },
      {
        "name": "safeCreateFileDir",
        "visibility": "public",
        "static": false,
        "lineNumber": 335,
        "params": " * @param  path ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "safeCreateFileDir",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Safe create file dir.\n *",
          "method": {
            "name": "safeCreateFileDir",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "path"
        ],
        "description": " * Safe create file dir.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function safeCreateFileDir(path) {"
      },
      {
        "name": "safeCreateDir",
        "visibility": "public",
        "static": false,
        "lineNumber": 351,
        "params": " * @param  dir ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "safeCreateDir",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Safe create dir.\n *",
          "method": {
            "name": "safeCreateDir",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "dir"
        ],
        "description": " * Safe create dir.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function safeCreateDir(dir) {"
      },
      {
        "name": "writeFile",
        "visibility": "public",
        "static": false,
        "lineNumber": 366,
        "params": " * @param  filePathName \n * @param  source ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "writeFile",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": " * Write file.\n *",
          "method": {
            "name": "writeFile",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "filePathName",
          "source"
        ],
        "description": " * Write file.\n *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function writeFile(filePathName, source) {"
      },
      {
        "name": "printDoclet",
        "visibility": "public",
        "static": false,
        "lineNumber": 372,
        "params": " * @param docletData\n * @param defineModuleInTopOfFile",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "docletData",
          "defineModuleInTopOfFile"
        ],
        "description": " * Print doclet.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function printDoclet(docletData, defineModuleInTopOfFile) {"
      },
      {
        "name": "getLines",
        "visibility": "public",
        "static": false,
        "lineNumber": 714,
        "params": " * @param lines\n * @param x\n * @param y",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "lines",
          "x",
          "y"
        ],
        "returns": "{Object}",
        "description": " * Get lines.",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getLines(lines, x, y) {"
      },
      {
        "name": "getNextLineOfCode",
        "visibility": "public",
        "static": false,
        "lineNumber": 723,
        "params": " * @param lines\n * @param x",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "lines",
          "x"
        ],
        "returns": "{Object}",
        "description": " * Get next line of code.",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getNextLineOfCode(lines, x) {"
      },
      {
        "name": "concatLines",
        "visibility": "public",
        "static": false,
        "lineNumber": 739,
        "params": " * @param lines\n * @param codeBlock",
        "memberOf": "",
        "originalJsDocDescription": {
          "description": " * concatLines"
        },
        "args": [
          "lines",
          "codeBlock"
        ],
        "description": " * concatLines",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function concatLines(lines, codeBlock) {"
      },
      {
        "name": "replace",
        "visibility": "public",
        "static": false,
        "lineNumber": 751,
        "params": " * @param source\n * @param original\n * @param token",
        "memberOf": "",
        "originalJsDocDescription": {
          "description": " * duh"
        },
        "args": [
          "source",
          "original",
          "token"
        ],
        "description": " * duh",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function replace(source, original, token) {"
      },
      {
        "name": "getRequiresTags",
        "visibility": "public",
        "static": false,
        "lineNumber": 756,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "input"
        ],
        "returns": "{Object}",
        "description": " * Get requires tags.",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getRequiresTags(input) {"
      },
      {
        "name": "getType",
        "visibility": "public",
        "static": false,
        "lineNumber": 791,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "input"
        ],
        "returns": "{Object}",
        "description": " * Get type.",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getType(input) {"
      },
      {
        "name": "fixWords",
        "visibility": "public",
        "static": false,
        "lineNumber": 807,
        "params": " * @param input",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "input"
        ],
        "description": " * Fix words.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function fixWords(input) {"
      },
      {
        "name": "replaceWord",
        "visibility": "public",
        "static": false,
        "lineNumber": 821,
        "params": " * @param text\n * @param whichWord\n * @param withWhat",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "text",
          "whichWord",
          "withWhat"
        ],
        "description": " * Replace word.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function replaceWord(text, whichWord, withWhat) {"
      },
      {
        "name": "fixReturnText",
        "visibility": "public",
        "static": false,
        "lineNumber": 828,
        "params": " * @param input\n * @param docletData",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "input",
          "docletData"
        ],
        "description": " * Fix return text.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function fixReturnText(input, docletData) {"
      },
      {
        "name": "fixTypes",
        "visibility": "public",
        "static": false,
        "lineNumber": 866,
        "params": " * @param input\n * @param dontCuddle",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "input",
          "dontCuddle"
        ],
        "description": " * Fix types.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function fixTypes(input, dontCuddle) {"
      },
      {
        "name": "parseDoclet",
        "visibility": "public",
        "static": false,
        "lineNumber": 897,
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [],
        "description": " * Parse doclet.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function parseDoclet(input, doclet, defineModuleInTopOfFile, nextLineOfCode,"
      },
      {
        "name": "walk",
        "visibility": "public",
        "static": false,
        "lineNumber": 1237,
        "params": " * @param node\n * @param attr\n * @param val\n * @param results",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "node",
          "attr",
          "val",
          "results"
        ],
        "description": " * Walk.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function walk(node, attr, val, results) {"
      },
      {
        "name": "getNodesByType",
        "visibility": "public",
        "static": false,
        "lineNumber": 1305,
        "params": " * @param ast\n * @param nodeType",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "ast",
          "nodeType"
        ],
        "returns": "{Object}",
        "description": " * Get nodes by type.",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "function getNodesByType(ast, nodeType) {"
      },
      {
        "name": "fixDoclets",
        "visibility": "public",
        "static": false,
        "lineNumber": 1352,
        "params": " * @param walkerObj",
        "memberOf": "",
        "originalJsDocDescription": {},
        "args": [
          "walkerObj"
        ],
        "description": " * Fix doclets.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function fixDoclets(walkerObj) {"
      },
      {
        "name": "unpacker_filter",
        "visibility": "public",
        "static": false,
        "lineNumber": 1365,
        "params": " * @param  source ",
        "memberOf": "",
        "originalJsDocDescription": {
          "name": {
            "name": "unpacker_filter",
            "type": "",
            "description": "",
            "attribute": "name"
          },
          "description": "   * Unpacker_filter.\n   *",
          "method": {
            "name": "unpacker_filter",
            "type": "",
            "description": "",
            "attribute": "method"
          }
        },
        "args": [
          "source"
        ],
        "description": "   * Unpacker_filter.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function unpacker_filter(source) {"
      }
    ],
    "is_module": false,
    "uses_alert": false,
    "uses_y_log": false,
    "requiresRaw": [],
    "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-output/ours",
    "fileName": "parseDoclet.js",
    "strict": false
  },
  "possibleClassname": "",
  "testStubs": "\n\n",
  "couldParseProcessedSource": true,
  "corrupted": false,
  "numberOfLines": 1655
}