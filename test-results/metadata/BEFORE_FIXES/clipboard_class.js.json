{
  "results": {
    "amdProc": {
      "requires": [
        "wayfair",
        "jquery",
        "logger"
      ],
      "moduleName": "clipboard_class",
      "AMD": true,
      "webPath": "/BEFORE_FIXES"
    }
  },
  "errors": {
    "badCharactersProc": [],
    "jsBeautifyProc": [],
    "jsHintProc": [
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "    this.configuration_order_id = boardData.configurationOrderId;",
        "line": 34,
        "character": 0,
        "scope": "(main)",
        "a": "configuration_order_id",
        "reason": "Identifier 'configuration_order_id' is not in camel case."
      },
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "      products.board_id = this.id;",
        "line": 233,
        "character": 0,
        "scope": "(main)",
        "a": "board_id",
        "reason": "Identifier 'board_id' is not in camel case."
      },
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "      'board_name': actionData.board_name,",
        "line": 451,
        "character": 0,
        "scope": "(main)",
        "a": "board_name",
        "reason": "Identifier 'board_name' is not in camel case."
      },
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "      'board_product_ids': actionData.board_product_ids,",
        "line": 452,
        "character": 0,
        "scope": "(main)",
        "a": "board_product_ids",
        "reason": "Identifier 'board_product_ids' is not in camel case."
      },
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "      'board_id': actionData.board_id,",
        "line": 454,
        "character": 0,
        "scope": "(main)",
        "a": "board_id",
        "reason": "Identifier 'board_id' is not in camel case."
      },
      {
        "id": "(error)",
        "raw": "Identifier '{a}' is not in camel case.",
        "code": "W106",
        "evidence": "      'event_id': actionData.event_id",
        "line": 455,
        "character": 0,
        "scope": "(main)",
        "a": "event_id",
        "reason": "Identifier 'event_id' is not in camel case."
      }
    ],
    "jsDoccerProc": [
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 61,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function() {",
        "line": 77,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'addProduct'.",
        "code": "wfJD",
        "evidence": "Clipboard.prototype.addProduct = function(product, successCallback, errorCallback) {",
        "line": 95,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'addProduct'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 110,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function(msg) {",
        "line": 134,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 290,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function(msg) {",
        "line": 324,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 407,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function(msg) {",
        "line": 417,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 427,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function(msg) {",
        "line": 434,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'success'.",
        "code": "wfJD",
        "evidence": "success: function(result) {",
        "line": 461,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'success'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'error'.",
        "code": "wfJD",
        "evidence": "error: function(msg) {",
        "line": 472,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'error'."
      }
    ],
    "fixJSDocFormattingProc": []
  },
  "outputDirectory": "test-output",
  "path": "test-source/BEFORE_FIXES/clipboard_class.js",
  "folderPath": "test-source/BEFORE_FIXES",
  "fileName": "clipboard_class.js",
  "packagePath": "/BEFORE_FIXES",
  "webPath": "/BEFORE_FIXES",
  "libFile": false,
  "min": false,
  "realName": "clipboard_class",
  "name": "clipboard_class",
  "camelName": "ClipboardClass",
  "processedFilePath": "test-output/BEFORE_FIXES/clipboard_class.js",
  "couldParseOriginalSource": true,
  "jsDoccerProcData": {
    "lines": 503,
    "requires": [
      "wf in {@link wayfair.js\"}",
      "$ in {@link 'jquery.js\"}",
      "Logger in {@link 'logger.js\"}"
    ],
    "className": "ClipboardClass",
    "packagePath": "",
    "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-output/BEFORE_FIXES",
    "uses_Y": false,
    "no_lib": false,
    "inferencedClassName": "ClipboardClass",
    "uses_$": true,
    "chars": 15816,
    "uses_YUI": false,
    "fields": [],
    "moduleName": "clipboard_class",
    "uses_console_log": false,
    "uses_backbone": false,
    "classes": {
      "Clipboard": {
        "name": "Clipboard",
        "visibility": "public",
        "constructor": true,
        "static": false,
        "lineNumber": 28,
        "memberOf": "",
        "args": [
          "boardData"
        ],
        "return": "void",
        "classDeclarationFlag": true,
        "line": "function Clipboard(boardData) {"
      }
    },
    "methods": [
      {
        "lineNumber": 10,
        "line": "], function(wf, $, Logger) {",
        "visibility": "private",
        "args": [
          "wf",
          "$",
          "Logger"
        ],
        "name": "_anonymous10",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "name": "Clipboard",
        "visibility": "public",
        "static": false,
        "lineNumber": 28,
        "params": " * @param  boardData data containing the boardId, boardName and optionally",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {
          "alias": {
            "name": "module:clipboard_class~Clipboard",
            "type": "",
            "description": "",
            "attribute": "alias"
          },
          "constructor": {
            "type": "",
            "description": "",
            "attribute": "constructor"
          },
          "description": "   * Constructor for the Clipboard class.\n   *"
        },
        "args": [
          "boardData"
        ],
        "description": "   * Constructor for the Clipboard class.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function Clipboard(boardData) {"
      },
      {
        "name": "loadProducts",
        "visibility": "public",
        "static": false,
        "lineNumber": 51,
        "params": " * @param  successCallback \n * @param  errorCallback ",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Load the products from the back end.\n   *"
        },
        "args": [
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Load the products from the back end.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.loadProducts = function(successCallback, errorCallback) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 61,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 77,
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function() {"
      },
      {
        "name": "setProducts",
        "visibility": "public",
        "static": false,
        "lineNumber": 87,
        "params": " * @param  products the products to store in this board.",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Setter for the products property.\n   *"
        },
        "args": [
          "products"
        ],
        "description": "   * Setter for the products property.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.setProducts = function(products) {"
      },
      {
        "name": "addProduct",
        "visibility": "public",
        "static": false,
        "lineNumber": 95,
        "params": " * @param product\n * @param successCallback\n * @param errorCallback",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {},
        "args": [
          "product",
          "successCallback",
          "errorCallback"
        ],
        "description": " * Add product.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.addProduct = function(product, successCallback, errorCallback) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 110,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 134,
        "params": " * @param msg",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "msg"
        ],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function(msg) {"
      },
      {
        "name": "saveProductConfiguration",
        "visibility": "public",
        "static": false,
        "lineNumber": 163,
        "params": " * @param {Object} boardProduct The product that was added to teh board,\n * @param {Function} successCallback Function to call if ajax call to\n * @param {Function} errorCallback Function to call if ajax call to save",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Saves the product configuration by calling add_item.php with the form\n   * data If the save fails, it just ignores it. This isn't ideal, but\n   * saves duplicating add-to-cart logic. Once we get a better\n   * representation for configured skus, this should be updated.\n   *\n   *          must have an id field\n   *          save sku is successful\n   *          sku fails"
        },
        "args": [
          "boardProduct",
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Saves the product configuration by calling add_item.php with the form\n   * data If the save fails, it just ignores it. This isn't ideal, but\n   * saves duplicating add-to-cart logic. Once we get a better\n   * representation for configured skus, this should be updated.\n   *\n   *          must have an id field\n   *          save sku is successful\n   *          sku fails",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.saveProductConfiguration = function(boardProduct, successCallback, errorCallback) {"
      },
      {
        "lineNumber": 190,
        "line": "$.each(form.serializeArray(), function(index, element) {",
        "visibility": "private",
        "args": [
          "index",
          "element"
        ],
        "name": "_anonymous190",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "lineNumber": 205,
        "line": "}).done(function(result) {",
        "visibility": "private",
        "args": [
          "result"
        ],
        "name": "_anonymous205",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "lineNumber": 209,
        "line": "}).fail(function(msg) {",
        "visibility": "private",
        "args": [
          "msg"
        ],
        "name": "_anonymous209",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "name": "batchAddProducts",
        "visibility": "public",
        "static": false,
        "lineNumber": 226,
        "params": " * @param  products Products to add to the list.\n * @param  successCallback Invoked if call was successful.\n * @param  errorCallback Invoked if call was not successful.",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Batch add products to product list.\n   *"
        },
        "args": [
          "products",
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Batch add products to product list.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.batchAddProducts = function(products, successCallback, errorCallback) {"
      },
      {
        "lineNumber": 238,
        "line": "}).done(function(result) {",
        "visibility": "private",
        "args": [
          "result"
        ],
        "name": "_anonymous238",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "lineNumber": 249,
        "line": "}).fail(function(msg) {",
        "visibility": "private",
        "args": [
          "msg"
        ],
        "name": "_anonymous249",
        "return": "void",
        "static": false,
        "memberOf": ""
      },
      {
        "name": "removeProduct",
        "visibility": "public",
        "static": false,
        "lineNumber": 272,
        "params": " * @param  product the product to remove.\n * @param  successCallback \n * @param  errorCallback ",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Delete the product with the given sku from the product list.\n   *"
        },
        "args": [
          "product",
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Delete the product with the given sku from the product list.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.removeProduct = function(product, successCallback, errorCallback) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 290,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 324,
        "params": " * @param msg",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "msg"
        ],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function(msg) {"
      },
      {
        "name": "hasProduct",
        "visibility": "public",
        "static": false,
        "lineNumber": 338,
        "params": " * @param {String} productSku The sku of the product to check for.",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "return": {
            "type": "{Boolean}",
            "description": "",
            "attribute": "return"
          },
          "description": "   * Returns true if this clipboard has the given product sku.\n   *"
        },
        "args": [
          "productSku"
        ],
        "returns": "{Boolean}",
        "description": "   * Returns true if this clipboard has the given product sku.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.hasProduct = function(productSku) {"
      },
      {
        "name": "hasProducts",
        "visibility": "public",
        "static": false,
        "lineNumber": 354,
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "return": {
            "type": "{Boolean}",
            "description": "",
            "attribute": "return"
          },
          "description": "   * Returns true if products have been loaded\n   *"
        },
        "args": [],
        "returns": "{Boolean}",
        "description": "   * Returns true if products have been loaded\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.hasProducts = function() {"
      },
      {
        "name": "getNumProducts",
        "visibility": "public",
        "static": false,
        "lineNumber": 362,
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "return": {
            "type": "{Number}",
            "description": "",
            "attribute": "return"
          },
          "description": "   * Returns the number of products in this board\n   *"
        },
        "args": [],
        "returns": " {Number} ",
        "description": "   * Returns the number of products in this board\n   *",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.getNumProducts = function() {"
      },
      {
        "name": "getBoardProductIdOfSku",
        "visibility": "public",
        "static": false,
        "lineNumber": 371,
        "params": " * @param  sku Sku to find matching board product id",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "return": {
            "type": "{Number}",
            "description": "",
            "attribute": "return"
          },
          "description": "   * Returns the board product id of the given sku\n   *"
        },
        "args": [
          "sku"
        ],
        "returns": " {Number} ",
        "description": "   * Returns the board product id of the given sku\n   *",
        "return": "{}",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.getBoardProductIdOfSku = function(sku) {"
      },
      {
        "name": "saveChanges",
        "visibility": "public",
        "static": false,
        "lineNumber": 388,
        "params": " * @param  successCallback \n * @param  errorCallback ",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Create/edit the board with the new properties.\n   *"
        },
        "args": [
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Create/edit the board with the new properties.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.saveChanges = function(successCallback, errorCallback) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 407,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 417,
        "params": " * @param msg",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "msg"
        ],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function(msg) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 427,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 434,
        "params": " * @param msg",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "msg"
        ],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function(msg) {"
      },
      {
        "name": "takeAction",
        "visibility": "public",
        "static": false,
        "lineNumber": 447,
        "params": " * @param  actionData \n * @param successCallback\n * @param errorCallback",
        "memberOf": "Clipboard.prototype",
        "originalJsDocDescription": {
          "description": "   * Act on the board.\n   *"
        },
        "args": [
          "actionData",
          "successCallback",
          "errorCallback"
        ],
        "description": "   * Act on the board.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "Clipboard.prototype.takeAction = function(actionData, successCallback, errorCallback) {"
      },
      {
        "name": "success",
        "visibility": "public",
        "static": false,
        "lineNumber": 461,
        "params": " * @param result",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "result"
        ],
        "description": " * Success.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "success: function(result) {"
      },
      {
        "name": "error",
        "visibility": "public",
        "static": false,
        "lineNumber": 472,
        "params": " * @param msg",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {},
        "args": [
          "msg"
        ],
        "description": " * Error.",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "error: function(msg) {"
      },
      {
        "name": "mapProductsToDictionary",
        "visibility": "public",
        "static": false,
        "lineNumber": 487,
        "params": " * @param  products the list of products to map.",
        "memberOf": "Clipboard",
        "originalJsDocDescription": {
          "description": "   * Map the give list of products to a dictionary for easier retrieval.\n   *"
        },
        "args": [
          "products"
        ],
        "description": "   * Map the give list of products to a dictionary for easier retrieval.\n   *",
        "return": "void",
        "classDeclarationFlag": false,
        "line": "function mapProductsToDictionary(products) {"
      }
    ],
    "is_module": true,
    "uses_alert": false,
    "uses_y_log": false,
    "requiresRaw": [
      "wf",
      "$",
      "Logger"
    ],
    "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-output/BEFORE_FIXES",
    "fileName": "clipboard_class.js",
    "strict": true
  },
  "possibleClassname": "Clipboard",
  "testStubs": "\n\n",
  "couldParseProcessedSource": true,
  "corrupted": false,
  "numberOfLines": 604
}