{
  "results": {
    "amdProc": {
      "requires": [
        "logger",
        "jquery",
        "underscore",
        "backbone"
      ],
      "moduleName": "event-dispatch",
      "AMD": true,
      "webPath": "/core",
      "convertedName": "event_dispatch",
      "min": false,
      "main": 0,
      "uses_$": true,
      "uses_Y": false,
      "uses_alert": false,
      "strict": false
    }
  },
  "errors": {
    "JSONFilter": [],
    "jsBeautifyProc": [],
    "jsDoccerProc": [
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'wrapper'.",
        "code": "wfJD",
        "evidence": "var wrapper = function () {",
        "line": 60,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'wrapper'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method '_attempt'.",
        "code": "wfJD",
        "evidence": "function _attempt(instance, name, method, args, defaultResult) {",
        "line": 124,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method '_attempt'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fireEvent'.",
        "code": "wfJD",
        "evidence": "function fireEvent(event) {",
        "line": 159,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fireEvent'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fireEventRaw'.",
        "code": "wfJD",
        "evidence": "function fireEventRaw(eventType, data) {",
        "line": 169,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fireEventRaw'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'addEventHandler'.",
        "code": "wfJD",
        "evidence": "function addEventHandler(eventType, handler) {",
        "line": 178,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'addEventHandler'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'addEventHandlerOnce'.",
        "code": "wfJD",
        "evidence": "function addEventHandlerOnce(eventType, handler) {",
        "line": 182,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'addEventHandlerOnce'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'removeEventHandler'.",
        "code": "wfJD",
        "evidence": "function removeEventHandler(eventType, handler) {",
        "line": 186,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'removeEventHandler'."
      }
    ]
  },
  "outputDirectory": "test-output",
  "path": "test-source/core/event-dispatch.js",
  "folderPath": "test-source/core",
  "fileName": "event-dispatch.js",
  "modulePaths": {
    "blue": "blue/js"
  },
  "packagePath": "/core",
  "webPath": "/core",
  "libFile": false,
  "min": false,
  "realName": "event-dispatch",
  "name": "event_dispatch",
  "camelName": "EventDispatch",
  "processedFilePath": "test-output/core/event-dispatch.js",
  "mappedModuleName": "core/event-dispatch",
  "couldParseOriginalSource": true,
  "namedConstructors": {
    "core/event-dispatch~EventDispatch": {
      "todos": [],
      "memberOf": "",
      "returnType": "",
      "ctor": true,
      "lineNumber": 36,
      "line": "function EventDispatch() {",
      "comment": 2,
      "range": [
        760,
        1489
      ],
      "name": "EventDispatch",
      "commentBody": "/**\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   */",
      "oldComment": {
        "type": "Block",
        "value": "*\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   ",
        "range": [
          647,
          757
        ],
        "commentBody": "/**\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   */",
        "lineNumber": 29
      },
      "ctorType": "@constructor",
      "doclet": {
        "params": [],
        "tags": [
          {
            "tag": "class",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": "EventDispatch"
          },
          {
            "tag": "constructor",
            "line": 4,
            "lastLine": 4,
            "textStartsOnSameLine": true,
            "text": ""
          },
          {
            "tag": "public",
            "line": 5,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n"
          }
        ],
        "requiresList": [
          "logger",
          "jquery",
          "underscore",
          "backbone"
        ],
        "moduleName": "event_dispatch",
        "camelName": "EventDispatch",
        "freeText": "\n Instantiates a new EventDispatch.\n",
        "@constructor": "",
        "@public": "",
        "preamble": "\n Instantiates a new EventDispatch.\n",
        "constructor": "EventDispatch",
        "className": "EventDispatch",
        "nodeType": "CLASS"
      },
      "jsDoc": "/**\n * Instantiates a new EventDispatch.\n * @class EventDispatch\n * @constructor\n * @public\n */"
    }
  },
  "checkForRequiresMismatch": false,
  "preprocessed": true,
  "moduleName": "core/event-dispatch",
  "jsDoccerProcData": {
    "lines": 190,
    "requires": [
      "logger",
      "jquery",
      "underscore",
      "backbone"
    ],
    "className": "n/a",
    "packagePath": "",
    "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
    "uses_Y": false,
    "no_lib": true,
    "inferencedClassName": "n/a",
    "uses_$": true,
    "chars": 4502,
    "uses_YUI": false,
    "fields": [],
    "moduleName": "./event-dispatch",
    "uses_console_log": false,
    "uses_backbone": true,
    "classes": {
      "EventDispatch": 1454
    },
    "methods": [
      {
        "name": "EventDispatch",
        "visibility": "public",
        "static": false,
        "lineNumber": 36,
        "memberOf": "",
        "doclet": "/**\n * Instantiates a new EventDispatch.\n * @class EventDispatch\n * @constructor\n * @public\n */",
        "description": "\n Instantiates a new EventDispatch.\n",
        "return": "",
        "classDeclarationFlag": true,
        "line": "function EventDispatch() {",
        "originalJsDocDescription": {
          "class": {
            "tag": "class",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": "EventDispatch"
          },
          "constructor": {
            "tag": "constructor",
            "line": 4,
            "lastLine": 4,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "public": {
            "tag": "public",
            "line": 5,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n"
          }
        }
      },
      {
        "name": "_addHandler",
        "visibility": "public",
        "static": false,
        "lineNumber": 59,
        "memberOf": "",
        "doclet": "/**\n * Add handler.\n * @private\n * @param eventId  \n * @param handlerOwner  \n * @param handlerFunction\n */",
        "args": [
          "eventId",
          "handlerOwner",
          "handlerFunction"
        ],
        "description": "\n Add handler.\n",
        "classDeclarationFlag": false,
        "line": "function _addHandler(eventId, handlerOwner, handlerFunction) {",
        "originalJsDocDescription": {
          "private": {
            "tag": "private",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 4,
              "lastLine": 4,
              "textStartsOnSameLine": true,
              "text": "eventId"
            },
            {
              "tag": "param",
              "line": 5,
              "lastLine": 5,
              "textStartsOnSameLine": true,
              "text": "handlerOwner"
            },
            {
              "tag": "param",
              "line": 6,
              "lastLine": -1,
              "textStartsOnSameLine": true,
              "text": "handlerFunction\n"
            }
          ]
        }
      },
      {
        "name": "wrapper",
        "visibility": "public",
        "static": false,
        "lineNumber": 60,
        "memberOf": "",
        "doclet": "/**\n * Wrapper.\n */",
        "description": "",
        "classDeclarationFlag": false,
        "line": "var wrapper = function () {",
        "originalJsDocDescription": {}
      },
      {
        "name": "_removeHandler",
        "visibility": "public",
        "static": false,
        "lineNumber": 78,
        "memberOf": "",
        "doclet": "/**\n * Remove handler.\n * @private\n * @param eventId  \n * @param handlerOwner  \n * @param handlerFunction\n */",
        "args": [
          "eventId",
          "handlerOwner",
          "handlerFunction"
        ],
        "description": "\n Remove handler.\n",
        "classDeclarationFlag": false,
        "line": "function _removeHandler(eventId, handlerOwner, handlerFunction) {",
        "originalJsDocDescription": {
          "private": {
            "tag": "private",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 4,
              "lastLine": 4,
              "textStartsOnSameLine": true,
              "text": "eventId"
            },
            {
              "tag": "param",
              "line": 5,
              "lastLine": 5,
              "textStartsOnSameLine": true,
              "text": "handlerOwner"
            },
            {
              "tag": "param",
              "line": 6,
              "lastLine": -1,
              "textStartsOnSameLine": true,
              "text": "handlerFunction\n"
            }
          ]
        }
      },
      {
        "name": "_triggerEvent",
        "visibility": "public",
        "static": false,
        "lineNumber": 88,
        "memberOf": "",
        "doclet": "/**\n * Trigger event.\n * @private\n * @param eventId  \n * @param data\n */",
        "args": [
          "eventId",
          "data"
        ],
        "description": "\n Trigger event.\n",
        "classDeclarationFlag": false,
        "line": "function _triggerEvent(eventId, data) {",
        "originalJsDocDescription": {
          "private": {
            "tag": "private",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 4,
              "lastLine": 4,
              "textStartsOnSameLine": true,
              "text": "eventId"
            },
            {
              "tag": "param",
              "line": 5,
              "lastLine": -1,
              "textStartsOnSameLine": true,
              "text": "data\n"
            }
          ]
        }
      },
      {
        "name": "_suspend",
        "visibility": "public",
        "static": false,
        "lineNumber": 100,
        "memberOf": "",
        "doclet": "/**\n * Suspend.\n * @private\n */",
        "description": "\n Suspend.\n",
        "classDeclarationFlag": false,
        "line": "function _suspend() {",
        "originalJsDocDescription": {
          "private": {
            "tag": "private",
            "line": 3,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n"
          }
        }
      },
      {
        "name": "_resume",
        "visibility": "public",
        "static": false,
        "lineNumber": 108,
        "memberOf": "",
        "doclet": "/**\n * Resume.\n * @static\n */",
        "description": "\n Resume.\n",
        "classDeclarationFlag": false,
        "line": "function _resume() {",
        "originalJsDocDescription": {
          "static": {
            "tag": "static",
            "line": 3,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n"
          }
        }
      },
      {
        "name": "_log",
        "visibility": "public",
        "static": false,
        "lineNumber": 118,
        "memberOf": "",
        "doclet": "/**\n * Log.\n * @method _log\n * @private\n * @param msg\n */",
        "args": [
          "msg"
        ],
        "description": "\n Log.\n",
        "classDeclarationFlag": false,
        "line": "function _log(msg) {",
        "originalJsDocDescription": {
          "method": {
            "tag": "method",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": "_log"
          },
          "private": {
            "tag": "private",
            "line": 4,
            "lastLine": 4,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 5,
              "lastLine": -1,
              "textStartsOnSameLine": true,
              "text": "msg\n"
            }
          ]
        }
      },
      {
        "name": "_attempt",
        "visibility": "public",
        "static": false,
        "lineNumber": 124,
        "memberOf": "",
        "doclet": "/**\n * Attempt.\n * @param instance\n * @param name\n * @param method\n * @param args\n * @param defaultResult\n */",
        "args": [
          "instance",
          "name",
          "method",
          "args",
          "defaultResult"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function _attempt(instance, name, method, args, defaultResult) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "_getInstance",
        "visibility": "public",
        "static": false,
        "lineNumber": 151,
        "memberOf": "",
        "doclet": "/**\n * Get instance.\n * @method _getInstance\n * @private\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
        "description": "\n Get instance.\n",
        "return": "?",
        "classDeclarationFlag": false,
        "line": "function _getInstance() {",
        "originalJsDocDescription": {
          "method": {
            "tag": "method",
            "line": 3,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": "_getInstance"
          },
          "private": {
            "tag": "private",
            "line": 4,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n"
          }
        }
      },
      {
        "name": "fireEvent",
        "visibility": "public",
        "static": false,
        "lineNumber": 159,
        "memberOf": "",
        "doclet": "/**\n * Fire event.\n * @param event\n */",
        "args": [
          "event"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function fireEvent(event) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "fireEventRaw",
        "visibility": "public",
        "static": false,
        "lineNumber": 169,
        "memberOf": "",
        "doclet": "/**\n * Fire event raw.\n * @param eventType\n * @param data\n */",
        "args": [
          "eventType",
          "data"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function fireEventRaw(eventType, data) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "addEventHandler",
        "visibility": "public",
        "static": false,
        "lineNumber": 178,
        "memberOf": "",
        "doclet": "/**\n * Add event handler.\n * @param eventType\n * @param handler\n */",
        "args": [
          "eventType",
          "handler"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function addEventHandler(eventType, handler) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "addEventHandlerOnce",
        "visibility": "public",
        "static": false,
        "lineNumber": 182,
        "memberOf": "",
        "doclet": "/**\n * Add event handler once.\n * @param eventType\n * @param handler\n */",
        "args": [
          "eventType",
          "handler"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function addEventHandlerOnce(eventType, handler) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "removeEventHandler",
        "visibility": "public",
        "static": false,
        "lineNumber": 186,
        "memberOf": "",
        "doclet": "/**\n * Remove event handler.\n * @param eventType\n * @param handler\n */",
        "args": [
          "eventType",
          "handler"
        ],
        "description": "",
        "classDeclarationFlag": false,
        "line": "function removeEventHandler(eventType, handler) {",
        "originalJsDocDescription": {}
      }
    ],
    "is_module": true,
    "uses_alert": false,
    "uses_y_log": false,
    "requiresRaw": [],
    "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
    "fileName": "event-dispatch.js",
    "strict": false,
    "min": false,
    "main": 0
  },
  "testStubs": "\n",
  "couldParseProcessedSource": true,
  "corrupted": false,
  "numberOfLines": 214
}