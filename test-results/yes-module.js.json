{
  "results": {
    "amdProc": {
      "requires": [],
      "moduleName": "yes_module",
      "AMD": true,
      "webPath": ""
    }
  },
  "errors": {
    "thirdPartyFilter": [],
    "minFilter": [],
    "badCharactersProc": [],
    "amdFilter": [],
    "jsBeautifyProc": [],
    "jsDoccerProc": [
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'Freenox'.",
        "code": "wfJD",
        "evidence": "function Freenox() {",
        "line": 21,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'Freenox'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'chewBakka'.",
        "code": "wfJD",
        "evidence": "this.chewBakka = function() {",
        "line": 22,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'chewBakka'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'DonutView'.",
        "code": "wfJD",
        "evidence": "return function DonutView() {",
        "line": 23,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'DonutView'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'stupidFunction'.",
        "code": "wfJD",
        "evidence": "this[\"stupidFunction\"] = function() {",
        "line": 34,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'stupidFunction'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'worldPuzzle'.",
        "code": "wfJD",
        "evidence": "Freenox.prototype.worldPuzzle = function(toothache, tomato) {",
        "line": 62,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'worldPuzzle'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'SecondClass'.",
        "code": "wfJD",
        "evidence": "function SecondClass() {",
        "line": 67,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'SecondClass'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'fixTheWorld'.",
        "code": "wfJD",
        "evidence": "SecondClass.prototype.fixTheWorld = function(toothache, tomato) {",
        "line": 70,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'fixTheWorld'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'someFunction'.",
        "code": "wfJD",
        "evidence": "FourthClass.prototype.someFunction = function() {",
        "line": 124,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'someFunction'."
      },
      {
        "id": "(error)",
        "raw": "No jsDoc Comments for method 'anotherFunction'.",
        "code": "wfJD",
        "evidence": "FourthClass.prototype.anotherFunction = function() {",
        "line": 132,
        "character": -1,
        "scope": "(main)",
        "a": "",
        "reason": "No jsDoc Comments for method 'anotherFunction'."
      }
    ],
    "trimProc": []
  },
  "outputDirectory": "test-output",
  "path": "test-source/yes-module.js",
  "folderPath": "test-source",
  "fileName": "yes-module.js",
  "packagePath": "",
  "webPath": "",
  "libFile": false,
  "min": false,
  "realName": "yes-module",
  "name": "yes_module",
  "camelName": "YesModule",
  "processedFilePath": "test-output/yes-module.js",
  "couldParseOriginalSource": true,
  "preprocessed": true,
  "jsDoccerProcData": {
    "lines": 186,
    "requires": [],
    "className": "n/a",
    "packagePath": "",
    "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
    "uses_Y": false,
    "no_lib": true,
    "inferencedClassName": "n/a",
    "uses_$": false,
    "chars": 4781,
    "uses_YUI": false,
    "fields": [],
    "moduleName": "./yes-module",
    "uses_console_log": false,
    "uses_backbone": false,
    "classes": {
      "DonutView": 1080,
      "Freenox": 654,
      "SecondClass": 717,
      "ThirdClass": 753,
      "FourthClass": 773
    },
    "methods": [
      {
        "name": "Freenox",
        "visibility": "public",
        "static": false,
        "lineNumber": 21,
        "memberOf": "",
        "doclet": "/**\n * Creates a new instance of class Freenox.\n * @constructor\n */",
        "description": "",
        "return": "",
        "classDeclarationFlag": true,
        "line": "function Freenox() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "chewBakka",
        "visibility": "public",
        "static": false,
        "lineNumber": 22,
        "memberOf": "this",
        "doclet": "/**\n * Chew bakka.\n * @return {function}\n */",
        "description": "",
        "return": "{function}",
        "classDeclarationFlag": false,
        "line": "this.chewBakka = function() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "DonutView",
        "visibility": "public",
        "static": false,
        "lineNumber": 23,
        "memberOf": "",
        "doclet": "/**\n * Creates a new instance of class DonutView.\n * @constructor\n */",
        "description": "",
        "return": "",
        "classDeclarationFlag": true,
        "line": "return function DonutView() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "stupidFunction",
        "visibility": "public",
        "static": false,
        "lineNumber": 34,
        "memberOf": "this",
        "doclet": "/**\n * The function is stupid but the comment is a valid doclet.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
        "description": "\n The function is stupid but the comment is a valid doclet.\n",
        "return": "?",
        "classDeclarationFlag": false,
        "line": "this[\"stupidFunction\"] = function() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "privateFunction",
        "visibility": "public",
        "static": false,
        "lineNumber": 51,
        "memberOf": "",
        "doclet": "/**\n * @private\n * @param a  \n * @param {Banana}  \n * @param {boolean}  \n * @return {String}\n */",
        "args": [
          "a",
          "b",
          "c"
        ],
        "description": "",
        "return": "{string}",
        "classDeclarationFlag": false,
        "line": "var privateFunction = function(a, b, c) {",
        "originalJsDocDescription": {
          "private": {
            "tag": "private",
            "line": 1,
            "lastLine": 1,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 2,
              "lastLine": 3,
              "textStartsOnSameLine": true,
              "text": "a\n            A standard apple fruit."
            },
            {
              "tag": "param",
              "line": 4,
              "lastLine": 5,
              "textStartsOnSameLine": true,
              "text": "{Banana}\n            b The Banana."
            },
            {
              "tag": "param",
              "line": 6,
              "lastLine": 7,
              "textStartsOnSameLine": true,
              "text": "{boolean}\n            c"
            }
          ],
          "return": {
            "tag": "return",
            "line": 8,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "{String}\n"
          }
        }
      },
      {
        "name": "worldPuzzle",
        "visibility": "public",
        "static": false,
        "lineNumber": 62,
        "memberOf": "Freenox.prototype",
        "doclet": "/**\n * @param toothache\n * @param tomato\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
        "args": [
          "toothache",
          "tomato"
        ],
        "description": "",
        "return": "?",
        "classDeclarationFlag": false,
        "line": "Freenox.prototype.worldPuzzle = function(toothache, tomato) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "SecondClass",
        "visibility": "public",
        "static": false,
        "lineNumber": 67,
        "memberOf": "",
        "doclet": "/**\n * Creates a new instance of class SecondClass.\n * @constructor\n */",
        "description": "",
        "return": "",
        "classDeclarationFlag": true,
        "line": "function SecondClass() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "fixTheWorld",
        "visibility": "public",
        "static": false,
        "lineNumber": 70,
        "memberOf": "SecondClass.prototype",
        "doclet": "/**\n * Fix the world.\n * @param toothache\n * @param tomato\n * @return {boolean}\n */",
        "args": [
          "toothache",
          "tomato"
        ],
        "description": "",
        "return": "{boolean}",
        "classDeclarationFlag": false,
        "line": "SecondClass.prototype.fixTheWorld = function(toothache, tomato) {",
        "originalJsDocDescription": {}
      },
      {
        "name": "preambleTest",
        "visibility": "public",
        "static": false,
        "lineNumber": 79,
        "memberOf": "SecondClass.prototype",
        "doclet": "/**\n * This is a preamble to a doclet.\n *  It might have more than one line.\n * @param toothache\n * @param tomato\n * @return {boolean}\n */",
        "args": [
          "toothache",
          "tomato"
        ],
        "description": "\n This is a preamble to a doclet.\n It might have more than one line.",
        "return": "{boolean}",
        "classDeclarationFlag": false,
        "line": "SecondClass.prototype.preambleTest = function(toothache, tomato) {",
        "originalJsDocDescription": {
          "return": {
            "tag": "return",
            "line": 3,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "{boolean}\n"
          }
        }
      },
      {
        "name": "ThirdClass",
        "visibility": "public",
        "static": false,
        "lineNumber": 87,
        "memberOf": "",
        "doclet": "/**\n * @constructor\n * @description A description tag.\n * \n */",
        "description": "A description tag.\n",
        "return": "",
        "classDeclarationFlag": true,
        "line": "function ThirdClass() {",
        "originalJsDocDescription": {
          "constructor": {
            "tag": "constructor",
            "line": 1,
            "lastLine": 1,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "description": {
            "tag": "description",
            "line": 2,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "A description tag.\n"
          }
        }
      },
      {
        "name": "FourthClass",
        "visibility": "public",
        "static": false,
        "lineNumber": 116,
        "memberOf": "",
        "doclet": "/**\n * @constructor\n * @description A description tag with more than\n *  one line of stuff\n *  and some of it could be very very long\n * \n *  and some of it could be after a BLANK line.\n * @example \n *  //This is sample code!\n *  var ft = new FourthClass();\n *  //Note we are using a zero-arg constructor.\n * \n */",
        "description": "A description tag with more than\n one line of stuff\n and some of it could be very very long\n\n and some of it could be after a BLANK line.",
        "return": "",
        "classDeclarationFlag": true,
        "line": "function FourthClass() {",
        "originalJsDocDescription": {
          "constructor": {
            "tag": "constructor",
            "line": 1,
            "lastLine": 1,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "description": {
            "tag": "description",
            "line": 2,
            "lastLine": 6,
            "textStartsOnSameLine": true,
            "text": "A description tag with more than\n one line of stuff\n and some of it could be very very long\n\n and some of it could be after a BLANK line."
          },
          "example": {
            "tag": "example",
            "line": 7,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n //This is sample code!\n var ft = new FourthClass();\n //Note we are using a zero-arg constructor.\n"
          }
        }
      },
      {
        "name": "someFunction",
        "visibility": "public",
        "static": false,
        "lineNumber": 124,
        "memberOf": "FourthClass.prototype",
        "doclet": "/**\n * Some function.\n */",
        "description": "",
        "classDeclarationFlag": false,
        "line": "FourthClass.prototype.someFunction = function() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "anotherFunction",
        "visibility": "public",
        "static": false,
        "lineNumber": 132,
        "memberOf": "FourthClass.prototype",
        "doclet": "/**\n * Another function.\n */",
        "description": "",
        "classDeclarationFlag": false,
        "line": "FourthClass.prototype.anotherFunction = function() {",
        "originalJsDocDescription": {}
      },
      {
        "name": "on",
        "visibility": "public",
        "static": false,
        "lineNumber": 181,
        "memberOf": "Freenox.prototype",
        "doclet": "/**\n * @description Subscribe to events on the component's local Channel. Events on the\n *               local channel are not visible to other components or the main\n *               ComponentChannel.\n * @function\n * @example \n *  // Execute callback for ALL events on the component (no eventType given)\n *  myComponent.on(function(event){\n *      // Analyze, log, etc the event\n *  });\n * \n *  // Execute callback for a component-generated event\n *  // Format of eventType is ACTION/VALUE\n *  // ACTION - function call, state change, etc on the component\n *  // VALUE - name of action, property name, etc.\n * \n *  // Note: TARGET is automatically prepended to the eventType and\n *  //       is equal to the name of the component as defined in the spec\n *  myComponent.on('action/submit', function(event){\n *      // Execute logic for the submit action on the component\n *  });\n * \n *  // Subscribe to multiple events\n *  myComponent.on( {\n *      'action/submit': function(submitEvent){\n *          // Business Logic\n *      },\n *      'state/enabled': function(enabledEvent){\n *          // Business Logic\n *      },\n *      'action/requestBalance': function(requestEvent){\n *          // Business Logic\n *      },\n *      'state/valid': function(validEvent){\n *          // Business Logic\n *      }\n *  } );\n * \n *  // Can use wildcards\n *  myComponent.on('action/*', function(actionEvent){\n *      // Logic for all actions on the component\n *  } );\n * \n * @param {String|PlainObject} [eventType] The type of event. \n * @param {Function} [callback] The callback to execute when the event is published. \n */",
        "args": [
          "eventType",
          "callback"
        ],
        "description": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel.",
        "classDeclarationFlag": false,
        "line": "Freenox.prototype.on = function(eventType, callback) {",
        "originalJsDocDescription": {
          "description": {
            "tag": "description",
            "line": 1,
            "lastLine": 3,
            "textStartsOnSameLine": true,
            "text": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel."
          },
          "function": {
            "tag": "function",
            "line": 4,
            "lastLine": 4,
            "textStartsOnSameLine": true,
            "text": ""
          },
          "params": [
            {
              "tag": "param",
              "line": 5,
              "lastLine": 5,
              "textStartsOnSameLine": true,
              "text": "{String|PlainObject} [eventType] The type of event."
            },
            {
              "tag": "param",
              "line": 6,
              "lastLine": 6,
              "textStartsOnSameLine": true,
              "text": "{Function} [callback] The callback to execute when the event is published."
            }
          ],
          "example": {
            "tag": "example",
            "line": 7,
            "lastLine": -1,
            "textStartsOnSameLine": true,
            "text": "\n // Execute callback for ALL events on the component (no eventType given)\n myComponent.on(function(event){\n     // Analyze, log, etc the event\n });\n\n // Execute callback for a component-generated event\n // Format of eventType is ACTION/VALUE\n // ACTION - function call, state change, etc on the component\n // VALUE - name of action, property name, etc.\n\n // Note: TARGET is automatically prepended to the eventType and\n //       is equal to the name of the component as defined in the spec\n myComponent.on('action/submit', function(event){\n     // Execute logic for the submit action on the component\n });\n\n // Subscribe to multiple events\n myComponent.on( {\n     'action/submit': function(submitEvent){\n         // Business Logic\n     },\n     'state/enabled': function(enabledEvent){\n         // Business Logic\n     },\n     'action/requestBalance': function(requestEvent){\n         // Business Logic\n     },\n     'state/valid': function(validEvent){\n         // Business Logic\n     }\n } );\n\n // Can use wildcards\n myComponent.on('action/*', function(actionEvent){\n     // Logic for all actions on the component\n } );\n"
          }
        }
      }
    ],
    "is_module": false,
    "uses_alert": false,
    "uses_y_log": false,
    "requiresRaw": [],
    "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
    "fileName": "yes-module.js",
    "strict": false
  },
  "testStubs": "\n",
  "couldParseProcessedSource": true,
  "corrupted": false,
  "numberOfLines": 199
}