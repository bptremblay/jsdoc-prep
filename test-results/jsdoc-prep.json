{
  "results": [
    {
      "results": {
        "amdProc": {
          "requires": [
            "jquery",
            "./$",
            "./string/toComponentName",
            "./declare",
            "./component/direction",
            "./event",
            "./event/channel",
            "./event/channel/domEvents",
            "mout/object/get",
            "./is",
            "mout/object",
            "mout/object/merge",
            "mout/array/flatten",
            "./nodeDictionary"
          ],
          "moduleName": "reactiveBridge",
          "AMD": true,
          "webPath": "/blue/js",
          "convertedName": "reactive_bridge",
          "min": false,
          "main": false,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'BridgeCreator'.",
            "code": "wfJD",
            "evidence": "Bridge = declare( function BridgeCreator(){",
            "line": 20,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'BridgeCreator'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'makeEventData'.",
            "code": "wfJD",
            "evidence": "function makeEventData( data, argList ){",
            "line": 23,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'makeEventData'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'Bridge'.",
            "code": "wfJD",
            "evidence": "constructor: function Bridge( options ){",
            "line": 71,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'Bridge'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'get'.",
            "code": "wfJD",
            "evidence": "get: function(){",
            "line": 116,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'get'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'createBinding'.",
            "code": "wfJD",
            "evidence": "createBinding: function createBinding( target, $context ){",
            "line": 124,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'createBinding'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'createTrigger'.",
            "code": "wfJD",
            "evidence": "createTrigger: function createTrigger( target ){",
            "line": 214,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'createTrigger'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'addComponentSpecSettings'.",
            "code": "wfJD",
            "evidence": "addComponentSpecSettings: function addComponentSpecSettings( settings ){",
            "line": 372,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'addComponentSpecSettings'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'disable'.",
            "code": "wfJD",
            "evidence": "disable: function disable(){",
            "line": 378,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'disable'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'enable'.",
            "code": "wfJD",
            "evidence": "enable: function enable( input, $context ){",
            "line": 412,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'enable'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'connectToRootBridge'.",
            "code": "wfJD",
            "evidence": "connectToRootBridge: function connectToRootBridge(){",
            "line": 481,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'connectToRootBridge'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'create'.",
            "code": "wfJD",
            "evidence": "Bridge.create = function( spec, view, prototype ){",
            "line": 566,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'create'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'copyData'.",
            "code": "wfJD",
            "evidence": "function copyData( dataOriginal ){",
            "line": 576,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'copyData'."
          }
        ],
        "jsDocNameFixerProc": [],
        "fixClassDeclarationsProc": [],
        "jsDoc3PrepProc": [],
        "jsBeautifyProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/blue/js/reactiveBridge.js",
      "folderPath": "test-source/blue/js",
      "fileName": "reactiveBridge.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/blue/js",
      "webPath": "/blue/js",
      "libFile": false,
      "min": false,
      "realName": "reactive_bridge",
      "name": "reactiveBridge",
      "camelName": "ReactiveBridge",
      "processedFilePath": "test-output/blue/js/reactiveBridge.js",
      "mappedModuleName": "blue/reactiveBridge",
      "couldParseOriginalSource": true,
      "namedConstructors": {},
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "blue/reactiveBridge",
      "jsDoccerProcData": {
        "lines": 606,
        "requires": [
          "jquery",
          "./$",
          "./string/toComponentName",
          "./declare",
          "./component/direction",
          "./event",
          "./event/channel",
          "./event/channel/domEvents",
          "mout/object/get",
          "./is",
          "mout/object",
          "mout/object/merge",
          "mout/array/flatten",
          "./nodeDictionary"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source/blue/js",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 22242,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./reactiveBridge",
        "uses_console_log": true,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "BridgeCreator",
            "visibility": "public",
            "static": false,
            "lineNumber": 20,
            "memberOf": "",
            "doclet": "/**\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "Bridge = declare( function BridgeCreator(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "makeEventData",
            "visibility": "public",
            "static": false,
            "lineNumber": 23,
            "memberOf": "",
            "doclet": "/**\n * @param data\n * @param argList\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "data",
              "argList"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function makeEventData( data, argList ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "Bridge",
            "visibility": "public",
            "static": false,
            "lineNumber": 71,
            "memberOf": "",
            "doclet": "/**\n * @param options\n * @return UnaryExpression\n */",
            "args": [
              "options"
            ],
            "description": "",
            "return": "UnaryExpression",
            "classDeclarationFlag": false,
            "line": "constructor: function Bridge( options ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "get",
            "visibility": "public",
            "static": false,
            "lineNumber": 116,
            "memberOf": "",
            "doclet": "/**\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "get: function(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "createBinding",
            "visibility": "public",
            "static": false,
            "lineNumber": 124,
            "memberOf": "",
            "doclet": "/**\n * @param target\n * @param $context\n */",
            "args": [
              "target",
              "$context"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "createBinding: function createBinding( target, $context ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "createTrigger",
            "visibility": "public",
            "static": false,
            "lineNumber": 214,
            "memberOf": "",
            "doclet": "/**\n * @param target\n */",
            "args": [
              "target"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "createTrigger: function createTrigger( target ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "addComponentSpecSettings",
            "visibility": "public",
            "static": false,
            "lineNumber": 372,
            "memberOf": "",
            "doclet": "/**\n * @param settings\n */",
            "args": [
              "settings"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "addComponentSpecSettings: function addComponentSpecSettings( settings ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "disable",
            "visibility": "public",
            "static": false,
            "lineNumber": 378,
            "memberOf": "",
            "doclet": "/**\n * @todo Add some jsDoc comments here!\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "disable: function disable(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "enable",
            "visibility": "public",
            "static": false,
            "lineNumber": 412,
            "memberOf": "",
            "doclet": "/**\n * @param input\n * @param $context\n */",
            "args": [
              "input",
              "$context"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "enable: function enable( input, $context ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "connectToRootBridge",
            "visibility": "public",
            "static": false,
            "lineNumber": 481,
            "memberOf": "",
            "doclet": "/**\n * @todo Add some jsDoc comments here!\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "connectToRootBridge: function connectToRootBridge(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "on",
            "visibility": "public",
            "static": false,
            "lineNumber": 532,
            "memberOf": "",
            "doclet": "/**\n * @description Subscribe to events on the component's local Channel. Events on the\n *               local channel are not visible to other components or the main\n *               ComponentChannel.\n * @function\n * @example \n *  // Execute callback for ALL events on the component (no eventType given)\n *  myComponent.on(function(event){\n *      // Analyze, log, etc the event\n *  });\n * \n *  // Execute callback for a component-generated event\n *  // Format of eventType is ACTION/VALUE\n *  // ACTION - function call, state change, etc on the component\n *  // VALUE - name of action, property name, etc.\n * \n *  // Note: TARGET is automatically prepended to the eventType and\n *  //       is equal to the name of the component as defined in the spec\n *  myComponent.on('action/submit', function(event){\n *      // Execute logic for the submit action on the component\n *  });\n * \n *  // Subscribe to multiple events\n *  myComponent.on( {\n *      'action/submit': function(submitEvent){\n *          // Business Logic\n *      },\n *      'state/enabled': function(enabledEvent){\n *          // Business Logic\n *      },\n *      'action/requestBalance': function(requestEvent){\n *          // Business Logic\n *      },\n *      'state/valid': function(validEvent){\n *          // Business Logic\n *      }\n *  } );\n * \n *  // Can use wildcards\n *  myComponent.on('action/*', function(actionEvent){\n *      // Logic for all actions on the component\n *  } );\n * \n * @param {String|PlainObject} [eventType] The type of event. \n * @param {Function} [callback] The callback to execute when the event is published. \n */",
            "args": [
              "eventType",
              "callback"
            ],
            "description": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel.",
            "classDeclarationFlag": false,
            "line": "on: function on( eventType, callback ){",
            "originalJsDocDescription": {
              "description": {
                "tag": "description",
                "line": 1,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel."
              },
              "function": {
                "tag": "function",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{String|PlainObject} [eventType] The type of event."
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": 6,
                  "textStartsOnSameLine": true,
                  "text": "{Function} [callback] The callback to execute when the event is published."
                }
              ],
              "example": {
                "tag": "example",
                "line": 7,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n // Execute callback for ALL events on the component (no eventType given)\n myComponent.on(function(event){\n     // Analyze, log, etc the event\n });\n\n // Execute callback for a component-generated event\n // Format of eventType is ACTION/VALUE\n // ACTION - function call, state change, etc on the component\n // VALUE - name of action, property name, etc.\n\n // Note: TARGET is automatically prepended to the eventType and\n //       is equal to the name of the component as defined in the spec\n myComponent.on('action/submit', function(event){\n     // Execute logic for the submit action on the component\n });\n\n // Subscribe to multiple events\n myComponent.on( {\n     'action/submit': function(submitEvent){\n         // Business Logic\n     },\n     'state/enabled': function(enabledEvent){\n         // Business Logic\n     },\n     'action/requestBalance': function(requestEvent){\n         // Business Logic\n     },\n     'state/valid': function(validEvent){\n         // Business Logic\n     }\n } );\n\n // Can use wildcards\n myComponent.on('action/*', function(actionEvent){\n     // Logic for all actions on the component\n } );\n"
              }
            }
          },
          {
            "name": "create",
            "visibility": "public",
            "static": false,
            "lineNumber": 566,
            "memberOf": "Bridge",
            "doclet": "/**\n * @param spec\n * @param view\n * @param prototype\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "spec",
              "view",
              "prototype"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "Bridge.create = function( spec, view, prototype ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "copyData",
            "visibility": "public",
            "static": false,
            "lineNumber": 576,
            "memberOf": "",
            "doclet": "/**\n * @param dataOriginal\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "dataOriginal"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function copyData( dataOriginal ){",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source/blue/js",
        "fileName": "reactiveBridge.js",
        "strict": false,
        "min": false,
        "main": false
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 598
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "jquery",
            "./$",
            "./ractive",
            "./compose",
            "./is",
            "./has",
            "./nodeDictionary",
            "./context/root",
            "./log",
            "./object/extend",
            "mout/object/merge",
            "mout/object/reject",
            "./template/decorator",
            "./declare",
            "template/helper",
            "blue/with/domEvents",
            "blue/with/stateAPI",
            "mout/array/slice",
            "blue/reactiveBridge",
            "blue/reactiveBridge",
            "./with/domManagement",
            "./with/domEvents",
            "./with/locationAPI",
            "./with/stateAPI"
          ],
          "moduleName": "reactiveView",
          "AMD": true,
          "webPath": "/blue/js",
          "convertedName": "reactive_view",
          "min": false,
          "main": false,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'defineProperties'.",
            "code": "wfJD",
            "evidence": "function defineProperties( config ){",
            "line": 59,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'defineProperties'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'defineProperty'.",
            "code": "wfJD",
            "evidence": "Object.keys( config ).forEach(function defineProperty(name){",
            "line": 60,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'defineProperty'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'GetSet'.",
            "code": "wfJD",
            "evidence": "this[ '_' + name ] = function GetSet(){",
            "line": 61,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'GetSet'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'createViewComponent'.",
            "code": "wfJD",
            "evidence": "function createViewComponent( view, subView ){",
            "line": 69,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'createViewComponent'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'get'.",
            "code": "wfJD",
            "evidence": "get: function(){",
            "line": 200,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'get'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'set'.",
            "code": "wfJD",
            "evidence": "set: function( newViews ){",
            "line": 203,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'set'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'updateProperties'.",
            "code": "wfJD",
            "evidence": "Object.keys( descriptors ).forEach(function updateProperties(name){",
            "line": 250,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'updateProperties'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'isRoot'.",
            "code": "wfJD",
            "evidence": "isRoot: function(){",
            "line": 274,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'isRoot'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'createSubView'.",
            "code": "wfJD",
            "evidence": "createSubView: function( view, subViewPrototype ){",
            "line": 300,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'createSubView'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'addReady'.",
            "code": "wfJD",
            "evidence": "addReady: function(){",
            "line": 306,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'addReady'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'createDecorators'.",
            "code": "wfJD",
            "evidence": "createDecorators: function( decoratorModules ){",
            "line": 527,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'createDecorators'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'toString'.",
            "code": "wfJD",
            "evidence": "toString: function(){",
            "line": 560,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'toString'."
          }
        ],
        "jsDocNameFixerProc": [],
        "fixClassDeclarationsProc": [],
        "jsDoc3PrepProc": [],
        "jsBeautifyProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/blue/js/reactiveView.js",
      "folderPath": "test-source/blue/js",
      "fileName": "reactiveView.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/blue/js",
      "webPath": "/blue/js",
      "libFile": false,
      "min": false,
      "realName": "reactive_view",
      "name": "reactiveView",
      "camelName": "ReactiveView",
      "processedFilePath": "test-output/blue/js/reactiveView.js",
      "mappedModuleName": "blue/reactiveView",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "blue/reactiveView~ReactiveView": {
          "todos": [],
          "returnType": "",
          "memberOf": "",
          "ctor": true,
          "lineNumber": 148,
          "line": "constructor: function ReactiveView(){",
          "comment": 8,
          "range": [
            4955,
            8674
          ],
          "name": "ReactiveView",
          "commentBody": "/**\n\t\t\t\t * @constructs module:blue/reactiveView~ReactiveView\n\t\t\t\t * @param {...Function|...PlainObject} mixins Attributes that will be applied to view instance\n\t\t\t\t * @mixes module:template.withTemplating\n\t\t\t\t * @mixes module:with/domEvents\n\t\t\t\t * @mixes module:with/domManagement\n\t\t\t\t * @mixes module:with/locationAPI\n\t\t\t\t * @mixes module:with/messaging\n\t\t\t\t * @mixes module:with/stateAPI\n\t\t\t\t */",
          "oldComment": {
            "type": "Block",
            "value": "*\n\t\t\t\t * @constructs module:blue/reactiveView~ReactiveView\n\t\t\t\t * @param {...Function|...PlainObject} mixins Attributes that will be applied to view instance\n\t\t\t\t * @mixes module:template.withTemplating\n\t\t\t\t * @mixes module:with/domEvents\n\t\t\t\t * @mixes module:with/domManagement\n\t\t\t\t * @mixes module:with/locationAPI\n\t\t\t\t * @mixes module:with/messaging\n\t\t\t\t * @mixes module:with/stateAPI\n\t\t\t\t ",
            "range": [
              4540,
              4937
            ],
            "lineNumber": 138
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [
              {
                "tagName": "param",
                "name": "mixins",
                "type": "{...Function|...PlainObject}",
                "description": "Attributes that will be applied to view instance "
              }
            ],
            "tags": [
              {
                "tag": "constructs",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": "module:blue/reactiveView~ReactiveView"
              },
              {
                "tag": "param",
                "line": 2,
                "lastLine": 2,
                "textStartsOnSameLine": true,
                "text": "{...Function|...PlainObject} mixins Attributes that will be applied to view instance"
              },
              {
                "tag": "mixes",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "module:template.withTemplating"
              },
              {
                "tag": "mixes",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "module:with/domEvents"
              },
              {
                "tag": "mixes",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": "module:with/domManagement"
              },
              {
                "tag": "mixes",
                "line": 6,
                "lastLine": 6,
                "textStartsOnSameLine": true,
                "text": "module:with/locationAPI"
              },
              {
                "tag": "mixes",
                "line": 7,
                "lastLine": 7,
                "textStartsOnSameLine": true,
                "text": "module:with/messaging"
              },
              {
                "tag": "mixes",
                "line": 8,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "module:with/stateAPI"
              }
            ],
            "requiresList": [
              "jquery",
              "./$",
              "./ractive",
              "./compose",
              "./is",
              "./has",
              "./nodeDictionary",
              "./context/root",
              "./log",
              "./object/extend",
              "mout/object/merge",
              "mout/object/reject",
              "./template/decorator",
              "./declare",
              "template/helper",
              "blue/with/domEvents",
              "blue/with/stateAPI",
              "mout/array/slice",
              "blue/reactiveBridge",
              "blue/reactiveBridge",
              "./with/domManagement",
              "./with/domEvents",
              "./with/locationAPI",
              "./with/stateAPI"
            ],
            "moduleName": "reactive_view",
            "camelName": "ReactiveView",
            "freeText": "",
            "@constructs": "module:blue/reactiveView~ReactiveView",
            "@mixes": "module:with/stateAPI",
            "preamble": "",
            "nodeType": "NONFUNCTION"
          },
          "jsDoc": "/**\n * @constructs module:blue/reactiveView~ReactiveView\n * @mixes module:template.withTemplating\n * @mixes module:with/domEvents\n * @mixes module:with/domManagement\n * @mixes module:with/locationAPI\n * @mixes module:with/messaging\n * @mixes module:with/stateAPI\n * @param {...Function|...PlainObject} mixins Attributes that will be applied to view instance \n */"
        }
      },
      "checkForRequiresMismatch": false,
      "preprocessed": true,
      "moduleName": "blue/reactiveView",
      "jsDoccerProcData": {
        "lines": 576,
        "requires": [
          "jquery",
          "./$",
          "./ractive",
          "./compose",
          "./is",
          "./has",
          "./nodeDictionary",
          "./context/root",
          "./log",
          "./object/extend",
          "mout/object/merge",
          "mout/object/reject",
          "./template/decorator",
          "./declare",
          "template/helper",
          "blue/with/domEvents",
          "blue/with/stateAPI",
          "mout/array/slice",
          "blue/reactiveBridge",
          "blue/reactiveBridge",
          "./with/domManagement",
          "./with/domEvents",
          "./with/locationAPI",
          "./with/stateAPI"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source/blue/js",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 16949,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./reactiveView",
        "uses_console_log": true,
        "uses_backbone": false,
        "classes": {
          "ReactiveView": 9949
        },
        "methods": [
          {
            "name": "defineProperties",
            "visibility": "public",
            "static": false,
            "lineNumber": 59,
            "memberOf": "",
            "doclet": "/**\n * @param config\n * @return ConditionalExpression\n */",
            "args": [
              "config"
            ],
            "description": "",
            "return": "ConditionalExpression",
            "classDeclarationFlag": false,
            "line": "function defineProperties( config ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "defineProperty",
            "visibility": "public",
            "static": false,
            "lineNumber": 60,
            "memberOf": "",
            "doclet": "/**\n * @param name\n * @return ConditionalExpression\n */",
            "args": [
              "name"
            ],
            "description": "",
            "return": "ConditionalExpression",
            "classDeclarationFlag": false,
            "line": "Object.keys( config ).forEach(function defineProperty(name){",
            "originalJsDocDescription": {}
          },
          {
            "name": "GetSet",
            "visibility": "public",
            "static": false,
            "lineNumber": 61,
            "memberOf": "",
            "doclet": "/**\n * @return ConditionalExpression\n */",
            "description": "",
            "return": "ConditionalExpression",
            "classDeclarationFlag": false,
            "line": "this[ '_' + name ] = function GetSet(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "createViewComponent",
            "visibility": "public",
            "static": false,
            "lineNumber": 69,
            "memberOf": "",
            "doclet": "/**\n * @param view\n * @param subView\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "view",
              "subView"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function createViewComponent( view, subView ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "ReactiveView",
            "visibility": "public",
            "static": false,
            "lineNumber": 148,
            "memberOf": "",
            "doclet": "/**\n * @constructs module:blue/reactiveView~ReactiveView\n * @mixes module:template.withTemplating\n * @mixes module:with/domEvents\n * @mixes module:with/domManagement\n * @mixes module:with/locationAPI\n * @mixes module:with/messaging\n * @mixes module:with/stateAPI\n * @param {...Function|...PlainObject} mixins Attributes that will be applied to view instance \n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "constructor: function ReactiveView(){",
            "originalJsDocDescription": {
              "constructs": {
                "tag": "constructs",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": "module:blue/reactiveView~ReactiveView"
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{...Function|...PlainObject} mixins Attributes that will be applied to view instance"
                }
              ],
              "mixes": [
                {
                  "tag": "mixes",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "module:template.withTemplating"
                },
                {
                  "tag": "mixes",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "module:with/domEvents"
                },
                {
                  "tag": "mixes",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "module:with/domManagement"
                },
                {
                  "tag": "mixes",
                  "line": 6,
                  "lastLine": 6,
                  "textStartsOnSameLine": true,
                  "text": "module:with/locationAPI"
                },
                {
                  "tag": "mixes",
                  "line": 7,
                  "lastLine": 7,
                  "textStartsOnSameLine": true,
                  "text": "module:with/messaging"
                },
                {
                  "tag": "mixes",
                  "line": 8,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "module:with/stateAPI"
                }
              ]
            }
          },
          {
            "name": "get",
            "visibility": "public",
            "static": false,
            "lineNumber": 200,
            "memberOf": "",
            "doclet": "/**\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "get: function(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "set",
            "visibility": "public",
            "static": false,
            "lineNumber": 203,
            "memberOf": "",
            "doclet": "/**\n * @param newViews\n */",
            "args": [
              "newViews"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "set: function( newViews ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "updateProperties",
            "visibility": "public",
            "static": false,
            "lineNumber": 250,
            "memberOf": "",
            "doclet": "/**\n * @param name\n */",
            "args": [
              "name"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "Object.keys( descriptors ).forEach(function updateProperties(name){",
            "originalJsDocDescription": {}
          },
          {
            "name": "$",
            "visibility": "public",
            "static": false,
            "lineNumber": 268,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Selector} [selector]  \n * @return {jQuery}\n */",
            "args": [
              "selector"
            ],
            "description": "",
            "return": "ConditionalExpression",
            "classDeclarationFlag": false,
            "line": "$: function( selector ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Selector} [selector]"
                }
              ],
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{jQuery}\n"
              }
            }
          },
          {
            "name": "isRoot",
            "visibility": "public",
            "static": false,
            "lineNumber": 274,
            "memberOf": "",
            "doclet": "/**\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "isRoot: function(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "createBridgePrototype",
            "visibility": "public",
            "static": false,
            "lineNumber": 284,
            "memberOf": "",
            "doclet": "/**\n * Create a bridge prototype.\n * @param {Object} spec Bridge/Web spec \n * @param {Object} prototype Bridge prototype \n * @return {Bridge} Bridge prototype\n */",
            "args": [
              "spec",
              "prototype"
            ],
            "description": "\n Create a bridge prototype\n\n Create a bridge prototype.",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "createBridgePrototype: function( spec, prototype ){",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Object} spec Bridge/Web spec"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "{Object} prototype Bridge prototype"
                }
              ],
              "return": {
                "tag": "return",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Bridge}      Bridge prototype\n"
              }
            }
          },
          {
            "name": "createBridge",
            "visibility": "public",
            "static": false,
            "lineNumber": 295,
            "memberOf": "",
            "doclet": "/**\n * Create a bridge instance from a spec and optional prototype.\n * @param {Object} spec Bridge/Web spec \n * @param {Object} prototype Bridge prototype \n * @return {Bridge} Bridge instance\n */",
            "args": [
              "spec",
              "prototype"
            ],
            "description": "\n Create a bridge instance from a spec and optional prototype\n\n Create a bridge instance from a spec and optional prototype.",
            "return": "NewExpression",
            "classDeclarationFlag": false,
            "line": "createBridge: function( spec, prototype ){",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Object} spec Bridge/Web spec"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "{Object} prototype Bridge prototype"
                }
              ],
              "return": {
                "tag": "return",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Bridge}      Bridge instance\n"
              }
            }
          },
          {
            "name": "createSubView",
            "visibility": "public",
            "static": false,
            "lineNumber": 300,
            "memberOf": "",
            "doclet": "/**\n * @param view\n * @param subViewPrototype\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "view",
              "subViewPrototype"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "createSubView: function( view, subViewPrototype ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "addReady",
            "visibility": "public",
            "static": false,
            "lineNumber": 306,
            "memberOf": "",
            "doclet": "/**\n * @todo Add some jsDoc comments here!\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "addReady: function(){",
            "originalJsDocDescription": {}
          },
          {
            "name": "appendChild",
            "visibility": "public",
            "static": false,
            "lineNumber": 318,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {View} childView  \n * @return {View}\n */",
            "args": [
              "childView"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "appendChild: function( childView ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{View} childView"
                }
              ],
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{View}\n"
              }
            }
          },
          {
            "name": "callRecursively",
            "visibility": "public",
            "static": false,
            "lineNumber": 342,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Function} callback  \n * @param {Boolean} [andSelf]\n */",
            "args": [
              "callback",
              "andSelf"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "callRecursively: function( callback, andSelf ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Function} callback"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Boolean} [andSelf]\n"
                }
              ]
            }
          },
          {
            "name": "createElement",
            "visibility": "public",
            "static": false,
            "lineNumber": 357,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "createElement: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "destroy",
            "visibility": "public",
            "static": false,
            "lineNumber": 368,
            "memberOf": "",
            "doclet": "/**\n * @function\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "destroy: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "_destroy",
            "visibility": "public",
            "static": false,
            "lineNumber": 375,
            "memberOf": "",
            "doclet": "/**\n * @function\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "_destroy: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "destroyChildren",
            "visibility": "public",
            "static": false,
            "lineNumber": 408,
            "memberOf": "",
            "doclet": "/**\n * @function\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "destroyChildren: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "destroyElement",
            "visibility": "public",
            "static": false,
            "lineNumber": 417,
            "memberOf": "",
            "doclet": "/**\n * @function\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "destroyElement: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "disableBridge",
            "visibility": "public",
            "static": false,
            "lineNumber": 427,
            "memberOf": "",
            "doclet": "/**\n * @function\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "disableBridge: function(){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "insertElement",
            "visibility": "public",
            "static": false,
            "lineNumber": 443,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Function} callback\n */",
            "args": [
              "callback"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "insertElement: function( callback ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Function} callback\n"
                }
              ]
            }
          },
          {
            "name": "removeChild",
            "visibility": "public",
            "static": false,
            "lineNumber": 455,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {View} childView\n */",
            "args": [
              "childView"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "removeChild: function( childView ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{View} childView\n"
                }
              ]
            }
          },
          {
            "name": "appendTo",
            "visibility": "public",
            "static": false,
            "lineNumber": 466,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Selector} selector Selector describing container node \n * @param {Function} callback Function to execute on completion\n */",
            "args": [
              "selector",
              "callback"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "appendTo: function( selector, callback ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Selector} selector Selector describing container node"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Function} callback Function to execute on completion\n"
                }
              ]
            }
          },
          {
            "name": "replaceIn",
            "visibility": "public",
            "static": false,
            "lineNumber": 475,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Selector} selector Selector describing container node \n * @param {Function} callback Function to execute on completion\n */",
            "args": [
              "selector",
              "callback"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "replaceIn: function( selector, callback ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Selector} selector Selector describing container node"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Function} callback Function to execute on completion\n"
                }
              ]
            }
          },
          {
            "name": "insert",
            "visibility": "public",
            "static": false,
            "lineNumber": 485,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Boolean} append Append this template to container? If false, replaces container contents. \n * @param {Selector} selector Selector describing container node \n * @param {Function} callback Function to execute on completion\n */",
            "args": [
              "append",
              "selector",
              "callback"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "insert: function( append, selector, callback ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Boolean} append Append this template to container? If false, replaces container contents."
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "{Selector} selector Selector describing container node"
                },
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Function} callback Function to execute on completion\n"
                }
              ]
            }
          },
          {
            "name": "createDecorators",
            "visibility": "public",
            "static": false,
            "lineNumber": 527,
            "memberOf": "",
            "doclet": "/**\n * @param decoratorModules\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "decoratorModules"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "createDecorators: function( decoratorModules ){",
            "originalJsDocDescription": {}
          },
          {
            "name": "rerender",
            "visibility": "public",
            "static": false,
            "lineNumber": 547,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Selector} selector\n */",
            "args": [
              "model"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "rerender: function( model ){",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Selector} selector\n"
                }
              ]
            }
          },
          {
            "name": "toString",
            "visibility": "public",
            "static": false,
            "lineNumber": 560,
            "memberOf": "",
            "doclet": "/**\n * @return {string}\n */",
            "description": "",
            "return": "{string}",
            "classDeclarationFlag": false,
            "line": "toString: function(){",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source/blue/js",
        "fileName": "reactiveView.js",
        "strict": false,
        "min": false,
        "main": false
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 533
    }
  ],
  "path": "test-source",
  "timeInSeconds": 1.613,
  "outPath": "test-output",
  "testPath": "test-jstests",
  "docPath": "test-jsdocs",
  "resultsPath": "test-results"
}