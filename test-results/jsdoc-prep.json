{
  "results": [
    {
      "results": {
        "amdProc": {
          "requires": [
            "./VENDOR_PREFIXES"
          ],
          "moduleName": "prefixes",
          "AMD": true,
          "webPath": "",
          "convertedName": "prefixes",
          "min": false,
          "main": false,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/prefixes.js",
      "folderPath": "test-source",
      "fileName": "prefixes.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "prefixes",
      "name": "prefixes",
      "camelName": "Prefixes",
      "processedFilePath": "test-output/prefixes.js",
      "mappedModuleName": "prefixes",
      "couldParseOriginalSource": true,
      "namedConstructors": {},
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "prefixes",
      "jsDoccerProcData": {
        "lines": 11,
        "requires": [
          "./VENDOR_PREFIXES"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 298,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./prefixes",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "ClassPrefixesModule",
            "visibility": "public",
            "static": false,
            "lineNumber": 5,
            "memberOf": "",
            "doclet": "/**\n * @module brown/object/var/CLASS_PREFIXES\n * @requires brown/object/var/VENDOR_PREFIXES\n * \n * @param require\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "require"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "define(function ClassPrefixesModule(require) {",
            "originalJsDocDescription": {
              "module": {
                "tag": "module",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": "brown/object/var/CLASS_PREFIXES"
              },
              "requires": [
                {
                  "tag": "requires",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "brown/object/var/VENDOR_PREFIXES\n"
                }
              ]
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source",
        "fileName": "prefixes.js",
        "strict": false,
        "min": false,
        "main": false
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 15
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "base-component",
          "AMD": false,
          "webPath": "/core",
          "convertedName": "base_component",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'BaseComponent'.",
            "code": "wfJD",
            "evidence": "function BaseComponent() {}",
            "line": 1,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'BaseComponent'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'initFields'.",
            "code": "wfJD",
            "evidence": "BaseComponent.prototype.initFields = function () {};",
            "line": 2,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'initFields'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'initInheritance'.",
            "code": "wfJD",
            "evidence": "BaseComponent.prototype.initInheritance = function () {};",
            "line": 3,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'initInheritance'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/base-component.js",
      "folderPath": "test-source/core",
      "fileName": "base-component.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "base-component",
      "name": "base_component",
      "camelName": "BaseComponent",
      "processedFilePath": "test-output/core/base-component.js",
      "mappedModuleName": "core/base-component",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/base-component~BaseComponent": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 1,
          "line": "function BaseComponent() {}",
          "comment": -1,
          "range": [
            0,
            27
          ],
          "name": "BaseComponent",
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "returnValue": ""
          },
          "jsDoc": "/**\n * @constructor\n */"
        }
      },
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/base-component",
      "jsDoccerProcData": {
        "lines": 3,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 138,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./base-component",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "BaseComponent": 55
        },
        "methods": [
          {
            "name": "BaseComponent",
            "visibility": "public",
            "static": false,
            "lineNumber": 1,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function BaseComponent() {}",
            "originalJsDocDescription": {}
          },
          {
            "name": "initFields",
            "visibility": "public",
            "static": false,
            "lineNumber": 2,
            "memberOf": "BaseComponent.prototype",
            "doclet": "/**\n * Init fields.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseComponent.prototype.initFields = function () {};",
            "originalJsDocDescription": {}
          },
          {
            "name": "initInheritance",
            "visibility": "public",
            "static": false,
            "lineNumber": 3,
            "memberOf": "BaseComponent.prototype",
            "doclet": "/**\n * Init inheritance.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseComponent.prototype.initInheritance = function () {};",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "base-component.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 12
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "base-data-provider",
          "AMD": false,
          "webPath": "/core",
          "convertedName": "base_data_provider",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'BaseDataProvider'.",
            "code": "wfJD",
            "evidence": "function BaseDataProvider() {}",
            "line": 1,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'BaseDataProvider'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/base-data-provider.js",
      "folderPath": "test-source/core",
      "fileName": "base-data-provider.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "base-data-provider",
      "name": "base_data_provider",
      "camelName": "BaseDataProvider",
      "processedFilePath": "test-output/core/base-data-provider.js",
      "mappedModuleName": "core/base-data-provider",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/base-data-provider~BaseDataProvider": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 1,
          "line": "function BaseDataProvider() {}",
          "comment": -1,
          "range": [
            0,
            30
          ],
          "name": "BaseDataProvider",
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "returnValue": ""
          },
          "jsDoc": "/**\n * @constructor\n */"
        }
      },
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/base-data-provider",
      "jsDoccerProcData": {
        "lines": 1,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 30,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./base-data-provider",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "BaseDataProvider": 11
        },
        "methods": [
          {
            "name": "BaseDataProvider",
            "visibility": "public",
            "static": false,
            "lineNumber": 1,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function BaseDataProvider() {}",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "base-data-provider.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 4
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "jquery",
            "backbone",
            "underscore"
          ],
          "moduleName": "base-ui-component",
          "AMD": false,
          "webPath": "/core",
          "convertedName": "base_ui_component",
          "min": false,
          "main": 0,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/base-ui-component.js",
      "folderPath": "test-source/core",
      "fileName": "base-ui-component.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "base-ui-component",
      "name": "base_ui_component",
      "camelName": "BaseUiComponent",
      "processedFilePath": "test-output/core/base-ui-component.js",
      "mappedModuleName": "core/base-ui-component",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/base-ui-component~BaseUiComponent": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 4,
          "line": "function BaseUiComponent() {",
          "comment": 0,
          "range": [
            24,
            180
          ],
          "name": "BaseUiComponent",
          "commentBody": "/**\n * @constructor\n */",
          "oldComment": {
            "type": "Block",
            "value": "*\n * @constructor\n ",
            "range": [
              0,
              23
            ],
            "commentBody": "/**\n * @constructor\n */",
            "lineNumber": 1
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "tags": [
              {
                "tag": "constructor",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            ],
            "requiresList": [
              "jquery",
              "backbone",
              "underscore"
            ],
            "moduleName": "base_ui_component",
            "camelName": "BaseUiComponent",
            "freeText": "",
            "@constructor": "",
            "preamble": "",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * @constructor\n */"
        }
      },
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/base-ui-component",
      "jsDoccerProcData": {
        "lines": 94,
        "requires": [
          "jquery",
          "backbone",
          "underscore"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 2126,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./base-ui-component",
        "uses_console_log": false,
        "uses_backbone": true,
        "classes": {
          "BaseUiComponent": 717
        },
        "methods": [
          {
            "name": "BaseUiComponent",
            "visibility": "public",
            "static": false,
            "lineNumber": 4,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function BaseUiComponent() {",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "addElementSelection",
            "visibility": "public",
            "static": false,
            "lineNumber": 18,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * Stores a reference to a jQuery selection.\n * @param {String} selector  \n * @param {Boolean} compile  \n * @return {$element}\n */",
            "args": [
              "selector",
              "compile"
            ],
            "description": "\n Stores a reference to a jQuery selection.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.addElementSelection = function (selector, compile) {",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "{string} selector"
                },
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "{boolean} compile"
                }
              ],
              "return": {
                "tag": "return",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{$element}\n"
              }
            }
          },
          {
            "name": "getKeyName",
            "visibility": "public",
            "static": false,
            "lineNumber": 33,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param {String} selector  \n * @return {string}\n */",
            "args": [
              "selector"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.getKeyName = function (selector) {",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{string} selector"
                }
              ],
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{string}\n"
              }
            }
          },
          {
            "name": "getElementByKeyName",
            "visibility": "public",
            "static": false,
            "lineNumber": 48,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param keyName\n */",
            "args": [
              "keyName"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.getElementByKeyName = function (keyName) {};",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "keyName\n"
                }
              ]
            }
          },
          {
            "name": "getElementBySelector",
            "visibility": "public",
            "static": false,
            "lineNumber": 53,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param selector\n */",
            "args": [
              "selector"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.getElementBySelector = function (selector) {};",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "selector\n"
                }
              ]
            }
          },
          {
            "name": "getCookie",
            "visibility": "public",
            "static": false,
            "lineNumber": 58,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param cookieId\n */",
            "args": [
              "cookieId"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.getCookie = function (cookieId) {};",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "cookieId\n"
                }
              ]
            }
          },
          {
            "name": "setCookie",
            "visibility": "public",
            "static": false,
            "lineNumber": 64,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param cookieId  \n * @param cookieValue\n */",
            "args": [
              "cookieId",
              "cookieValue"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.setCookie = function (cookieId, cookieValue) {};",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "cookieId"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "cookieValue\n"
                }
              ]
            }
          },
          {
            "name": "getSubCookie",
            "visibility": "public",
            "static": false,
            "lineNumber": 70,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param cookieId  \n * @param cookieField\n */",
            "args": [
              "cookieId",
              "cookieField"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.getSubCookie = function (cookieId, cookieField) {};",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "cookieId"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "cookieField\n"
                }
              ]
            }
          },
          {
            "name": "setSubCookie",
            "visibility": "public",
            "static": false,
            "lineNumber": 77,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param cookieId  \n * @param cookieField  \n * @param cookieValue\n */",
            "args": [
              "cookieId",
              "cookieField",
              "cookieValue"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.setSubCookie = function (cookieId, cookieField,",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "cookieId"
                },
                {
                  "tag": "param",
                  "line": 3,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "cookieField"
                },
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "cookieValue\n"
                }
              ]
            }
          },
          {
            "name": "compileTemplate",
            "visibility": "public",
            "static": false,
            "lineNumber": 84,
            "memberOf": "BaseUiComponent.prototype",
            "doclet": "/**\n * @param selector  \n */",
            "args": [
              "selector"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "BaseUiComponent.prototype.compileTemplate = function (selector) {",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "selector"
                }
              ],
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "base-ui-component.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 84
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "configuration",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "configuration",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/configuration.js",
      "folderPath": "test-source/core",
      "fileName": "configuration.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "configuration",
      "name": "configuration",
      "camelName": "Configuration",
      "processedFilePath": "test-output/core/configuration.js",
      "mappedModuleName": "core/configuration",
      "couldParseOriginalSource": true,
      "namedConstructors": {},
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/configuration",
      "jsDoccerProcData": {
        "lines": 104,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 2313,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./configuration",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "isDevMode",
            "visibility": "public",
            "static": false,
            "lineNumber": 22,
            "memberOf": "",
            "doclet": "/**\n * Is dev mode.\n * @private\n * @method\n * @return {Boolean} if dev mode is true.\n */",
            "description": "\n Is dev mode.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function isDevMode() {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "return": {
                "tag": "return",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Boolean} if dev mode is true.\n"
              }
            }
          },
          {
            "name": "namespace",
            "visibility": "public",
            "static": false,
            "lineNumber": 44,
            "memberOf": "",
            "doclet": "/**\n * namespace\n * .\n * @public\n * @method\n * @param {Array} arguments  \n * @return {Object} reference to wf namespace object\n */",
            "description": "\n namespace\n\n\n namespace\n.",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "namespace: function () {",
            "originalJsDocDescription": {
              "public": {
                "tag": "public",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{Array} arguments"
                }
              ],
              "return": {
                "tag": "return",
                "line": 6,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Object} reference to wf namespace object\n"
              }
            }
          },
          {
            "name": "init",
            "visibility": "public",
            "static": false,
            "lineNumber": 72,
            "memberOf": "",
            "doclet": "/**\n * init\n * .\n * @public\n * @method\n */",
            "description": "\n init\n\n\n init\n.",
            "classDeclarationFlag": false,
            "line": "init: function () {",
            "originalJsDocDescription": {
              "public": {
                "tag": "public",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 93,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @method getInstance\n * @private\n * @return {Configuration}\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function getInstance() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "getInstance"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "return": {
                "tag": "return",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Configuration}\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "configuration.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 102
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "logger",
            "jquery"
          ],
          "moduleName": "data-binding",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "data_binding",
          "min": false,
          "main": 0,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'DataBinding'.",
            "code": "wfJD",
            "evidence": "function DataBinding() {",
            "line": 14,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'DataBinding'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'dataBind'.",
            "code": "wfJD",
            "evidence": "function dataBind(objectMap, map) {",
            "line": 19,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'dataBind'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'transformText'.",
            "code": "wfJD",
            "evidence": "function transformText(stringValues, template) {",
            "line": 101,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'transformText'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'renderDataBoundChanges'.",
            "code": "wfJD",
            "evidence": "function renderDataBoundChanges(component) {",
            "line": 114,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'renderDataBoundChanges'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'quoteIfString'.",
            "code": "wfJD",
            "evidence": "function quoteIfString(input) {",
            "line": 145,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'quoteIfString'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/data-binding.js",
      "folderPath": "test-source/core",
      "fileName": "data-binding.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "data-binding",
      "name": "data_binding",
      "camelName": "DataBinding",
      "processedFilePath": "test-output/core/data-binding.js",
      "mappedModuleName": "core/data-binding",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/data-binding~DataBinding": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 14,
          "line": "function DataBinding() {",
          "comment": -1,
          "range": [
            212,
            368
          ],
          "name": "DataBinding",
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "returnValue": ""
          },
          "jsDoc": "/**\n * @constructor\n */"
        }
      },
      "checkForRequiresMismatch": false,
      "preprocessed": true,
      "moduleName": "core/data-binding",
      "jsDoccerProcData": {
        "lines": 171,
        "requires": [
          "logger",
          "jquery"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 6148,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./data-binding",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "DataBinding": 2642
        },
        "methods": [
          {
            "name": "DataBinding",
            "visibility": "public",
            "static": false,
            "lineNumber": 14,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function DataBinding() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "dataBind",
            "visibility": "public",
            "static": false,
            "lineNumber": 19,
            "memberOf": "",
            "doclet": "/**\n * Data bind.\n * @param objectMap\n * @param map\n * @return {function}\n */",
            "args": [
              "objectMap",
              "map"
            ],
            "description": "",
            "return": "{function}",
            "classDeclarationFlag": false,
            "line": "function dataBind(objectMap, map) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "transformText",
            "visibility": "public",
            "static": false,
            "lineNumber": 101,
            "memberOf": "",
            "doclet": "/**\n * Transform text.\n * @param stringValues\n * @param template\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "stringValues",
              "template"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function transformText(stringValues, template) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "renderDataBoundChanges",
            "visibility": "public",
            "static": false,
            "lineNumber": 114,
            "memberOf": "",
            "doclet": "/**\n * Render data bound changes.\n * @param component\n */",
            "args": [
              "component"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function renderDataBoundChanges(component) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "quoteIfString",
            "visibility": "public",
            "static": false,
            "lineNumber": 145,
            "memberOf": "",
            "doclet": "/**\n * Quote if string.\n * @param input\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "input"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function quoteIfString(input) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "_getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 163,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @method _getInstance\n * @private\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function _getInstance() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_getInstance"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "data-binding.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 193
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "logger",
            "event",
            "event-dispatch"
          ],
          "moduleName": "data-provider",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "data_provider",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'success'.",
            "code": "wfJD",
            "evidence": "success: function (data) {",
            "line": 95,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'success'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'error'.",
            "code": "wfJD",
            "evidence": "error: function (data) {",
            "line": 99,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'error'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/data-provider.js",
      "folderPath": "test-source/core",
      "fileName": "data-provider.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "data-provider",
      "name": "data_provider",
      "camelName": "DataProvider",
      "processedFilePath": "test-output/core/data-provider.js",
      "mappedModuleName": "core/data-provider",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/data-provider~DataProvider": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 32,
          "line": "function DataProvider() {",
          "comment": 2,
          "range": [
            612,
            693
          ],
          "name": "DataProvider",
          "commentBody": "/**\n   * Instantiates a new DataProvider.\n   *\n   * @class DataProvider\n   * @constructor\n   * @public\n   */",
          "oldComment": {
            "type": "Block",
            "value": "*\n   * Instantiates a new DataProvider.\n   *\n   * @class DataProvider\n   * @constructor\n   * @public\n   ",
            "range": [
              501,
              609
            ],
            "commentBody": "/**\n   * Instantiates a new DataProvider.\n   *\n   * @class DataProvider\n   * @constructor\n   * @public\n   */",
            "lineNumber": 25
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "tags": [
              {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "DataProvider"
              },
              {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            ],
            "requiresList": [
              "logger",
              "event",
              "event-dispatch"
            ],
            "moduleName": "data_provider",
            "camelName": "DataProvider",
            "freeText": "\n Instantiates a new DataProvider.\n",
            "@constructor": "",
            "@public": "",
            "preamble": "\n Instantiates a new DataProvider.\n",
            "constructor": "DataProvider",
            "className": "DataProvider",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * Instantiates a new DataProvider.\n * @class DataProvider\n * @constructor\n * @public\n */"
        }
      },
      "checkForRequiresMismatch": false,
      "preprocessed": true,
      "moduleName": "core/data-provider",
      "jsDoccerProcData": {
        "lines": 105,
        "requires": [
          "logger",
          "event",
          "event-dispatch"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 3013,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./data-provider",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "DataProvider": 860
        },
        "methods": [
          {
            "name": "DataProvider",
            "visibility": "public",
            "static": false,
            "lineNumber": 32,
            "memberOf": "",
            "doclet": "/**\n * Instantiates a new DataProvider.\n * @class DataProvider\n * @constructor\n * @public\n */",
            "description": "\n Instantiates a new DataProvider.\n",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function DataProvider() {",
            "originalJsDocDescription": {
              "class": {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "DataProvider"
              },
              "constructor": {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "getEventType",
            "visibility": "public",
            "static": false,
            "lineNumber": 40,
            "memberOf": "DataProvider.prototype",
            "doclet": "/**\n * Gets the event type for this component.\n * @return {string}\n */",
            "description": "\n Gets the event type for this component.",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "DataProvider.prototype.getEventType = function () {",
            "originalJsDocDescription": {
              "return": {
                "tag": "return",
                "line": 2,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{string}\n"
              }
            }
          },
          {
            "name": "getNameSpace",
            "visibility": "public",
            "static": false,
            "lineNumber": 48,
            "memberOf": "DataProvider.prototype",
            "doclet": "/**\n * Gets the namespace for this instance of DataProvider.\n * @return {string}\n */",
            "description": "\n Gets the namespace for this instance of DataProvider.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "DataProvider.prototype.getNameSpace = function () {",
            "originalJsDocDescription": {
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{string}\n"
              }
            }
          },
          {
            "name": "initialize",
            "visibility": "public",
            "static": false,
            "lineNumber": 63,
            "memberOf": "DataProvider.prototype",
            "doclet": "/**\n * Initialize the DataProvider. endpointMap follows a format like:\n *  <xmp> {\n *  'putGoodies': {'method':'PUT', 'url':'ajax/stores/goodies', 'type':'json'},\n *  'getMonkeys': {'method':'GET','url':'ajax/stores/monkeys', 'type':'json'},\n *  'getMonkey': {'method':'GET','url':'ajax/stores/monkeys/{monkeyId}', 'type':'json'}\n *  } </xmp>\n * .\n * @param {String} namespace The namespace for this data provider. Used to \n * @param {Object} endpointMap Key-value pairs of urls mapped to actions.\n */",
            "args": [
              "namespace",
              "endpointMap"
            ],
            "description": "\n Initialize the DataProvider. endpointMap follows a format like:\n <xmp> {\n 'putGoodies': {'method':'PUT', 'url':'ajax/stores/goodies', 'type':'json'},\n 'getMonkeys': {'method':'GET','url':'ajax/stores/monkeys', 'type':'json'},\n 'getMonkey': {'method':'GET','url':'ajax/stores/monkeys/{monkeyId}', 'type':'json'}\n } </xmp>\n\n\n Initialize the DataProvider. endpointMap follows a format like:\n <xmp> {\n 'putGoodies': {'method':'PUT', 'url':'ajax/stores/goodies', 'type':'json'},\n 'getMonkeys': {'method':'GET','url':'ajax/stores/monkeys', 'type':'json'},\n 'getMonkey': {'method':'GET','url':'ajax/stores/monkeys/{monkeyId}', 'type':'json'}\n } </xmp>\n.",
            "classDeclarationFlag": false,
            "line": "DataProvider.prototype.initialize = function (namespace, endpointMap) {",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 8,
                  "lastLine": 9,
                  "textStartsOnSameLine": true,
                  "text": "{string} namespace The namespace for this data provider. Used to\n          register events."
                },
                {
                  "tag": "param",
                  "line": 10,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Object} endpointMap Key-value pairs of urls mapped to actions.\n"
                }
              ]
            }
          },
          {
            "name": "execute",
            "visibility": "public",
            "static": false,
            "lineNumber": 75,
            "memberOf": "DataProvider.prototype",
            "doclet": "/**\n * Executes a DataProvider verb. Note that \"verb\" is not the same thing as\n *  HTTP Method. This method does not use a callback. The data provider will\n *  fire an event in its namespace.\n * @param {String} verb  \n * @param {Object} parameterMap\n */",
            "args": [
              "verb",
              "parameterMap"
            ],
            "description": "\n Executes a DataProvider verb. Note that \"verb\" is not the same thing as\n HTTP Method. This method does not use a callback. The data provider will\n fire an event in its namespace.\n",
            "classDeclarationFlag": false,
            "line": "DataProvider.prototype.execute = function (verb, parameterMap) {",
            "originalJsDocDescription": {
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{string} verb"
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Object} parameterMap\n"
                }
              ]
            }
          },
          {
            "name": "success",
            "visibility": "public",
            "static": false,
            "lineNumber": 95,
            "memberOf": "",
            "doclet": "/**\n * Success.\n * @param data\n */",
            "args": [
              "data"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "success: function (data) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "error",
            "visibility": "public",
            "static": false,
            "lineNumber": 99,
            "memberOf": "",
            "doclet": "/**\n * Error.\n * @param data\n */",
            "args": [
              "data"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "error: function (data) {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "data-provider.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 109
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "logger",
            "jquery",
            "underscore",
            "backbone"
          ],
          "moduleName": "event-dispatch",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "event_dispatch",
          "min": false,
          "main": 0,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'wrapper'.",
            "code": "wfJD",
            "evidence": "var wrapper = function () {",
            "line": 60,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'wrapper'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method '_attempt'.",
            "code": "wfJD",
            "evidence": "function _attempt(instance, name, method, args, defaultResult) {",
            "line": 124,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method '_attempt'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'fireEvent'.",
            "code": "wfJD",
            "evidence": "function fireEvent(event) {",
            "line": 159,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'fireEvent'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'fireEventRaw'.",
            "code": "wfJD",
            "evidence": "function fireEventRaw(eventType, data) {",
            "line": 169,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'fireEventRaw'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'addEventHandler'.",
            "code": "wfJD",
            "evidence": "function addEventHandler(eventType, handler) {",
            "line": 178,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'addEventHandler'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'addEventHandlerOnce'.",
            "code": "wfJD",
            "evidence": "function addEventHandlerOnce(eventType, handler) {",
            "line": 182,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'addEventHandlerOnce'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'removeEventHandler'.",
            "code": "wfJD",
            "evidence": "function removeEventHandler(eventType, handler) {",
            "line": 186,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'removeEventHandler'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/event-dispatch.js",
      "folderPath": "test-source/core",
      "fileName": "event-dispatch.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "event-dispatch",
      "name": "event_dispatch",
      "camelName": "EventDispatch",
      "processedFilePath": "test-output/core/event-dispatch.js",
      "mappedModuleName": "core/event-dispatch",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/event-dispatch~EventDispatch": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 36,
          "line": "function EventDispatch() {",
          "comment": 2,
          "range": [
            760,
            1489
          ],
          "name": "EventDispatch",
          "commentBody": "/**\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   */",
          "oldComment": {
            "type": "Block",
            "value": "*\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   ",
            "range": [
              647,
              757
            ],
            "commentBody": "/**\n   * Instantiates a new EventDispatch.\n   *\n   * @class EventDispatch\n   * @constructor\n   * @public\n   */",
            "lineNumber": 29
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "tags": [
              {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "EventDispatch"
              },
              {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            ],
            "requiresList": [
              "logger",
              "jquery",
              "underscore",
              "backbone"
            ],
            "moduleName": "event_dispatch",
            "camelName": "EventDispatch",
            "freeText": "\n Instantiates a new EventDispatch.\n",
            "@constructor": "",
            "@public": "",
            "preamble": "\n Instantiates a new EventDispatch.\n",
            "constructor": "EventDispatch",
            "className": "EventDispatch",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * Instantiates a new EventDispatch.\n * @class EventDispatch\n * @constructor\n * @public\n */"
        }
      },
      "checkForRequiresMismatch": false,
      "preprocessed": true,
      "moduleName": "core/event-dispatch",
      "jsDoccerProcData": {
        "lines": 190,
        "requires": [
          "logger",
          "jquery",
          "underscore",
          "backbone"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 4502,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./event-dispatch",
        "uses_console_log": false,
        "uses_backbone": true,
        "classes": {
          "EventDispatch": 1454
        },
        "methods": [
          {
            "name": "EventDispatch",
            "visibility": "public",
            "static": false,
            "lineNumber": 36,
            "memberOf": "",
            "doclet": "/**\n * Instantiates a new EventDispatch.\n * @class EventDispatch\n * @constructor\n * @public\n */",
            "description": "\n Instantiates a new EventDispatch.\n",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function EventDispatch() {",
            "originalJsDocDescription": {
              "class": {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "EventDispatch"
              },
              "constructor": {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "_addHandler",
            "visibility": "public",
            "static": false,
            "lineNumber": 59,
            "memberOf": "",
            "doclet": "/**\n * Add handler.\n * @private\n * @param eventId  \n * @param handlerOwner  \n * @param handlerFunction\n */",
            "args": [
              "eventId",
              "handlerOwner",
              "handlerFunction"
            ],
            "description": "\n Add handler.\n",
            "classDeclarationFlag": false,
            "line": "function _addHandler(eventId, handlerOwner, handlerFunction) {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "eventId"
                },
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "handlerOwner"
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "handlerFunction\n"
                }
              ]
            }
          },
          {
            "name": "wrapper",
            "visibility": "public",
            "static": false,
            "lineNumber": 60,
            "memberOf": "",
            "doclet": "/**\n * Wrapper.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "var wrapper = function () {",
            "originalJsDocDescription": {}
          },
          {
            "name": "_removeHandler",
            "visibility": "public",
            "static": false,
            "lineNumber": 78,
            "memberOf": "",
            "doclet": "/**\n * Remove handler.\n * @private\n * @param eventId  \n * @param handlerOwner  \n * @param handlerFunction\n */",
            "args": [
              "eventId",
              "handlerOwner",
              "handlerFunction"
            ],
            "description": "\n Remove handler.\n",
            "classDeclarationFlag": false,
            "line": "function _removeHandler(eventId, handlerOwner, handlerFunction) {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "eventId"
                },
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "handlerOwner"
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "handlerFunction\n"
                }
              ]
            }
          },
          {
            "name": "_triggerEvent",
            "visibility": "public",
            "static": false,
            "lineNumber": 88,
            "memberOf": "",
            "doclet": "/**\n * Trigger event.\n * @private\n * @param eventId  \n * @param data\n */",
            "args": [
              "eventId",
              "data"
            ],
            "description": "\n Trigger event.\n",
            "classDeclarationFlag": false,
            "line": "function _triggerEvent(eventId, data) {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "eventId"
                },
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "data\n"
                }
              ]
            }
          },
          {
            "name": "_suspend",
            "visibility": "public",
            "static": false,
            "lineNumber": 100,
            "memberOf": "",
            "doclet": "/**\n * Suspend.\n * @private\n */",
            "description": "\n Suspend.\n",
            "classDeclarationFlag": false,
            "line": "function _suspend() {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "_resume",
            "visibility": "public",
            "static": false,
            "lineNumber": 108,
            "memberOf": "",
            "doclet": "/**\n * Resume.\n * @static\n */",
            "description": "\n Resume.\n",
            "classDeclarationFlag": false,
            "line": "function _resume() {",
            "originalJsDocDescription": {
              "static": {
                "tag": "static",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "_log",
            "visibility": "public",
            "static": false,
            "lineNumber": 118,
            "memberOf": "",
            "doclet": "/**\n * Log.\n * @method _log\n * @private\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Log.\n",
            "classDeclarationFlag": false,
            "line": "function _log(msg) {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_log"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "_attempt",
            "visibility": "public",
            "static": false,
            "lineNumber": 124,
            "memberOf": "",
            "doclet": "/**\n * Attempt.\n * @param instance\n * @param name\n * @param method\n * @param args\n * @param defaultResult\n */",
            "args": [
              "instance",
              "name",
              "method",
              "args",
              "defaultResult"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function _attempt(instance, name, method, args, defaultResult) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "_getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 151,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @method _getInstance\n * @private\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function _getInstance() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_getInstance"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "fireEvent",
            "visibility": "public",
            "static": false,
            "lineNumber": 159,
            "memberOf": "",
            "doclet": "/**\n * Fire event.\n * @param event\n */",
            "args": [
              "event"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function fireEvent(event) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "fireEventRaw",
            "visibility": "public",
            "static": false,
            "lineNumber": 169,
            "memberOf": "",
            "doclet": "/**\n * Fire event raw.\n * @param eventType\n * @param data\n */",
            "args": [
              "eventType",
              "data"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function fireEventRaw(eventType, data) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "addEventHandler",
            "visibility": "public",
            "static": false,
            "lineNumber": 178,
            "memberOf": "",
            "doclet": "/**\n * Add event handler.\n * @param eventType\n * @param handler\n */",
            "args": [
              "eventType",
              "handler"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function addEventHandler(eventType, handler) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "addEventHandlerOnce",
            "visibility": "public",
            "static": false,
            "lineNumber": 182,
            "memberOf": "",
            "doclet": "/**\n * Add event handler once.\n * @param eventType\n * @param handler\n */",
            "args": [
              "eventType",
              "handler"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function addEventHandlerOnce(eventType, handler) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "removeEventHandler",
            "visibility": "public",
            "static": false,
            "lineNumber": 186,
            "memberOf": "",
            "doclet": "/**\n * Remove event handler.\n * @param eventType\n * @param handler\n */",
            "args": [
              "eventType",
              "handler"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function removeEventHandler(eventType, handler) {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "event-dispatch.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 214
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "event",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "event",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/event.js",
      "folderPath": "test-source/core",
      "fileName": "event.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "event",
      "name": "event",
      "camelName": "Event",
      "processedFilePath": "test-output/core/event.js",
      "mappedModuleName": "core/event",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/event~Event": {
          "todos": [],
          "params": [
            "eventSource",
            "verb",
            "data"
          ],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 10,
          "line": "function Event(eventSource, verb, data) {",
          "comment": 0,
          "range": [
            175,
            362
          ],
          "name": "Event",
          "commentBody": "/**\n   * @constructor\n   * @class Event\n   * \n   * @param {Object} eventSource\n   * @param {string} verb\n   * @param {Object} data\n   */",
          "oldComment": {
            "type": "Block",
            "value": "*\n   * @constructor\n   * @class Event\n   * \n   * @param {Object} eventSource\n   * @param {string} verb\n   * @param {Object} data\n   ",
            "range": [
              36,
              172
            ],
            "commentBody": "/**\n   * @constructor\n   * @class Event\n   * \n   * @param {Object} eventSource\n   * @param {string} verb\n   * @param {Object} data\n   */",
            "lineNumber": 2
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [
              {
                "tagName": "param",
                "name": "eventSource",
                "type": "{Object}",
                "description": " "
              },
              {
                "tagName": "param",
                "name": "verb",
                "type": "{String}",
                "description": " "
              },
              {
                "tagName": "param",
                "name": "data",
                "type": "{Object}",
                "description": ""
              }
            ],
            "tags": [
              {
                "tag": "constructor",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              {
                "tag": "class",
                "line": 2,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Event\n"
              },
              {
                "tag": "param",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "{Object} eventSource"
              },
              {
                "tag": "param",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": "{string} verb"
              },
              {
                "tag": "param",
                "line": 6,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Object} data\n"
              }
            ],
            "requiresList": [],
            "moduleName": "event",
            "camelName": "Event",
            "freeText": "",
            "@constructor": "",
            "preamble": "",
            "constructor": "Event",
            "className": "Event",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * @constructor\n * @class Event\n * \n * @param {Object} eventSource  \n * @param {String} verb  \n * @param {Object} data\n */"
        }
      },
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/event",
      "jsDoccerProcData": {
        "lines": 27,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 578,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./event",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "Event": 273
        },
        "methods": [
          {
            "name": "Event",
            "visibility": "public",
            "static": false,
            "lineNumber": 10,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n * @class Event\n * \n * @param {Object} eventSource  \n * @param {String} verb  \n * @param {Object} data\n */",
            "args": [
              "eventSource",
              "verb",
              "data"
            ],
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function Event(eventSource, verb, data) {",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "class": {
                "tag": "class",
                "line": 2,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Event\n"
              },
              "params": [
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 4,
                  "textStartsOnSameLine": true,
                  "text": "{Object} eventSource"
                },
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{string} verb"
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{Object} data\n"
                }
              ]
            }
          },
          {
            "name": "toString",
            "visibility": "public",
            "static": false,
            "lineNumber": 19,
            "memberOf": "Event.prototype",
            "doclet": "/**\n * @return {string}\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "Event.prototype.toString = function () {",
            "originalJsDocDescription": {
              "return": {
                "tag": "return",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{string}\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "event.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 27
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "fake-yui",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "fake_yui",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'YUI'.",
            "code": "wfJD",
            "evidence": "window.YUI = function () {",
            "line": 3,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'YUI'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'YUIImpl'.",
            "code": "wfJD",
            "evidence": "function YUIImpl() {",
            "line": 4,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'YUIImpl'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'add'.",
            "code": "wfJD",
            "evidence": "add: function (moduleName, handler) {",
            "line": 11,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'add'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'use'.",
            "code": "wfJD",
            "evidence": "use: function (moduleName) {",
            "line": 16,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'use'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'getInstance'.",
            "code": "wfJD",
            "evidence": "function getInstance() {",
            "line": 21,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'getInstance'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/fake-yui.js",
      "folderPath": "test-source/core",
      "fileName": "fake-yui.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "fake-yui",
      "name": "fake_yui",
      "camelName": "FakeYui",
      "processedFilePath": "test-output/core/fake-yui.js",
      "mappedModuleName": "core/fake-yui",
      "couldParseOriginalSource": true,
      "namedConstructors": {},
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/fake-yui",
      "jsDoccerProcData": {
        "lines": 29,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 833,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./fake-yui",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "YUI",
            "visibility": "public",
            "static": false,
            "lineNumber": 3,
            "memberOf": "window",
            "doclet": "/**\n * Y u i.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "window.YUI = function () {",
            "originalJsDocDescription": {}
          },
          {
            "name": "YUIImpl",
            "visibility": "public",
            "static": false,
            "lineNumber": 4,
            "memberOf": "",
            "doclet": "/**\n * Y u i impl.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "function YUIImpl() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "add",
            "visibility": "public",
            "static": false,
            "lineNumber": 11,
            "memberOf": "",
            "doclet": "/**\n * Add.\n * @param moduleName\n * @param handler\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "moduleName",
              "handler"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "add: function (moduleName, handler) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "use",
            "visibility": "public",
            "static": false,
            "lineNumber": 16,
            "memberOf": "",
            "doclet": "/**\n * Use.\n * @param moduleName\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "moduleName"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "use: function (moduleName) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 21,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function getInstance() {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "fake-yui.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 54
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "logger",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "logger",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/logger.js",
      "folderPath": "test-source/core",
      "fileName": "logger.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "logger",
      "name": "logger",
      "camelName": "Logger",
      "processedFilePath": "test-output/core/logger.js",
      "mappedModuleName": "core/logger",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/logger~Logger": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 36,
          "line": "function Logger() {",
          "comment": 5,
          "range": [
            755,
            1662
          ],
          "name": "Logger",
          "commentBody": "/**\n   * Instantiates a new Logger.\n   *\n   * @class Logger\n   * @constructor\n   * @public\n   */",
          "oldComment": {
            "type": "Block",
            "value": "*\n   * Instantiates a new Logger.\n   *\n   * @class Logger\n   * @constructor\n   * @public\n   ",
            "range": [
              656,
              752
            ],
            "commentBody": "/**\n   * Instantiates a new Logger.\n   *\n   * @class Logger\n   * @constructor\n   * @public\n   */",
            "lineNumber": 29
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "tags": [
              {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Logger"
              },
              {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            ],
            "requiresList": [],
            "moduleName": "logger",
            "camelName": "Logger",
            "freeText": "\n Instantiates a new Logger.\n",
            "@constructor": "",
            "@public": "",
            "preamble": "\n Instantiates a new Logger.\n",
            "constructor": "Logger",
            "className": "Logger",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * Instantiates a new Logger.\n * @class Logger\n * @constructor\n * @public\n */"
        }
      },
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/logger",
      "jsDoccerProcData": {
        "lines": 292,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 7012,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./logger",
        "uses_console_log": true,
        "uses_backbone": false,
        "classes": {
          "Logger": 2295
        },
        "methods": [
          {
            "name": "Logger",
            "visibility": "public",
            "static": false,
            "lineNumber": 36,
            "memberOf": "",
            "doclet": "/**\n * Instantiates a new Logger.\n * @class Logger\n * @constructor\n * @public\n */",
            "description": "\n Instantiates a new Logger.\n",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function Logger() {",
            "originalJsDocDescription": {
              "class": {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Logger"
              },
              "constructor": {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "implementLog",
            "visibility": "public",
            "static": false,
            "lineNumber": 50,
            "memberOf": "this",
            "doclet": "/**\n * Call the logger implementation.\n * @memberOf {Logger}\n * @protected\n * @param {Number} logLevel  \n * @param {String} message\n */",
            "args": [
              "logLevel",
              "message"
            ],
            "description": "\n Call the logger implementation.\n",
            "classDeclarationFlag": false,
            "line": "this.implementLog = function (logLevel, message) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "protected": {
                "tag": "protected",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{Number} logLevel"
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "{String} message\n"
                }
              ]
            }
          },
          {
            "name": "trace",
            "visibility": "public",
            "static": false,
            "lineNumber": 134,
            "memberOf": "Logger.prototype",
            "doclet": "/**\n * Trace.\n * @memberOf {Logger}\n * @method trace\n * @public\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Trace.\n",
            "classDeclarationFlag": false,
            "line": "Logger.prototype.trace = function (msg) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "trace"
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "debug",
            "visibility": "public",
            "static": false,
            "lineNumber": 145,
            "memberOf": "Logger.prototype",
            "doclet": "/**\n * Debug.\n * @memberOf {Logger}\n * @method debug\n * @public\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Debug.\n",
            "classDeclarationFlag": false,
            "line": "Logger.prototype.debug = function (msg) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "debug"
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "info",
            "visibility": "public",
            "static": false,
            "lineNumber": 156,
            "memberOf": "Logger.prototype",
            "doclet": "/**\n * Info.\n * @memberOf {Logger}\n * @method info\n * @public\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Info.\n",
            "classDeclarationFlag": false,
            "line": "Logger.prototype.info = function (msg) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "info"
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "warn",
            "visibility": "public",
            "static": false,
            "lineNumber": 167,
            "memberOf": "Logger.prototype",
            "doclet": "/**\n * Warn.\n * @memberOf {Logger}\n * @method warn\n * @public\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Warn.\n",
            "classDeclarationFlag": false,
            "line": "Logger.prototype.warn = function (msg) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "warn"
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "error",
            "visibility": "public",
            "static": false,
            "lineNumber": 178,
            "memberOf": "Logger.prototype",
            "doclet": "/**\n * Error.\n * @memberOf {Logger}\n * @method error\n * @public\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Error.\n",
            "classDeclarationFlag": false,
            "line": "Logger.prototype.error = function (msg) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "error"
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "DefaultLogger",
            "visibility": "public",
            "static": false,
            "lineNumber": 188,
            "memberOf": "",
            "doclet": "/**\n * Instantiates a new DefaultLogger.\n *  This class is built into the Logger class as the default implementation of Logger.\n * @constructor\n * @protected\n */",
            "description": "\n Instantiates a new DefaultLogger.\n This class is built into the Logger class as the default implementation of Logger.\n",
            "classDeclarationFlag": false,
            "line": "function DefaultLogger() {}",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "protected": {
                "tag": "protected",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "log",
            "visibility": "public",
            "static": false,
            "lineNumber": 200,
            "memberOf": "DefaultLogger.prototype",
            "doclet": "/**\n * Write log to JavaScript console.\n *  Handle contingencies.\n * @memberOf {DefaultLogger}\n * @method implementLog\n * @public\n * @param {String} msg  \n * @param {String} level  \n * @return {String} the formatted message.\n */",
            "args": [
              "msg",
              "level"
            ],
            "description": "\n Write log to JavaScript console.\n Handle contingencies.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "DefaultLogger.prototype.log = function (msg, level) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "{DefaultLogger}"
              },
              "method": {
                "tag": "method",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": "implementLog"
              },
              "public": {
                "tag": "public",
                "line": 6,
                "lastLine": 6,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 7,
                  "lastLine": 7,
                  "textStartsOnSameLine": true,
                  "text": "msg {String}"
                },
                {
                  "tag": "param",
                  "line": 8,
                  "lastLine": 8,
                  "textStartsOnSameLine": true,
                  "text": "level {String}"
                }
              ],
              "return": {
                "tag": "return",
                "line": 9,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{String} the formatted message.\n"
              }
            }
          },
          {
            "name": "getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 244,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @memberOf {Logger}\n * @method getInstance\n * @private\n * @return {Logger}\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function getInstance() {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "getInstance"
              },
              "private": {
                "tag": "private",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "return": {
                "tag": "return",
                "line": 6,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Logger}\n"
              }
            }
          },
          {
            "name": "getLevelName",
            "visibility": "public",
            "static": false,
            "lineNumber": 268,
            "memberOf": "",
            "doclet": "/**\n * Get level name.\n * @memberOf {Logger}\n * @method getLevelName\n * @private\n * @param levelNum  \n * @return String level name.\n */",
            "args": [
              "levelNum"
            ],
            "description": "\n Get level name.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function getLevelName(levelNum) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "getLevelName"
              },
              "private": {
                "tag": "private",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": 6,
                  "textStartsOnSameLine": true,
                  "text": "levelNum"
                }
              ],
              "return": {
                "tag": "return",
                "line": 7,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "String level name.\n"
              }
            }
          },
          {
            "name": "trim",
            "visibility": "public",
            "static": false,
            "lineNumber": 285,
            "memberOf": "",
            "doclet": "/**\n * trim.\n * @memberOf {Logger}\n * @method trim\n * @private\n * @param {String} input  \n * @return {String} trimmed text.\n */",
            "args": [
              "input"
            ],
            "description": "\n trim.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function trim(input) {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "trim"
              },
              "private": {
                "tag": "private",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": 6,
                  "textStartsOnSameLine": true,
                  "text": "{String} input"
                }
              ],
              "return": {
                "tag": "return",
                "line": 7,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{String} trimmed text.\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "logger.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 280
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "logger",
            "jquery",
            "backbone",
            "configuration",
            "underscore"
          ],
          "moduleName": "measurement",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "measurement",
          "min": false,
          "main": 0,
          "uses_$": true,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method '_attempt'.",
            "code": "wfJD",
            "evidence": "function _attempt(instance, name, method, args, defaultResult) {",
            "line": 54,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method '_attempt'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'isFunction'.",
            "code": "wfJD",
            "evidence": "var isFunction = function (obj) {",
            "line": 80,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'isFunction'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'on'.",
            "code": "wfJD",
            "evidence": "$.fn.on = function () {",
            "line": 86,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'on'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'newFn'.",
            "code": "wfJD",
            "evidence": "var newFn = function () {",
            "line": 104,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'newFn'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'off'.",
            "code": "wfJD",
            "evidence": "$.fn.off = function () {",
            "line": 115,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'off'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/measurement.js",
      "folderPath": "test-source/core",
      "fileName": "measurement.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "measurement",
      "name": "measurement",
      "camelName": "Measurement",
      "processedFilePath": "test-output/core/measurement.js",
      "mappedModuleName": "core/measurement",
      "couldParseOriginalSource": true,
      "namedConstructors": {
        "core/measurement~Measurement": {
          "todos": [],
          "memberOf": "",
          "returnType": "",
          "ctor": true,
          "lineNumber": 35,
          "line": "function Measurement() {",
          "comment": 2,
          "range": [
            633,
            841
          ],
          "name": "Measurement",
          "commentBody": "/**\n   * Instantiates a new Measurement.\n   *\n   * @class Measurement\n   * @constructor\n   * @public\n   */",
          "oldComment": {
            "type": "Block",
            "value": "*\n   * Instantiates a new Measurement.\n   *\n   * @class Measurement\n   * @constructor\n   * @public\n   ",
            "range": [
              524,
              630
            ],
            "commentBody": "/**\n   * Instantiates a new Measurement.\n   *\n   * @class Measurement\n   * @constructor\n   * @public\n   */",
            "lineNumber": 28
          },
          "ctorType": "@constructor",
          "doclet": {
            "params": [],
            "tags": [
              {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Measurement"
              },
              {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            ],
            "requiresList": [
              "logger",
              "jquery",
              "backbone",
              "configuration",
              "underscore"
            ],
            "moduleName": "measurement",
            "camelName": "Measurement",
            "freeText": "\n Instantiates a new Measurement.\n",
            "@constructor": "",
            "@public": "",
            "preamble": "\n Instantiates a new Measurement.\n",
            "constructor": "Measurement",
            "className": "Measurement",
            "nodeType": "CLASS"
          },
          "jsDoc": "/**\n * Instantiates a new Measurement.\n * @class Measurement\n * @constructor\n * @public\n */"
        }
      },
      "checkForRequiresMismatch": false,
      "preprocessed": true,
      "moduleName": "core/measurement",
      "jsDoccerProcData": {
        "lines": 169,
        "requires": [
          "logger",
          "jquery",
          "backbone",
          "configuration",
          "underscore"
        ],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": true,
        "chars": 4406,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./measurement",
        "uses_console_log": true,
        "uses_backbone": true,
        "classes": {
          "Measurement": 1684
        },
        "methods": [
          {
            "name": "Measurement",
            "visibility": "public",
            "static": false,
            "lineNumber": 35,
            "memberOf": "",
            "doclet": "/**\n * Instantiates a new Measurement.\n * @class Measurement\n * @constructor\n * @public\n */",
            "description": "\n Instantiates a new Measurement.\n",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function Measurement() {",
            "originalJsDocDescription": {
              "class": {
                "tag": "class",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Measurement"
              },
              "constructor": {
                "tag": "constructor",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "public": {
                "tag": "public",
                "line": 5,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "_log",
            "visibility": "public",
            "static": false,
            "lineNumber": 48,
            "memberOf": "",
            "doclet": "/**\n * Log.\n * @method _log\n * @private\n * @param msg\n */",
            "args": [
              "msg"
            ],
            "description": "\n Log.\n",
            "classDeclarationFlag": false,
            "line": "function _log(msg) {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_log"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": -1,
                  "textStartsOnSameLine": true,
                  "text": "msg\n"
                }
              ]
            }
          },
          {
            "name": "_attempt",
            "visibility": "public",
            "static": false,
            "lineNumber": 54,
            "memberOf": "",
            "doclet": "/**\n * Attempt.\n * @param instance\n * @param name\n * @param method\n * @param args\n * @param defaultResult\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "instance",
              "name",
              "method",
              "args",
              "defaultResult"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function _attempt(instance, name, method, args, defaultResult) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "_addJQInstrumentation",
            "visibility": "public",
            "static": false,
            "lineNumber": 78,
            "memberOf": "",
            "doclet": "/**\n * Add instrumentation to jQuery.\n * @method _addJQInstrumentation\n * @private\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "\n Add instrumentation to jQuery.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function _addJQInstrumentation() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_addJQInstrumentation"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "isFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 80,
            "memberOf": "",
            "doclet": "/**\n * Is function.\n * @param obj\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "obj"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "var isFunction = function (obj) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "on",
            "visibility": "public",
            "static": false,
            "lineNumber": 86,
            "memberOf": "$.fn",
            "doclet": "/**\n * On.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "$.fn.on = function () {",
            "originalJsDocDescription": {}
          },
          {
            "name": "newFn",
            "visibility": "public",
            "static": false,
            "lineNumber": 104,
            "memberOf": "",
            "doclet": "/**\n * New fn.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "var newFn = function () {",
            "originalJsDocDescription": {}
          },
          {
            "name": "off",
            "visibility": "public",
            "static": false,
            "lineNumber": 115,
            "memberOf": "$.fn",
            "doclet": "/**\n * Off.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "$.fn.off = function () {",
            "originalJsDocDescription": {}
          },
          {
            "name": "_getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 161,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @method _getInstance\n * @private\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function _getInstance() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "_getInstance"
              },
              "private": {
                "tag": "private",
                "line": 4,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "measurement.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 197
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "profiler",
          "AMD": true,
          "webPath": "/core",
          "convertedName": "profiler",
          "min": false,
          "main": 0,
          "uses_$": false,
          "uses_Y": false,
          "uses_alert": false,
          "strict": false
        }
      },
      "errors": {
        "JSONFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'setSpanOffset'.",
            "code": "wfJD",
            "evidence": "function setSpanOffset(n) {",
            "line": 14,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'setSpanOffset'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'startProfile'.",
            "code": "wfJD",
            "evidence": "function startProfile(label) {",
            "line": 18,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'startProfile'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'stopProfile'.",
            "code": "wfJD",
            "evidence": "function stopProfile(label) {",
            "line": 35,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'stopProfile'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'avgSpan'.",
            "code": "wfJD",
            "evidence": "function avgSpan(spans) {",
            "line": 45,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'avgSpan'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'initProfile'.",
            "code": "wfJD",
            "evidence": "function initProfile() {",
            "line": 57,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'initProfile'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'displayProfiles'.",
            "code": "wfJD",
            "evidence": "function displayProfiles() {",
            "line": 63,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'displayProfiles'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/core/profiler.js",
      "folderPath": "test-source/core",
      "fileName": "profiler.js",
      "modulePaths": {
        "blue": "blue/js"
      },
      "packagePath": "/core",
      "webPath": "/core",
      "libFile": false,
      "min": false,
      "realName": "profiler",
      "name": "profiler",
      "camelName": "Profiler",
      "processedFilePath": "test-output/core/profiler.js",
      "mappedModuleName": "core/profiler",
      "couldParseOriginalSource": true,
      "namedConstructors": {},
      "checkForRequiresMismatch": true,
      "preprocessed": true,
      "moduleName": "core/profiler",
      "jsDoccerProcData": {
        "lines": 118,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 2982,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./profiler",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "setSpanOffset",
            "visibility": "public",
            "static": false,
            "lineNumber": 14,
            "memberOf": "",
            "doclet": "/**\n * Set span offset.\n * @param n\n */",
            "args": [
              "n"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function setSpanOffset(n) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "startProfile",
            "visibility": "public",
            "static": false,
            "lineNumber": 18,
            "memberOf": "",
            "doclet": "/**\n * Start profile.\n * @param label\n */",
            "args": [
              "label"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function startProfile(label) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "stopProfile",
            "visibility": "public",
            "static": false,
            "lineNumber": 35,
            "memberOf": "",
            "doclet": "/**\n * Stop profile.\n * @param label\n */",
            "args": [
              "label"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function stopProfile(label) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "avgSpan",
            "visibility": "public",
            "static": false,
            "lineNumber": 45,
            "memberOf": "",
            "doclet": "/**\n * Avg span.\n * @param spans\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "spans"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function avgSpan(spans) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "initProfile",
            "visibility": "public",
            "static": false,
            "lineNumber": 57,
            "memberOf": "",
            "doclet": "/**\n * Init profile.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "function initProfile() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "displayProfiles",
            "visibility": "public",
            "static": false,
            "lineNumber": 63,
            "memberOf": "",
            "doclet": "/**\n * Display profiles.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function displayProfiles() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "getInstance",
            "visibility": "public",
            "static": false,
            "lineNumber": 103,
            "memberOf": "",
            "doclet": "/**\n * Get instance.\n * @memberOf {Logger}\n * @method getInstance\n * @private\n * @return {Logger}\n */",
            "description": "\n Get instance.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function getInstance() {",
            "originalJsDocDescription": {
              "memberOf": {
                "tag": "memberOf",
                "line": 3,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "{Logger}"
              },
              "method": {
                "tag": "method",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": "getInstance"
              },
              "private": {
                "tag": "private",
                "line": 5,
                "lastLine": 5,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "return": {
                "tag": "return",
                "line": 6,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Logger}\n"
              }
            }
          }
        ],
        "is_module": true,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/btremblay/jsdoc-prep/test-source/core",
        "fileName": "profiler.js",
        "strict": false,
        "min": false,
        "main": 0
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 137
    }
  ],
  "path": "test-source",
  "timeInSeconds": 2.299,
  "outPath": "test-output",
  "testPath": "test-jstests",
  "docPath": "test-jsdocs",
  "resultsPath": "test-results"
}