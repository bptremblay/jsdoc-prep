{
  "results": [
    {
      "results": {
        "amdProc": {
          "requires": [
            "jquery"
          ],
          "moduleName": "account_details_header",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'accountDetailsHeaderView'.",
            "code": "wfJD",
            "evidence": "return function accountDetailsHeaderView() {",
            "line": 3,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'accountDetailsHeaderView'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'init'.",
            "code": "wfJD",
            "evidence": "this.init = function() {",
            "line": 8,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'init'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/accountDetailsHeader.js",
      "folderPath": "test-source",
      "fileName": "accountDetailsHeader.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "account_details_header",
      "name": "account_details_header",
      "camelName": "AccountDetailsHeader",
      "processedFilePath": "test-output/accountDetailsHeader.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "rewrittenReturnBody": "return /** @constructor */\nfunction AccountDetailsHeaderView() {\n    this.bridge = this.createBridge(require('dashboard/view/webspec/myAccounts/accountDetailsHeader'));\n    this.template = require('dashboard/template/myAccounts/accountDetailsHeaderShared');\n    /**\n     * Init.\n     */\n    this.init = function () {\n      this.bridge.on('state/asOfDateHide', function () {\n        $('#accountUpdateDate').hide();\n      });\n    };\n  };",
      "rewrittenReturnBodyNode": {
        "type": "ReturnStatement",
        "argument": {
          "type": "FunctionExpression",
          "id": {
            "type": "Identifier",
            "name": "accountDetailsHeaderView",
            "range": [
              92,
              116
            ],
            "parentNode": 638,
            "uid": 639
          },
          "params": [],
          "defaults": [],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        125,
                        129
                      ],
                      "parentNode": 643,
                      "uid": 644
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "bridge",
                      "range": [
                        130,
                        136
                      ],
                      "parentNode": 643,
                      "uid": 645
                    },
                    "range": [
                      125,
                      136
                    ],
                    "parentNode": 642,
                    "uid": 643
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ThisExpression",
                        "range": [
                          139,
                          143
                        ],
                        "parentNode": 647,
                        "uid": 648
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "createBridge",
                        "range": [
                          144,
                          156
                        ],
                        "parentNode": 647,
                        "uid": 649
                      },
                      "range": [
                        139,
                        156
                      ],
                      "parentNode": 646,
                      "uid": 647
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "require",
                          "range": [
                            157,
                            164
                          ],
                          "parentNode": 650,
                          "uid": 651
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "dashboard/view/webspec/myAccounts/accountDetailsHeader",
                            "raw": "'dashboard/view/webspec/myAccounts/accountDetailsHeader'",
                            "range": [
                              165,
                              221
                            ],
                            "parentNode": 650,
                            "uid": 652
                          }
                        ],
                        "range": [
                          157,
                          222
                        ],
                        "parentNode": 646,
                        "uid": 650
                      }
                    ],
                    "range": [
                      139,
                      223
                    ],
                    "parentNode": 642,
                    "uid": 646
                  },
                  "range": [
                    125,
                    223
                  ],
                  "parentNode": 641,
                  "uid": 642
                },
                "range": [
                  125,
                  224
                ],
                "parentNode": 640,
                "uid": 641
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        229,
                        233
                      ],
                      "parentNode": 655,
                      "uid": 656
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "template",
                      "range": [
                        234,
                        242
                      ],
                      "parentNode": 655,
                      "uid": 657
                    },
                    "range": [
                      229,
                      242
                    ],
                    "parentNode": 654,
                    "uid": 655
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "require",
                      "range": [
                        245,
                        252
                      ],
                      "parentNode": 658,
                      "uid": 659
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "dashboard/template/myAccounts/accountDetailsHeaderShared",
                        "raw": "'dashboard/template/myAccounts/accountDetailsHeaderShared'",
                        "range": [
                          253,
                          311
                        ],
                        "parentNode": 658,
                        "uid": 660
                      }
                    ],
                    "range": [
                      245,
                      312
                    ],
                    "parentNode": 654,
                    "uid": 658
                  },
                  "range": [
                    229,
                    312
                  ],
                  "parentNode": 653,
                  "uid": 654
                },
                "range": [
                  229,
                  313
                ],
                "parentNode": 640,
                "uid": 653
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        347,
                        351
                      ],
                      "parentNode": 663,
                      "uid": 664
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "init",
                      "range": [
                        352,
                        356
                      ],
                      "parentNode": 663,
                      "uid": 665
                    },
                    "range": [
                      347,
                      356
                    ],
                    "parentNode": 662,
                    "uid": 663
                  },
                  "right": {
                    "type": "FunctionExpression",
                    "id": null,
                    "params": [],
                    "defaults": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression",
                                  "range": [
                                    379,
                                    383
                                  ],
                                  "parentNode": 671,
                                  "uid": 672
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "bridge",
                                  "range": [
                                    384,
                                    390
                                  ],
                                  "parentNode": 671,
                                  "uid": 673
                                },
                                "range": [
                                  379,
                                  390
                                ],
                                "parentNode": 670,
                                "uid": 671
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "on",
                                "range": [
                                  391,
                                  393
                                ],
                                "parentNode": 670,
                                "uid": 674
                              },
                              "range": [
                                379,
                                393
                              ],
                              "parentNode": 669,
                              "uid": 670
                            },
                            "arguments": [
                              {
                                "type": "Literal",
                                "value": "state/asOfDateHide",
                                "raw": "'state/asOfDateHide'",
                                "range": [
                                  394,
                                  414
                                ],
                                "parentNode": 669,
                                "uid": 675
                              },
                              {
                                "type": "FunctionExpression",
                                "id": null,
                                "params": [],
                                "defaults": [],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "$",
                                              "range": [
                                                438,
                                                439
                                              ],
                                              "parentNode": 681,
                                              "uid": 682
                                            },
                                            "arguments": [
                                              {
                                                "type": "Literal",
                                                "value": "#accountUpdateDate",
                                                "raw": "'#accountUpdateDate'",
                                                "range": [
                                                  440,
                                                  460
                                                ],
                                                "parentNode": 681,
                                                "uid": 683
                                              }
                                            ],
                                            "range": [
                                              438,
                                              461
                                            ],
                                            "parentNode": 680,
                                            "uid": 681
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "hide",
                                            "range": [
                                              462,
                                              466
                                            ],
                                            "parentNode": 680,
                                            "uid": 684
                                          },
                                          "range": [
                                            438,
                                            466
                                          ],
                                          "parentNode": 679,
                                          "uid": 680
                                        },
                                        "arguments": [],
                                        "range": [
                                          438,
                                          468
                                        ],
                                        "parentNode": 678,
                                        "uid": 679
                                      },
                                      "range": [
                                        438,
                                        469
                                      ],
                                      "parentNode": 677,
                                      "uid": 678
                                    }
                                  ],
                                  "range": [
                                    428,
                                    477
                                  ],
                                  "parentNode": 676,
                                  "uid": 677
                                },
                                "rest": null,
                                "generator": false,
                                "expression": false,
                                "range": [
                                  416,
                                  477
                                ],
                                "parentNode": 669,
                                "uid": 676,
                                "returnType": ""
                              }
                            ],
                            "range": [
                              379,
                              478
                            ],
                            "parentNode": 668,
                            "uid": 669
                          },
                          "range": [
                            379,
                            479
                          ],
                          "parentNode": 667,
                          "uid": 668
                        }
                      ],
                      "range": [
                        371,
                        485
                      ],
                      "parentNode": 666,
                      "uid": 667
                    },
                    "rest": null,
                    "generator": false,
                    "expression": false,
                    "range": [
                      359,
                      485
                    ],
                    "parentNode": 662,
                    "uid": 666,
                    "returnType": ""
                  },
                  "range": [
                    347,
                    485
                  ],
                  "parentNode": 661,
                  "uid": 662
                },
                "range": [
                  347,
                  486
                ],
                "parentNode": 640,
                "uid": 661
              }
            ],
            "range": [
              119,
              490
            ],
            "parentNode": 638,
            "uid": 640
          },
          "rest": null,
          "generator": false,
          "expression": false,
          "range": [
            83,
            490
          ],
          "parentNode": 637,
          "uid": 638,
          "returnType": ""
        },
        "range": [
          76,
          491
        ],
        "parentNode": 636,
        "uid": 637,
        "returnType": ""
      },
      "jsDoccerProcData": {
        "lines": 17,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 423,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./accountDetailsHeader",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "accountDetailsHeaderView",
            "visibility": "public",
            "static": false,
            "lineNumber": 3,
            "memberOf": "",
            "doclet": "/**\n * Account details header view.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "return function accountDetailsHeaderView() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "init",
            "visibility": "public",
            "static": false,
            "lineNumber": 8,
            "memberOf": "this",
            "doclet": "/**\n * Init.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "this.init = function() {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "accountDetailsHeader.js",
        "strict": false
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 18
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "context",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [
          {
            "id": "(error)",
            "raw": "Bad character(s) found.",
            "code": "wfBC",
            "evidence": "",
            "line": -1,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "Bad character(s) found: ''\\t''."
          }
        ],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'ChildContext'.",
            "code": "wfJD",
            "evidence": "this.ChildContext = function ChildContext() {",
            "line": 74,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'ChildContext'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/context.js",
      "folderPath": "test-source",
      "fileName": "context.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "context",
      "name": "context",
      "camelName": "Context",
      "processedFilePath": "test-output/context.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "jsDoccerProcData": {
        "lines": 100,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 2516,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./context",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "Context": 818,
          "ChildContext": 903
        },
        "methods": [
          {
            "name": "Context",
            "visibility": "public",
            "static": false,
            "lineNumber": 15,
            "memberOf": "",
            "doclet": "/**\n * @constructs module:fluffy/context\n * @augments {null}\n * \n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "constructor: function Context() {",
            "originalJsDocDescription": {
              "constructs": {
                "tag": "constructs",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": "module:fluffy/context"
              },
              "augments": {
                "tag": "augments",
                "line": 2,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{null}\n"
              }
            }
          },
          {
            "name": "newChild",
            "visibility": "public",
            "static": false,
            "lineNumber": 61,
            "memberOf": "",
            "doclet": "/**\n * @function\n * @param {Boolean} [isolate] Whether or not to isolate the child context from the parent context. \n * @return {Context} The child context.\n */",
            "args": [
              "isolate"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "newChild: function(isolate) {",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 2,
                  "textStartsOnSameLine": true,
                  "text": "{Boolean} [isolate] Whether or not to isolate the child context from the parent context."
                }
              ],
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{Context} The child context.\n"
              }
            }
          },
          {
            "name": "ChildContext",
            "visibility": "public",
            "static": false,
            "lineNumber": 74,
            "memberOf": "",
            "doclet": "/**\n * Creates a new instance of class ChildContext.\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "this.ChildContext = function ChildContext() {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "context.js",
        "strict": false
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 87
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "deposit_accounts",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [
          {
            "id": "(error)",
            "raw": "Bad character(s) found.",
            "code": "wfBC",
            "evidence": "",
            "line": -1,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "Bad character(s) found: ''\\t''."
          }
        ],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'init'.",
            "code": "wfJD",
            "evidence": "init: function() {",
            "line": 6,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'init'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'requestAccountInformation'.",
            "code": "wfJD",
            "evidence": "requestAccountInformation: function() {",
            "line": 9,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'requestAccountInformation'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'requestAccountSummary'.",
            "code": "wfJD",
            "evidence": "requestAccountSummary: function(updatedInfo) {",
            "line": 25,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'requestAccountSummary'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/depositAccounts.js",
      "folderPath": "test-source",
      "fileName": "depositAccounts.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "deposit_accounts",
      "name": "deposit_accounts",
      "camelName": "DepositAccounts",
      "processedFilePath": "test-output/depositAccounts.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "rewrittenReturnBody": "return /**@alias module:depositAccounts */ {\n    /**\n     * Init.\n     */\n    init: function () {\n      context = this.settings.context;\n    },\n    /**\n     * Request account information.\n     */\n    requestAccountInformation: function () {\n      var data = context.dataTransform.accountModelData(this.model.get());\n      context.appChannel.emit('getDetails', data);\n      if (data.detailType !== 'CDA' && data.detailType !== 'IRA') {\n        context.appChannel.emit('setAccountActivity', data);\n      }\n      //Add Active class\n      this.output.emit('state', {\n        target: this,\n        value: 'makeAsActive',\n        accountId: data.accountId\n      });\n    },\n    /**\n     * Request account summary.\n     * @param updatedInfo\n     */\n    requestAccountSummary: function (updatedInfo) {\n      this.accountBalance = updatedInfo.accountBalance;\n    }\n  };",
      "rewrittenReturnBodyNode": {
        "type": "ReturnStatement",
        "argument": {
          "type": "ObjectExpression",
          "properties": [
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "init",
                "range": [
                  94,
                  98
                ],
                "parentNode": 1131,
                "uid": 1132
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "context",
                          "range": [
                            120,
                            127
                          ],
                          "parentNode": 1136,
                          "uid": 1137
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression",
                              "range": [
                                130,
                                134
                              ],
                              "parentNode": 1139,
                              "uid": 1140
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "settings",
                              "range": [
                                135,
                                143
                              ],
                              "parentNode": 1139,
                              "uid": 1141
                            },
                            "range": [
                              130,
                              143
                            ],
                            "parentNode": 1138,
                            "uid": 1139
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "context",
                            "range": [
                              144,
                              151
                            ],
                            "parentNode": 1138,
                            "uid": 1142
                          },
                          "range": [
                            130,
                            151
                          ],
                          "parentNode": 1136,
                          "uid": 1138
                        },
                        "range": [
                          120,
                          151
                        ],
                        "parentNode": 1135,
                        "uid": 1136
                      },
                      "range": [
                        120,
                        152
                      ],
                      "parentNode": 1134,
                      "uid": 1135
                    }
                  ],
                  "range": [
                    112,
                    158
                  ],
                  "parentNode": 1133,
                  "uid": 1134
                },
                "rest": null,
                "generator": false,
                "expression": false,
                "range": [
                  100,
                  158
                ],
                "parentNode": 1131,
                "uid": 1133,
                "returnType": ""
              },
              "kind": "init",
              "range": [
                94,
                158
              ],
              "parentNode": 1130,
              "uid": 1131
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "requestAccountInformation",
                "range": [
                  216,
                  241
                ],
                "parentNode": 1143,
                "uid": 1144
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "data",
                            "range": [
                              267,
                              271
                            ],
                            "parentNode": 1148,
                            "uid": 1149
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "context",
                                  "range": [
                                    274,
                                    281
                                  ],
                                  "parentNode": 1152,
                                  "uid": 1153
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "dataTransform",
                                  "range": [
                                    282,
                                    295
                                  ],
                                  "parentNode": 1152,
                                  "uid": 1154
                                },
                                "range": [
                                  274,
                                  295
                                ],
                                "parentNode": 1151,
                                "uid": 1152
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "accountModelData",
                                "range": [
                                  296,
                                  312
                                ],
                                "parentNode": 1151,
                                "uid": 1155
                              },
                              "range": [
                                274,
                                312
                              ],
                              "parentNode": 1150,
                              "uid": 1151
                            },
                            "arguments": [
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression",
                                      "range": [
                                        313,
                                        317
                                      ],
                                      "parentNode": 1158,
                                      "uid": 1159
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "model",
                                      "range": [
                                        318,
                                        323
                                      ],
                                      "parentNode": 1158,
                                      "uid": 1160
                                    },
                                    "range": [
                                      313,
                                      323
                                    ],
                                    "parentNode": 1157,
                                    "uid": 1158
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "get",
                                    "range": [
                                      324,
                                      327
                                    ],
                                    "parentNode": 1157,
                                    "uid": 1161
                                  },
                                  "range": [
                                    313,
                                    327
                                  ],
                                  "parentNode": 1156,
                                  "uid": 1157
                                },
                                "arguments": [],
                                "range": [
                                  313,
                                  329
                                ],
                                "parentNode": 1150,
                                "uid": 1156
                              }
                            ],
                            "range": [
                              274,
                              330
                            ],
                            "parentNode": 1148,
                            "uid": 1150
                          },
                          "range": [
                            267,
                            330
                          ],
                          "parentNode": 1147,
                          "uid": 1148
                        }
                      ],
                      "kind": "var",
                      "range": [
                        263,
                        331
                      ],
                      "parentNode": 1146,
                      "uid": 1147
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "context",
                              "range": [
                                338,
                                345
                              ],
                              "parentNode": 1165,
                              "uid": 1166
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "appChannel",
                              "range": [
                                346,
                                356
                              ],
                              "parentNode": 1165,
                              "uid": 1167
                            },
                            "range": [
                              338,
                              356
                            ],
                            "parentNode": 1164,
                            "uid": 1165
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "emit",
                            "range": [
                              357,
                              361
                            ],
                            "parentNode": 1164,
                            "uid": 1168
                          },
                          "range": [
                            338,
                            361
                          ],
                          "parentNode": 1163,
                          "uid": 1164
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "getDetails",
                            "raw": "'getDetails'",
                            "range": [
                              362,
                              374
                            ],
                            "parentNode": 1163,
                            "uid": 1169
                          },
                          {
                            "type": "Identifier",
                            "name": "data",
                            "range": [
                              376,
                              380
                            ],
                            "parentNode": 1163,
                            "uid": 1170
                          }
                        ],
                        "range": [
                          338,
                          381
                        ],
                        "parentNode": 1162,
                        "uid": 1163
                      },
                      "range": [
                        338,
                        382
                      ],
                      "parentNode": 1146,
                      "uid": 1162
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data",
                              "range": [
                                393,
                                397
                              ],
                              "parentNode": 1174,
                              "uid": 1175
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "detailType",
                              "range": [
                                398,
                                408
                              ],
                              "parentNode": 1174,
                              "uid": 1176
                            },
                            "range": [
                              393,
                              408
                            ],
                            "parentNode": 1173,
                            "uid": 1174
                          },
                          "right": {
                            "type": "Literal",
                            "value": "CDA",
                            "raw": "'CDA'",
                            "range": [
                              413,
                              418
                            ],
                            "parentNode": 1173,
                            "uid": 1177
                          },
                          "range": [
                            393,
                            418
                          ],
                          "parentNode": 1172,
                          "uid": 1173
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data",
                              "range": [
                                422,
                                426
                              ],
                              "parentNode": 1179,
                              "uid": 1180
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "detailType",
                              "range": [
                                427,
                                437
                              ],
                              "parentNode": 1179,
                              "uid": 1181
                            },
                            "range": [
                              422,
                              437
                            ],
                            "parentNode": 1178,
                            "uid": 1179
                          },
                          "right": {
                            "type": "Literal",
                            "value": "IRA",
                            "raw": "'IRA'",
                            "range": [
                              442,
                              447
                            ],
                            "parentNode": 1178,
                            "uid": 1182
                          },
                          "range": [
                            422,
                            447
                          ],
                          "parentNode": 1172,
                          "uid": 1178
                        },
                        "range": [
                          393,
                          447
                        ],
                        "parentNode": 1171,
                        "uid": 1172
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "context",
                                    "range": [
                                      459,
                                      466
                                    ],
                                    "parentNode": 1187,
                                    "uid": 1188
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "appChannel",
                                    "range": [
                                      467,
                                      477
                                    ],
                                    "parentNode": 1187,
                                    "uid": 1189
                                  },
                                  "range": [
                                    459,
                                    477
                                  ],
                                  "parentNode": 1186,
                                  "uid": 1187
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "emit",
                                  "range": [
                                    478,
                                    482
                                  ],
                                  "parentNode": 1186,
                                  "uid": 1190
                                },
                                "range": [
                                  459,
                                  482
                                ],
                                "parentNode": 1185,
                                "uid": 1186
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": "setAccountActivity",
                                  "raw": "'setAccountActivity'",
                                  "range": [
                                    483,
                                    503
                                  ],
                                  "parentNode": 1185,
                                  "uid": 1191
                                },
                                {
                                  "type": "Identifier",
                                  "name": "data",
                                  "range": [
                                    505,
                                    509
                                  ],
                                  "parentNode": 1185,
                                  "uid": 1192
                                }
                              ],
                              "range": [
                                459,
                                510
                              ],
                              "parentNode": 1184,
                              "uid": 1185
                            },
                            "range": [
                              459,
                              511
                            ],
                            "parentNode": 1183,
                            "uid": 1184
                          }
                        ],
                        "range": [
                          449,
                          519
                        ],
                        "parentNode": 1171,
                        "uid": 1183
                      },
                      "alternate": null,
                      "range": [
                        389,
                        519
                      ],
                      "parentNode": 1146,
                      "uid": 1171
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression",
                              "range": [
                                551,
                                555
                              ],
                              "parentNode": 1196,
                              "uid": 1197
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "output",
                              "range": [
                                556,
                                562
                              ],
                              "parentNode": 1196,
                              "uid": 1198
                            },
                            "range": [
                              551,
                              562
                            ],
                            "parentNode": 1195,
                            "uid": 1196
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "emit",
                            "range": [
                              563,
                              567
                            ],
                            "parentNode": 1195,
                            "uid": 1199
                          },
                          "range": [
                            551,
                            567
                          ],
                          "parentNode": 1194,
                          "uid": 1195
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "state",
                            "raw": "'state'",
                            "range": [
                              568,
                              575
                            ],
                            "parentNode": 1194,
                            "uid": 1200
                          },
                          {
                            "type": "ObjectExpression",
                            "properties": [
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Identifier",
                                  "name": "target",
                                  "range": [
                                    587,
                                    593
                                  ],
                                  "parentNode": 1202,
                                  "uid": 1203
                                },
                                "value": {
                                  "type": "ThisExpression",
                                  "range": [
                                    595,
                                    599
                                  ],
                                  "parentNode": 1202,
                                  "uid": 1204
                                },
                                "kind": "init",
                                "range": [
                                  587,
                                  599
                                ],
                                "parentNode": 1201,
                                "uid": 1202
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Identifier",
                                  "name": "value",
                                  "range": [
                                    609,
                                    614
                                  ],
                                  "parentNode": 1205,
                                  "uid": 1206
                                },
                                "value": {
                                  "type": "Literal",
                                  "value": "makeAsActive",
                                  "raw": "'makeAsActive'",
                                  "range": [
                                    616,
                                    630
                                  ],
                                  "parentNode": 1205,
                                  "uid": 1207
                                },
                                "kind": "init",
                                "range": [
                                  609,
                                  630
                                ],
                                "parentNode": 1201,
                                "uid": 1205
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Identifier",
                                  "name": "accountId",
                                  "range": [
                                    640,
                                    649
                                  ],
                                  "parentNode": 1208,
                                  "uid": 1209
                                },
                                "value": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "data",
                                    "range": [
                                      651,
                                      655
                                    ],
                                    "parentNode": 1210,
                                    "uid": 1211
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "accountId",
                                    "range": [
                                      656,
                                      665
                                    ],
                                    "parentNode": 1210,
                                    "uid": 1212
                                  },
                                  "range": [
                                    651,
                                    665
                                  ],
                                  "parentNode": 1208,
                                  "uid": 1210
                                },
                                "kind": "init",
                                "range": [
                                  640,
                                  665
                                ],
                                "parentNode": 1201,
                                "uid": 1208
                              }
                            ],
                            "range": [
                              577,
                              673
                            ],
                            "parentNode": 1194,
                            "uid": 1201
                          }
                        ],
                        "range": [
                          551,
                          674
                        ],
                        "parentNode": 1193,
                        "uid": 1194
                      },
                      "range": [
                        551,
                        675
                      ],
                      "parentNode": 1146,
                      "uid": 1193
                    }
                  ],
                  "range": [
                    255,
                    681
                  ],
                  "parentNode": 1145,
                  "uid": 1146
                },
                "rest": null,
                "generator": false,
                "expression": false,
                "range": [
                  243,
                  681
                ],
                "parentNode": 1143,
                "uid": 1145,
                "returnType": ""
              },
              "kind": "init",
              "range": [
                216,
                681
              ],
              "parentNode": 1130,
              "uid": 1143
            },
            {
              "type": "Property",
              "key": {
                "type": "Identifier",
                "name": "requestAccountSummary",
                "range": [
                  761,
                  782
                ],
                "parentNode": 1213,
                "uid": 1214
              },
              "value": {
                "type": "FunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "updatedInfo",
                    "range": [
                      794,
                      805
                    ],
                    "parentNode": 1215,
                    "uid": 1216
                  }
                ],
                "defaults": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "ThisExpression",
                            "range": [
                              815,
                              819
                            ],
                            "parentNode": 1220,
                            "uid": 1221
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "accountBalance",
                            "range": [
                              820,
                              834
                            ],
                            "parentNode": 1220,
                            "uid": 1222
                          },
                          "range": [
                            815,
                            834
                          ],
                          "parentNode": 1219,
                          "uid": 1220
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "updatedInfo",
                            "range": [
                              837,
                              848
                            ],
                            "parentNode": 1223,
                            "uid": 1224
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "accountBalance",
                            "range": [
                              849,
                              863
                            ],
                            "parentNode": 1223,
                            "uid": 1225
                          },
                          "range": [
                            837,
                            863
                          ],
                          "parentNode": 1219,
                          "uid": 1223
                        },
                        "range": [
                          815,
                          863
                        ],
                        "parentNode": 1218,
                        "uid": 1219
                      },
                      "range": [
                        815,
                        864
                      ],
                      "parentNode": 1217,
                      "uid": 1218
                    }
                  ],
                  "range": [
                    807,
                    870
                  ],
                  "parentNode": 1215,
                  "uid": 1217
                },
                "rest": null,
                "generator": false,
                "expression": false,
                "range": [
                  784,
                  870
                ],
                "parentNode": 1213,
                "uid": 1215,
                "returnType": ""
              },
              "kind": "init",
              "range": [
                761,
                870
              ],
              "parentNode": 1130,
              "uid": 1213
            }
          ],
          "range": [
            59,
            874
          ],
          "parentNode": 1129,
          "uid": 1130
        },
        "range": [
          52,
          875
        ],
        "parentNode": 1124,
        "uid": 1129,
        "returnType": ""
      },
      "jsDoccerProcData": {
        "lines": 29,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 725,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./depositAccounts",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "init",
            "visibility": "public",
            "static": false,
            "lineNumber": 6,
            "memberOf": "",
            "doclet": "/**\n * Init.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "init: function() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "requestAccountInformation",
            "visibility": "public",
            "static": false,
            "lineNumber": 9,
            "memberOf": "",
            "doclet": "/**\n * Request account information.\n */",
            "description": "",
            "classDeclarationFlag": false,
            "line": "requestAccountInformation: function() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "requestAccountSummary",
            "visibility": "public",
            "static": false,
            "lineNumber": 25,
            "memberOf": "",
            "doclet": "/**\n * Request account summary.\n * @param updatedInfo\n */",
            "args": [
              "updatedInfo"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "requestAccountSummary: function(updatedInfo) {",
            "originalJsDocDescription": {}
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "depositAccounts.js",
        "strict": false
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 34
    },
    {
      "results": {
        "amdProc": {
          "requires": [
            "jquery",
            "messages"
          ],
          "moduleName": "tab_panel",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": []
      },
      "outputDirectory": "test-output",
      "path": "test-source/tab_panel.js",
      "folderPath": "test-source",
      "fileName": "tab_panel.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "tab_panel",
      "name": "tab_panel",
      "camelName": "TabPanel",
      "processedFilePath": "test-output/tab_panel.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "jsDoccerProcData": {
        "lines": 19,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 253,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./tab_panel",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "TabPanel": 68
        },
        "methods": [
          {
            "name": "TabPanel",
            "visibility": "public",
            "static": false,
            "lineNumber": 14,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function TabPanel() {",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "tab_panel.js",
        "strict": false
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 16
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "test",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'Freenox'.",
            "code": "wfJD",
            "evidence": "function Freenox() {",
            "line": 21,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'Freenox'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'chewBakka'.",
            "code": "wfJD",
            "evidence": "this.chewBakka = function() {",
            "line": 22,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'chewBakka'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'DonutView'.",
            "code": "wfJD",
            "evidence": "return function DonutView() {",
            "line": 23,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'DonutView'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'stupidFunction'.",
            "code": "wfJD",
            "evidence": "this[\"stupidFunction\"] = function() {",
            "line": 34,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'stupidFunction'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'worldPuzzle'.",
            "code": "wfJD",
            "evidence": "Freenox.prototype.worldPuzzle = function(toothache, tomato) {",
            "line": 62,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'worldPuzzle'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'SecondClass'.",
            "code": "wfJD",
            "evidence": "function SecondClass() {",
            "line": 67,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'SecondClass'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'fixTheWorld'.",
            "code": "wfJD",
            "evidence": "SecondClass.prototype.fixTheWorld = function(toothache, tomato) {",
            "line": 70,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'fixTheWorld'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/test.js",
      "folderPath": "test-source",
      "fileName": "test.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "test",
      "name": "test",
      "camelName": "Test",
      "processedFilePath": "test-output/test.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "jsDoccerProcData": {
        "lines": 188,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 4929,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./test",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {
          "DonutView": 1108,
          "Freenox": 672,
          "SecondClass": 735,
          "ThirdClass": 771,
          "FourthClass": 791
        },
        "methods": [
          {
            "name": "Freenox",
            "visibility": "public",
            "static": false,
            "lineNumber": 21,
            "memberOf": "",
            "doclet": "/**\n * Creates a new instance of class Freenox.\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function Freenox() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "chewBakka",
            "visibility": "public",
            "static": false,
            "lineNumber": 22,
            "memberOf": "this",
            "doclet": "/**\n * Chew bakka.\n * @return {function}\n */",
            "description": "",
            "return": "{function}",
            "classDeclarationFlag": false,
            "line": "this.chewBakka = function() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "DonutView",
            "visibility": "public",
            "static": false,
            "lineNumber": 23,
            "memberOf": "",
            "doclet": "/**\n * Creates a new instance of class DonutView.\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "return function DonutView() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "stupidFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 34,
            "memberOf": "this",
            "doclet": "/**\n * The function is stupid but the comment is a valid doclet.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "\n The function is stupid but the comment is a valid doclet.\n",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "this[\"stupidFunction\"] = function() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "privateFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 51,
            "memberOf": "",
            "doclet": "/**\n * @private\n * @param a  \n * @param {Banana}  \n * @param {boolean}  \n * @return {String}\n */",
            "args": [
              "a",
              "b",
              "c"
            ],
            "description": "",
            "return": "{string}",
            "classDeclarationFlag": false,
            "line": "var privateFunction = function(a, b, c) {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 2,
                  "lastLine": 3,
                  "textStartsOnSameLine": true,
                  "text": "a\n            A standard apple fruit."
                },
                {
                  "tag": "param",
                  "line": 4,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{Banana}\n            b The Banana."
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": 7,
                  "textStartsOnSameLine": true,
                  "text": "{boolean}\n            c"
                }
              ],
              "return": {
                "tag": "return",
                "line": 8,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{String}\n"
              }
            }
          },
          {
            "name": "worldPuzzle",
            "visibility": "public",
            "static": false,
            "lineNumber": 62,
            "memberOf": "Freenox.prototype",
            "doclet": "/**\n * @param toothache\n * @param tomato\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "toothache",
              "tomato"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "Freenox.prototype.worldPuzzle = function(toothache, tomato) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "SecondClass",
            "visibility": "public",
            "static": false,
            "lineNumber": 67,
            "memberOf": "",
            "doclet": "/**\n * Creates a new instance of class SecondClass.\n * @constructor\n */",
            "description": "",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function SecondClass() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "fixTheWorld",
            "visibility": "public",
            "static": false,
            "lineNumber": 70,
            "memberOf": "SecondClass.prototype",
            "doclet": "/**\n * Fix the world.\n * @param toothache\n * @param tomato\n * @return {boolean}\n */",
            "args": [
              "toothache",
              "tomato"
            ],
            "description": "",
            "return": "{boolean}",
            "classDeclarationFlag": false,
            "line": "SecondClass.prototype.fixTheWorld = function(toothache, tomato) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "preambleTest",
            "visibility": "public",
            "static": false,
            "lineNumber": 79,
            "memberOf": "SecondClass.prototype",
            "doclet": "/**\n * This is a preamble to a doclet.\n *  It might have more than one line.\n * @param toothache\n * @param tomato\n * @return {boolean}\n */",
            "args": [
              "toothache",
              "tomato"
            ],
            "description": "\n This is a preamble to a doclet.\n It might have more than one line.",
            "return": "{boolean}",
            "classDeclarationFlag": false,
            "line": "SecondClass.prototype.preambleTest = function(toothache, tomato) {",
            "originalJsDocDescription": {
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{boolean}\n"
              }
            }
          },
          {
            "name": "ThirdClass",
            "visibility": "public",
            "static": false,
            "lineNumber": 87,
            "memberOf": "",
            "doclet": "/**\n * @constructor\n * @description A description tag.\n * \n */",
            "description": "A description tag.\n",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function ThirdClass() {",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 1,
                "lastLine": 1,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "description": {
                "tag": "description",
                "line": 2,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "A description tag.\n"
              }
            }
          },
          {
            "name": "FourthClass",
            "visibility": "public",
            "static": false,
            "lineNumber": 117,
            "memberOf": "",
            "doclet": "/**\n * This is a preamble description that comes before the real description.\n * @constructor\n * @description A description tag with more than\n *  one line of stuff\n *  and some of it could be very very long\n * \n *  and some of it could be after a BLANK line.\n * @example \n *  //This is sample code!\n *  var ft = new FourthClass();\n *  //Note we are using a zero-arg constructor.\n * \n */",
            "description": "\n This is a preamble description that comes before the real description.\nA description tag with more than\n one line of stuff\n and some of it could be very very long\n\n and some of it could be after a BLANK line.",
            "return": "",
            "classDeclarationFlag": true,
            "line": "function FourthClass() {",
            "originalJsDocDescription": {
              "constructor": {
                "tag": "constructor",
                "line": 2,
                "lastLine": 2,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "description": {
                "tag": "description",
                "line": 3,
                "lastLine": 7,
                "textStartsOnSameLine": true,
                "text": "A description tag with more than\n one line of stuff\n and some of it could be very very long\n\n and some of it could be after a BLANK line."
              },
              "example": {
                "tag": "example",
                "line": 8,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n //This is sample code!\n var ft = new FourthClass();\n //Note we are using a zero-arg constructor.\n"
              }
            }
          },
          {
            "name": "someFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 125,
            "memberOf": "FourthClass.prototype",
            "doclet": "/**\n * Redundant 'function' tag.\n * @function\n * @return {boolean}\n */",
            "description": "\n Redundant 'function' tag.",
            "return": "{boolean}",
            "classDeclarationFlag": false,
            "line": "FourthClass.prototype.someFunction = function() {",
            "originalJsDocDescription": {
              "function": {
                "tag": "function",
                "line": 2,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "anotherFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 134,
            "memberOf": "FourthClass.prototype",
            "doclet": "/**\n * Redundant 'method' tag. Used more by YUIDoc.\n * @method\n * @return {number}\n */",
            "description": "\n Redundant 'method' tag. Used more by YUIDoc.",
            "return": "{number}",
            "classDeclarationFlag": false,
            "line": "FourthClass.prototype.anotherFunction = function() {",
            "originalJsDocDescription": {
              "method": {
                "tag": "method",
                "line": 2,
                "lastLine": 2,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "return": {
                "tag": "return",
                "line": 3,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "{number}\n"
              }
            }
          },
          {
            "name": "on",
            "visibility": "public",
            "static": false,
            "lineNumber": 183,
            "memberOf": "Freenox.prototype",
            "doclet": "/**\n * @description Subscribe to events on the component's local Channel. Events on the\n *               local channel are not visible to other components or the main\n *               ComponentChannel.\n * @function\n * @example \n *  // Execute callback for ALL events on the component (no eventType given)\n *  myComponent.on(function(event){\n *      // Analyze, log, etc the event\n *  });\n * \n *  // Execute callback for a component-generated event\n *  // Format of eventType is ACTION/VALUE\n *  // ACTION - function call, state change, etc on the component\n *  // VALUE - name of action, property name, etc.\n * \n *  // Note: TARGET is automatically prepended to the eventType and\n *  //       is equal to the name of the component as defined in the spec\n *  myComponent.on('action/submit', function(event){\n *      // Execute logic for the submit action on the component\n *  });\n * \n *  // Subscribe to multiple events\n *  myComponent.on( {\n *      'action/submit': function(submitEvent){\n *          // Business Logic\n *      },\n *      'state/enabled': function(enabledEvent){\n *          // Business Logic\n *      },\n *      'action/requestBalance': function(requestEvent){\n *          // Business Logic\n *      },\n *      'state/valid': function(validEvent){\n *          // Business Logic\n *      }\n *  } );\n * \n *  // Can use wildcards\n *  myComponent.on('action/*', function(actionEvent){\n *      // Logic for all actions on the component\n *  } );\n * \n * @param {String|PlainObject} [eventType] The type of event. \n * @param {Function} [callback] The callback to execute when the event is published. \n */",
            "args": [
              "eventType",
              "callback"
            ],
            "description": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel.",
            "classDeclarationFlag": false,
            "line": "Freenox.prototype.on = function(eventType, callback) {",
            "originalJsDocDescription": {
              "description": {
                "tag": "description",
                "line": 1,
                "lastLine": 3,
                "textStartsOnSameLine": true,
                "text": "Subscribe to events on the component's local Channel. Events on the\n              local channel are not visible to other components or the main\n              ComponentChannel."
              },
              "function": {
                "tag": "function",
                "line": 4,
                "lastLine": 4,
                "textStartsOnSameLine": true,
                "text": ""
              },
              "params": [
                {
                  "tag": "param",
                  "line": 5,
                  "lastLine": 5,
                  "textStartsOnSameLine": true,
                  "text": "{String|PlainObject} [eventType] The type of event."
                },
                {
                  "tag": "param",
                  "line": 6,
                  "lastLine": 6,
                  "textStartsOnSameLine": true,
                  "text": "{Function} [callback] The callback to execute when the event is published."
                }
              ],
              "example": {
                "tag": "example",
                "line": 7,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n // Execute callback for ALL events on the component (no eventType given)\n myComponent.on(function(event){\n     // Analyze, log, etc the event\n });\n\n // Execute callback for a component-generated event\n // Format of eventType is ACTION/VALUE\n // ACTION - function call, state change, etc on the component\n // VALUE - name of action, property name, etc.\n\n // Note: TARGET is automatically prepended to the eventType and\n //       is equal to the name of the component as defined in the spec\n myComponent.on('action/submit', function(event){\n     // Execute logic for the submit action on the component\n });\n\n // Subscribe to multiple events\n myComponent.on( {\n     'action/submit': function(submitEvent){\n         // Business Logic\n     },\n     'state/enabled': function(enabledEvent){\n         // Business Logic\n     },\n     'action/requestBalance': function(requestEvent){\n         // Business Logic\n     },\n     'state/valid': function(validEvent){\n         // Business Logic\n     }\n } );\n\n // Can use wildcards\n myComponent.on('action/*', function(actionEvent){\n     // Logic for all actions on the component\n } );\n"
              }
            }
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "test.js",
        "strict": false
      },
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 200
    },
    {
      "results": {
        "amdProc": {
          "requires": [],
          "moduleName": "zero_test",
          "AMD": true,
          "webPath": ""
        }
      },
      "errors": {
        "thirdPartyFilter": [],
        "minFilter": [],
        "badCharactersProc": [],
        "amdFilter": [],
        "jsBeautifyProc": [],
        "jsDoccerProc": [
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoo'.",
            "code": "wfJD",
            "evidence": "function zoo(z) {",
            "line": 11,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoo'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoop'.",
            "code": "wfJD",
            "evidence": "function zoop(z) {",
            "line": 15,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoop'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoopsa'.",
            "code": "wfJD",
            "evidence": "function zoopsa(z) {",
            "line": 19,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoopsa'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoopsaArray'.",
            "code": "wfJD",
            "evidence": "function zoopsaArray(z) {",
            "line": 23,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoopsaArray'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoopsaNumericExpression'.",
            "code": "wfJD",
            "evidence": "function zoopsaNumericExpression(z) {",
            "line": 27,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoopsaNumericExpression'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'zoopsaPrivateExpression'.",
            "code": "wfJD",
            "evidence": "function zoopsaPrivateExpression(z) {",
            "line": 31,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'zoopsaPrivateExpression'."
          },
          {
            "id": "(error)",
            "raw": "No jsDoc Comments for method 'stupidFunction'.",
            "code": "wfJD",
            "evidence": "function stupidFunction() {",
            "line": 43,
            "character": -1,
            "scope": "(main)",
            "a": "",
            "reason": "No jsDoc Comments for method 'stupidFunction'."
          }
        ]
      },
      "outputDirectory": "test-output",
      "path": "test-source/zero-test.js",
      "folderPath": "test-source",
      "fileName": "zero-test.js",
      "packagePath": "",
      "webPath": "",
      "libFile": false,
      "min": false,
      "realName": "zero-test",
      "name": "zero_test",
      "camelName": "ZeroTest",
      "processedFilePath": "test-output/zero-test.js",
      "couldParseOriginalSource": true,
      "preprocessed": true,
      "jsDoccerProcData": {
        "lines": 73,
        "requires": [],
        "className": "n/a",
        "packagePath": "",
        "directoryPath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "uses_Y": false,
        "no_lib": true,
        "inferencedClassName": "n/a",
        "uses_$": false,
        "chars": 1091,
        "uses_YUI": false,
        "fields": [],
        "moduleName": "./zero-test",
        "uses_console_log": false,
        "uses_backbone": false,
        "classes": {},
        "methods": [
          {
            "name": "zoo",
            "visibility": "public",
            "static": false,
            "lineNumber": 11,
            "memberOf": "",
            "doclet": "/**\n * Zoo.\n * @param z\n */",
            "args": [
              "z"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function zoo(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoop",
            "visibility": "public",
            "static": false,
            "lineNumber": 15,
            "memberOf": "",
            "doclet": "/**\n * Zoop.\n * @param z\n * @return {boolean}\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "{boolean}",
            "classDeclarationFlag": false,
            "line": "function zoop(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoopsa",
            "visibility": "public",
            "static": false,
            "lineNumber": 19,
            "memberOf": "",
            "doclet": "/**\n * Zoopsa.\n * @param z\n */",
            "args": [
              "z"
            ],
            "description": "",
            "classDeclarationFlag": false,
            "line": "function zoopsa(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoopsaArray",
            "visibility": "public",
            "static": false,
            "lineNumber": 23,
            "memberOf": "",
            "doclet": "/**\n * Zoopsa array.\n * @param z\n * @return {array}\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "{array}",
            "classDeclarationFlag": false,
            "line": "function zoopsaArray(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoopsaNumericExpression",
            "visibility": "public",
            "static": false,
            "lineNumber": 27,
            "memberOf": "",
            "doclet": "/**\n * Zoopsa numeric expression.\n * @param z\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function zoopsaNumericExpression(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoopsaPrivateExpression",
            "visibility": "public",
            "static": false,
            "lineNumber": 31,
            "memberOf": "",
            "doclet": "/**\n * Zoopsa private expression.\n * @param z\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function zoopsaPrivateExpression(z) {",
            "originalJsDocDescription": {}
          },
          {
            "name": "zoopsax",
            "visibility": "public",
            "static": false,
            "lineNumber": 39,
            "memberOf": "",
            "doclet": "/**\n * @param z\n * @return A numeric mambo.\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function zoopsax(z) {",
            "originalJsDocDescription": {
              "return": {
                "tag": "return",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "A numeric mambo.\n"
              }
            }
          },
          {
            "name": "stupidFunction",
            "visibility": "public",
            "static": false,
            "lineNumber": 43,
            "memberOf": "",
            "doclet": "/**\n * Stupid function.\n * @todo Please describe the return type of this method.\n * @return {object} ??\n */",
            "description": "",
            "return": "?",
            "classDeclarationFlag": false,
            "line": "function stupidFunction() {",
            "originalJsDocDescription": {}
          },
          {
            "name": "funkyFoo",
            "visibility": "public",
            "static": false,
            "lineNumber": 54,
            "memberOf": "",
            "doclet": "/**\n * @private\n * @param z\n * @return {string}\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "{string}",
            "classDeclarationFlag": false,
            "line": "function funkyFoo(z) {",
            "originalJsDocDescription": {
              "private": {
                "tag": "private",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "funkyFood",
            "visibility": "public",
            "static": false,
            "lineNumber": 61,
            "memberOf": "",
            "doclet": "/**\n * @protected\n * @param z\n * @return {string}\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "{string}",
            "classDeclarationFlag": false,
            "line": "function funkyFood(z) {",
            "originalJsDocDescription": {
              "protected": {
                "tag": "protected",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          },
          {
            "name": "funkyFoodle",
            "visibility": "public",
            "static": false,
            "lineNumber": 68,
            "memberOf": "",
            "doclet": "/**\n * @public\n * @param z\n * @return {string}\n */",
            "args": [
              "z"
            ],
            "description": "",
            "return": "{string}",
            "classDeclarationFlag": false,
            "line": "function funkyFoodle(z) {",
            "originalJsDocDescription": {
              "public": {
                "tag": "public",
                "line": 1,
                "lastLine": -1,
                "textStartsOnSameLine": true,
                "text": "\n"
              }
            }
          }
        ],
        "is_module": false,
        "uses_alert": false,
        "uses_y_log": false,
        "requiresRaw": [],
        "basePath": "/Users/f558910/Documents/Projects/jsdoc-prep/test-source",
        "fileName": "zero-test.js",
        "strict": false
      },
      "possibleClassname": "",
      "testStubs": "\n",
      "couldParseProcessedSource": true,
      "corrupted": false,
      "numberOfLines": 101
    }
  ],
  "path": "test-source",
  "timeInSeconds": 0.586,
  "outPath": "test-output",
  "testPath": "test-jstests",
  "docPath": "test-jsdocs",
  "resultsPath": "test-results"
}